{"version":3,"sources":["img/logo.png","constants.tsx","components/layout/navbar/AdminNavbar.tsx","components/layout/navbar/index.tsx","components/layout/footer/index.tsx","store/program/services.tsx","components/layout/forms/FormFields.tsx","components/programs/EditProgramModal/EditProgramForm.tsx","components/programs/EditProgramModal/index.tsx","store/notification/actions.tsx","components/programs/MergePrograms/MergeProgramForm.tsx","components/programs/MergePrograms/index.tsx","store/program/actions.tsx","store/program/types.tsx","components/programs/ProgramListItem.tsx","components/programs/ProgramList.tsx","components/programs/AddProgramModal/AddProgramForm.tsx","components/programs/AddProgramModal/index.tsx","components/programs/index.tsx","store/user/types.tsx","components/reportList/ReportPeriodSelectionForm.tsx","store/reportList/services.tsx","store/reportList/actions.tsx","store/reportList/types.tsx","components/reportList/ReportListItem.tsx","components/reportList/ReportList.tsx","store/search/services.tsx","components/top100/Top100SearchForm.tsx","components/top100/Top100ArtistList.tsx","components/top100/Top100AlbumList.tsx","components/top100/Top100TrackList.tsx","components/top100/index.tsx","store/search/actions.tsx","store/search/types.tsx","store/user/services.tsx","store/user/actions.tsx","components/users/EditUserModal/EditUserForm.tsx","components/users/EditUserModal/index.tsx","components/users/UserListItem.tsx","components/users/UserList.tsx","components/users/AddUserModal/AddUserForm.tsx","components/users/AddUserModal/index.tsx","components/users/index.tsx","store/login/services.tsx","store/album/services.tsx","store/artist/services.tsx","store/report/services.tsx","store/track/services.tsx","components/login/LoginForm.tsx","store/login/actions.tsx","store/login/types.tsx","components/layout/notification/Notification.tsx","App.tsx","store/album/reducer.tsx","store/album/types.tsx","store/artist/reducer.tsx","store/artist/types.tsx","store/login/reducer.tsx","store/notification/reducer.tsx","store/program/reducer.tsx","store/report/reducer.tsx","store/report/types.tsx","store/reportList/reducer.tsx","store/search/reducer.tsx","store/track/reducer.tsx","store/track/types.tsx","store/user/reducer.tsx","store/index.tsx","index.tsx"],"names":["module","exports","AdminNavbar","currentUser","style","marginBottom","Menu","pointing","stackable","inverted","Item","link","to","Image","alt","src","logo","size","position","Navbar","login","useSelector","state","level","Footer","marginTop","textAlign","Date","getFullYear","href","target","rel","baseUrl","token","getAllActive","a","config","headers","Authorization","axios","get","req","data","getAll","getOne","id","request","createProgram","newProgram","post","updateProgram","updatedProgram","put","mergePrograms","mergeParams","setToken","newToken","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","type","color","RequiredTextField","required","PasswordField","RequiredPasswordField","displayOptions","siteOptions","EditProgramForm","onSubmit","onCancel","program","initialValues","identifier","display","site","user_id","validate","values","errors","console","log","isValid","component","Grid","Column","floated","width","Button","onClick","disabled","EditUserModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","setNotification","message","content","dispatch","setTimeout","MergeProgramForm","selectOptions","programToMerge","dirty","MergePrograms","program_id","program_name","useDispatch","programs","useState","setModalOpen","handleOpen","handleClose","mergeOptions","allPrograms","trigger","Number","merge","mergeTo","programService","ProgramListItem","setError","closeModal","undefined","Table","Row","Cell","EditProgramModal","e","response","border","cursor","ProgramList","loading","Container","Dimmer","active","Loader","striped","Body","AddProgramForm","AddProgramModal","Programs","useEffect","React","Icon","programToAdd","createNewProgram","reportMonthOptions","dateNow","years","i","push","UserLevel","yearOptions","toString","reportYearOptions","reverse","ReportPeriodSelectionForm","reportYear","reportMonth","getAllByDate","date","getAllByDateByUser","user","getAllInProgress","getAllTransfers","deleteReport","generateReportDownload","params","responseType","downloadReport","filename","download","getAllReportsByDate","reportListService","reports","getAllReportsByDateByUser","ReportListItem","reportStatusOutPrint","loginLevel","report","setOpen","status","rerun","Fragment","Responsive","minWidth","program_no","moment","program_date","format","program_start_time","slice","program_end_time","Confirm","onConfirm","ReportList","reportList","reportListDate","reportListTimeDate","length","reportsToShow","filterByText","filter","toLowerCase","includes","filterUserValue","filterStatusValue","r","getTracksForAutocompleteSearch","query","getDiscogsData","artist","album","process","REACT_APP_DISCOGS_TOKEN","getTop100","list","start_date","end_date","advancedSearch","searchParams","kind","changeArtistOptions","changeAlbumOptions","listOptions","Top100SearchForm","now","mode","dateFormat","Top100ArtistList","top100","t","track_id","artist_id","count","album_id","track_title","Top100","search","getTop100Results","top100Values","searchService","results","top100Query","Top100AlbumList","Top100TrackList","createUser","userToAdd","updateUser","userToUpdate","deleteUser","delete","levelOptions","DJ","Staff","Admin","statusOptions","AddUserForm","password","confirm_password","first_name","last_name","email","username","EditUserForm","UserListItem","userLevelOutPrint","userStatusOutPrint","openDeleteUser","setDeleteUserOpen","userService","users","last_seen","cancelButton","confirmButton","UserList","requiredError","AddUserModal","Users","newUser","credentials","res","LoginForm","setUsername","setPassword","event","preventDefault","loginService","window","localStorage","setItem","JSON","stringify","newLogin","control","Input","onChange","trim","Notification","notification","Message","floating","success","header","negative","App","loggedUserJSON","getItem","parse","reportService","trackService","artistService","albumService","err","removeItem","exact","path","initialState","currentAlbum","tracklist","albumReducer","action","currentArtist","albumList","artistReducer","loginReducer","notificationReducer","activePrograms","programReducer","playlog","editTrackId","reportDetails","newReport","checkedForDelete","currentTrack","reportReducer","track","report_track_id","inProgress","reportTransferList","lastTransfer","reportListReducer","advancedResults","sortAdvancedResults","discogsData","searchReducer","result","artistToMerge","mergeArtistTo","newArtistName","newName","filteredArtists","renamedArtists","artist_name","removeMergedArtists","newArtistResults","playHistory","trackReducer","playhistory","userReducer","reducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.41f3bb18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ca9e42db.png\";","export const recordCountryOptions = [\n  { label: 'Finland', value: 'FI' },\n  { label: 'United Kingdom', value: 'GB' },\n  { label: 'United States', value: 'US' },\n  { label: 'Afghanistan', value: 'AF' },\n  { label: 'Åland Islands', value: 'AX' },\n  { label: 'Albania', value: 'AL' },\n  { label: 'Algeria', value: 'DZ' },\n  { label: 'American Samoa', value: 'AS' },\n  { label: 'AndorrA', value: 'AD' },\n  { label: 'Angola', value: 'AO' },\n  { label: 'Anguilla', value: 'AI' },\n  { label: 'Antarctica', value: 'AQ' },\n  { label: 'Antigua and Barbuda', value: 'AG' },\n  { label: 'Argentina', value: 'AR' },\n  { label: 'Armenia', value: 'AM' },\n  { label: 'Aruba', value: 'AW' },\n  { label: 'Australia', value: 'AU' },\n  { label: 'Austria', value: 'AT' },\n  { label: 'Azerbaijan', value: 'AZ' },\n  { label: 'Bahamas', value: 'BS' },\n  { label: 'Bahrain', value: 'BH' },\n  { label: 'Bangladesh', value: 'BD' },\n  { label: 'Barbados', value: 'BB' },\n  { label: 'Belarus', value: 'BY' },\n  { label: 'Belgium', value: 'BE' },\n  { label: 'Belize', value: 'BZ' },\n  { label: 'Benin', value: 'BJ' },\n  { label: 'Bermuda', value: 'BM' },\n  { label: 'Bhutan', value: 'BT' },\n  { label: 'Bolivia', value: 'BO' },\n  { label: 'Bosnia and Herzegovina', value: 'BA' },\n  { label: 'Botswana', value: 'BW' },\n  { label: 'Bouvet Island', value: 'BV' },\n  { label: 'Brazil', value: 'BR' },\n  { label: 'British Indian Ocean Territory', value: 'IO' },\n  { label: 'Brunei Darussalam', value: 'BN' },\n  { label: 'Bulgaria', value: 'BG' },\n  { label: 'Burkina Faso', value: 'BF' },\n  { label: 'Burundi', value: 'BI' },\n  { label: 'Cambodia', value: 'KH' },\n  { label: 'Cameroon', value: 'CM' },\n  { label: 'Canada', value: 'CA' },\n  { label: 'Cape Verde', value: 'CV' },\n  { label: 'Cayman Islands', value: 'KY' },\n  { label: 'Central African Republic', value: 'CF' },\n  { label: 'Chad', value: 'TD' },\n  { label: 'Chile', value: 'CL' },\n  { label: 'China', value: 'CN' },\n  { label: 'Christmas Island', value: 'CX' },\n  { label: 'Cocos (Keeling) Islands', value: 'CC' },\n  { label: 'Colombia', value: 'CO' },\n  { label: 'Comoros', value: 'KM' },\n  { label: 'Congo', value: 'CG' },\n  { label: 'Congo, The Democratic Republic of the', value: 'CD' },\n  { label: 'Cook Islands', value: 'CK' },\n  { label: 'Costa Rica', value: 'CR' },\n  { label: \"Cote D'Ivoire\", value: 'CI' },\n  { label: 'Croatia', value: 'HR' },\n  { label: 'Cuba', value: 'CU' },\n  { label: 'Cyprus', value: 'CY' },\n  { label: 'Czech Republic', value: 'CZ' },\n  { label: 'Denmark', value: 'DK' },\n  { label: 'Djibouti', value: 'DJ' },\n  { label: 'Dominica', value: 'DM' },\n  { label: 'Dominican Republic', value: 'DO' },\n  { label: 'Ecuador', value: 'EC' },\n  { label: 'Egypt', value: 'EG' },\n  { label: 'El Salvador', value: 'SV' },\n  { label: 'Equatorial Guinea', value: 'GQ' },\n  { label: 'Eritrea', value: 'ER' },\n  { label: 'Estonia', value: 'EE' },\n  { label: 'Ethiopia', value: 'ET' },\n  { label: 'Falkland Islands (Malvinas)', value: 'FK' },\n  { label: 'Faroe Islands', value: 'FO' },\n  { label: 'Fiji', value: 'FJ' },\n  { label: 'France', value: 'FR' },\n  { label: 'French Guiana', value: 'GF' },\n  { label: 'French Polynesia', value: 'PF' },\n  { label: 'French Southern Territories', value: 'TF' },\n  { label: 'Gabon', value: 'GA' },\n  { label: 'Gambia', value: 'GM' },\n  { label: 'Georgia', value: 'GE' },\n  { label: 'Germany', value: 'DE' },\n  { label: 'Ghana', value: 'GH' },\n  { label: 'Gibraltar', value: 'GI' },\n  { label: 'Greece', value: 'GR' },\n  { label: 'Greenland', value: 'GL' },\n  { label: 'Grenada', value: 'GD' },\n  { label: 'Guadeloupe', value: 'GP' },\n  { label: 'Guam', value: 'GU' },\n  { label: 'Guatemala', value: 'GT' },\n  { label: 'Guernsey', value: 'GG' },\n  { label: 'Guinea', value: 'GN' },\n  { label: 'Guinea-Bissau', value: 'GW' },\n  { label: 'Guyana', value: 'GY' },\n  { label: 'Haiti', value: 'HT' },\n  { label: 'Heard Island and Mcdonald Islands', value: 'HM' },\n  { label: 'Holy See (Vatican City State)', value: 'VA' },\n  { label: 'Honduras', value: 'HN' },\n  { label: 'Hong Kong', value: 'HK' },\n  { label: 'Hungary', value: 'HU' },\n  { label: 'Iceland', value: 'IS' },\n  { label: 'India', value: 'IN' },\n  { label: 'Indonesia', value: 'ID' },\n  { label: 'Iran, Islamic Republic Of', value: 'IR' },\n  { label: 'Iraq', value: 'IQ' },\n  { label: 'Ireland', value: 'IE' },\n  { label: 'Isle of Man', value: 'IM' },\n  { label: 'Israel', value: 'IL' },\n  { label: 'Italy', value: 'IT' },\n  { label: 'Jamaica', value: 'JM' },\n  { label: 'Japan', value: 'JP' },\n  { label: 'Jersey', value: 'JE' },\n  { label: 'Jordan', value: 'JO' },\n  { label: 'Kazakhstan', value: 'KZ' },\n  { label: 'Kenya', value: 'KE' },\n  { label: 'Kiribati', value: 'KI' },\n  { label: \"Korea, Democratic People's Republic of\", value: 'KP' },\n  { label: 'Korea, Republic of', value: 'KR' },\n  { label: 'Kuwait', value: 'KW' },\n  { label: 'Kyrgyzstan', value: 'KG' },\n  { label: \"Lao People's Democratic Republic\", value: 'LA' },\n  { label: 'Latvia', value: 'LV' },\n  { label: 'Lebanon', value: 'LB' },\n  { label: 'Lesotho', value: 'LS' },\n  { label: 'Liberia', value: 'LR' },\n  { label: 'Libyan Arab Jamahiriya', value: 'LY' },\n  { label: 'Liechtenstein', value: 'LI' },\n  { label: 'Lithuania', value: 'LT' },\n  { label: 'Luxembourg', value: 'LU' },\n  { label: 'Macao', value: 'MO' },\n  { label: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n  { label: 'Madagascar', value: 'MG' },\n  { label: 'Malawi', value: 'MW' },\n  { label: 'Malaysia', value: 'MY' },\n  { label: 'Maldives', value: 'MV' },\n  { label: 'Mali', value: 'ML' },\n  { label: 'Malta', value: 'MT' },\n  { label: 'Marshall Islands', value: 'MH' },\n  { label: 'Martinique', value: 'MQ' },\n  { label: 'Mauritania', value: 'MR' },\n  { label: 'Mauritius', value: 'MU' },\n  { label: 'Mayotte', value: 'YT' },\n  { label: 'Mexico', value: 'MX' },\n  { label: 'Micronesia, Federated States of', value: 'FM' },\n  { label: 'Moldova, Republic of', value: 'MD' },\n  { label: 'Monaco', value: 'MC' },\n  { label: 'Mongolia', value: 'MN' },\n  { label: 'Montenegro', value: 'ME' },\n  { label: 'Montserrat', value: 'MS' },\n  { label: 'Morocco', value: 'MA' },\n  { label: 'Mozambique', value: 'MZ' },\n  { label: 'Myanmar', value: 'MM' },\n  { label: 'Namibia', value: 'NA' },\n  { label: 'Nauru', value: 'NR' },\n  { label: 'Nepal', value: 'NP' },\n  { label: 'Netherlands', value: 'NL' },\n  { label: 'Netherlands Antilles', value: 'AN' },\n  { label: 'New Caledonia', value: 'NC' },\n  { label: 'New Zealand', value: 'NZ' },\n  { label: 'Nicaragua', value: 'NI' },\n  { label: 'Niger', value: 'NE' },\n  { label: 'Nigeria', value: 'NG' },\n  { label: 'Niue', value: 'NU' },\n  { label: 'Norfolk Island', value: 'NF' },\n  { label: 'Northern Mariana Islands', value: 'MP' },\n  { label: 'Norway', value: 'NO' },\n  { label: 'Oman', value: 'OM' },\n  { label: 'Pakistan', value: 'PK' },\n  { label: 'Palau', value: 'PW' },\n  { label: 'Palestinian Territory, Occupied', value: 'PS' },\n  { label: 'Panama', value: 'PA' },\n  { label: 'Papua New Guinea', value: 'PG' },\n  { label: 'Paraguay', value: 'PY' },\n  { label: 'Peru', value: 'PE' },\n  { label: 'Philippines', value: 'PH' },\n  { label: 'Poland', value: 'PL' },\n  { label: 'Portugal', value: 'PT' },\n  { label: 'Puerto Rico', value: 'PR' },\n  { label: 'Qatar', value: 'QA' },\n  { label: 'Romania', value: 'RO' },\n  { label: 'Russian Federation', value: 'RU' },\n  { label: 'RWANDA', value: 'RW' },\n  { label: 'Saint Helena', value: 'SH' },\n  { label: 'Saint Kitts and Nevis', value: 'KN' },\n  { label: 'Saint Lucia', value: 'LC' },\n  { label: 'Saint Pierre and Miquelon', value: 'PM' },\n  { label: 'Saint Vincent and the Grenadines', value: 'VC' },\n  { label: 'Samoa', value: 'WS' },\n  { label: 'San Marino', value: 'SM' },\n  { label: 'Sao Tome and Principe', value: 'ST' },\n  { label: 'Saudi Arabia', value: 'SA' },\n  { label: 'Senegal', value: 'SN' },\n  { label: 'Serbia', value: 'RS' },\n  { label: 'Seychelles', value: 'SC' },\n  { label: 'Sierra Leone', value: 'SL' },\n  { label: 'Singapore', value: 'SG' },\n  { label: 'Slovakia', value: 'SK' },\n  { label: 'Slovenia', value: 'SI' },\n  { label: 'Solomon Islands', value: 'SB' },\n  { label: 'Somalia', value: 'SO' },\n  { label: 'South Africa', value: 'ZA' },\n  { label: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n  { label: 'Spain', value: 'ES' },\n  { label: 'Sri Lanka', value: 'LK' },\n  { label: 'Sudan', value: 'SD' },\n  { label: 'Suriname', value: 'SR' },\n  { label: 'Svalbard and Jan Mayen', value: 'SJ' },\n  { label: 'Swaziland', value: 'SZ' },\n  { label: 'Sweden', value: 'SE' },\n  { label: 'Switzerland', value: 'CH' },\n  { label: 'Syrian Arab Republic', value: 'SY' },\n  { label: 'Taiwan, Province of China', value: 'TW' },\n  { label: 'Tajikistan', value: 'TJ' },\n  { label: 'Tanzania, United Republic of', value: 'TZ' },\n  { label: 'Thailand', value: 'TH' },\n  { label: 'Timor-Leste', value: 'TL' },\n  { label: 'Togo', value: 'TG' },\n  { label: 'Tokelau', value: 'TK' },\n  { label: 'Tonga', value: 'TO' },\n  { label: 'Trinidad and Tobago', value: 'TT' },\n  { label: 'Tunisia', value: 'TN' },\n  { label: 'Turkey', value: 'TR' },\n  { label: 'Turkmenistan', value: 'TM' },\n  { label: 'Turks and Caicos Islands', value: 'TC' },\n  { label: 'Tuvalu', value: 'TV' },\n  { label: 'Uganda', value: 'UG' },\n  { label: 'Ukraine', value: 'UA' },\n  { label: 'United Arab Emirates', value: 'AE' },\n  { label: 'United States Minor Outlying Islands', value: 'UM' },\n  { label: 'Uruguay', value: 'UY' },\n  { label: 'Uzbekistan', value: 'UZ' },\n  { label: 'Vanuatu', value: 'VU' },\n  { label: 'Venezuela', value: 'VE' },\n  { label: 'Viet Nam', value: 'VN' },\n  { label: 'Virgin Islands, British', value: 'VG' },\n  { label: 'Virgin Islands, U.S.', value: 'VI' },\n  { label: 'Wallis and Futuna', value: 'WF' },\n  { label: 'Western Sahara', value: 'EH' },\n  { label: 'Yemen', value: 'YE' },\n  { label: 'Zambia', value: 'ZM' },\n  { label: 'Zimbabwe', value: 'ZW' },\n];\n\nexport const countryOptions = [\n  {\n    key: 1,\n    label: 'Suomi',\n    value: 1,\n  },\n  {\n    key: 2,\n    label: 'Muu',\n    value: 2,\n  },\n  {\n    key: 0,\n    label: 'Ei tietoa',\n    value: null,\n  },\n];\n\n// program start time options\nexport const startTimeOptions = [\n  {\n    key: 0,\n    label: '00:00',\n    value: '00:00:00',\n  },\n  {\n    key: 1,\n    label: '01:00',\n    value: '01:00:00',\n  },\n  {\n    key: 2,\n    label: '02:00',\n    value: '02:00:00',\n  },\n  {\n    key: 3,\n    label: '03:00',\n    value: '03:00:00',\n  },\n  {\n    key: 4,\n    label: '04:00',\n    value: '04:00:00',\n  },\n  {\n    key: 5,\n    label: '05:00',\n    value: '05:00:00',\n  },\n  {\n    key: 6,\n    label: '06:00',\n    value: '06:00:00',\n  },\n  {\n    key: 7,\n    label: '07:00',\n    value: '07:00:00',\n  },\n  {\n    key: 8,\n    label: '08:00',\n    value: '08:00:00',\n  },\n  {\n    key: 9,\n    label: '09:00',\n    value: '09:00:00',\n  },\n  {\n    key: 10,\n    label: '10:00',\n    value: '10:00:00',\n  },\n  {\n    key: 11,\n    label: '11:00',\n    value: '11:00:00',\n  },\n  {\n    key: 12,\n    label: '12:00',\n    value: '12:00:00',\n  },\n  {\n    key: 13,\n    label: '13:00',\n    value: '13:00:00',\n  },\n  {\n    key: 14,\n    label: '14:00',\n    value: '14:00:00',\n  },\n  {\n    key: 15,\n    label: '15:00',\n    value: '15:00:00',\n  },\n  {\n    key: 16,\n    label: '16:00',\n    value: '16:00:00',\n  },\n  {\n    key: 17,\n    label: '17:00',\n    value: '17:00:00',\n  },\n  {\n    key: 18,\n    label: '18:00',\n    value: '18:00:00',\n  },\n  {\n    key: 19,\n    label: '19:00',\n    value: '19:00:00',\n  },\n  {\n    key: 20,\n    label: '20:00',\n    value: '20:00:00',\n  },\n  {\n    key: 21,\n    label: '21:00',\n    value: '21:00:00',\n  },\n  {\n    key: 22,\n    label: '22:00',\n    value: '22:00:00',\n  },\n  {\n    key: 23,\n    label: '23:00',\n    value: '23:00:00',\n  },\n];\n\n// program end time options\nexport const endTimeOptions = [\n  {\n    key: 0,\n    label: '01:00',\n    value: '01:00:00',\n  },\n  {\n    key: 1,\n    label: '02:00',\n    value: '02:00:00',\n  },\n  {\n    key: 2,\n    label: '03:00',\n    value: '03:00:00',\n  },\n  {\n    key: 3,\n    label: '04:00',\n    value: '04:00:00',\n  },\n  {\n    key: 4,\n    label: '05:00',\n    value: '05:00:00',\n  },\n  {\n    key: 5,\n    label: '06:00',\n    value: '06:00:00',\n  },\n  {\n    key: 6,\n    label: '07:00',\n    value: '07:00:00',\n  },\n  {\n    key: 7,\n    label: '08:00',\n    value: '08:00:00',\n  },\n  {\n    key: 8,\n    label: '09:00',\n    value: '09:00:00',\n  },\n  {\n    key: 9,\n    label: '10:00',\n    value: '10:00:00',\n  },\n  {\n    key: 10,\n    label: '11:00',\n    value: '11:00:00',\n  },\n  {\n    key: 11,\n    label: '12:00',\n    value: '12:00:00',\n  },\n  {\n    key: 12,\n    label: '13:00',\n    value: '13:00:00',\n  },\n  {\n    key: 13,\n    label: '14:00',\n    value: '14:00:00',\n  },\n  {\n    key: 14,\n    label: '15:00',\n    value: '15:00:00',\n  },\n  {\n    key: 15,\n    label: '16:00',\n    value: '16:00:00',\n  },\n  {\n    key: 16,\n    label: '17:00',\n    value: '17:00:00',\n  },\n  {\n    key: 17,\n    label: '18:00',\n    value: '18:00:00',\n  },\n  {\n    key: 18,\n    label: '19:00',\n    value: '19:00:00',\n  },\n  {\n    key: 19,\n    label: '20:00',\n    value: '20:00:00',\n  },\n  {\n    key: 20,\n    label: '21:00',\n    value: '21:00:00',\n  },\n  {\n    key: 21,\n    label: '22:00',\n    value: '22:00:00',\n  },\n  {\n    key: 22,\n    label: '23:00',\n    value: '23:00:00',\n  },\n  {\n    key: 23,\n    label: '24:00',\n    value: '23:59:59',\n  },\n];\n\n// user level options\nexport const levelOptions = [\n  {\n    key: 1,\n    label: 'DJ',\n    value: 1,\n  },\n  {\n    key: 2,\n    label: 'Toimitus',\n    value: 2,\n  },\n  {\n    key: 3,\n    label: 'Admin',\n    value: 3,\n  },\n];\n\n// month options\nexport const reportMonthOptions = [\n  {\n    key: '01',\n    label: 'Tammikuu',\n    value: '01',\n  },\n  {\n    key: '02',\n    label: 'Helmikuu',\n    value: '02',\n  },\n  {\n    key: '03',\n    label: 'Maaliskuu',\n    value: '03',\n  },\n  {\n    key: '04',\n    label: 'Huhtikuu',\n    value: '04',\n  },\n  {\n    key: '05',\n    label: 'Toukokuu',\n    value: '05',\n  },\n  {\n    key: '06',\n    label: 'Kesäkuu',\n    value: '06',\n  },\n  {\n    key: '07',\n    label: 'Heinäkuu',\n    value: '07',\n  },\n  {\n    key: '08',\n    label: 'Elokuu',\n    value: '08',\n  },\n  {\n    key: '09',\n    label: 'Syyskuu',\n    value: '09',\n  },\n  {\n    key: '10',\n    label: 'Lokakuu',\n    value: '10',\n  },\n  {\n    key: '11',\n    label: 'Marraskuu',\n    value: '11',\n  },\n  {\n    key: '12',\n    label: 'Joulukuu',\n    value: '12',\n  },\n];\n\n// year options\nconst dateNow = new Date().getFullYear() + 1;\nconst years = [];\n// eslint-disable-next-line no-plusplus\nfor (let i = 2001; i <= dateNow; i++) {\n  years.push(i);\n}\nlet yearOptions = years.map((option) => ({\n  key: option.toString(),\n  label: option.toString(),\n  value: option.toString(),\n}));\nyearOptions = yearOptions.reverse();\n\nexport const reportYearOptions = yearOptions;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image } from 'semantic-ui-react';\nimport logo from '../../../img/logo.png';\nimport { CurrentUser } from '../../../store/login/types';\n\ninterface Props {\n  currentUser: CurrentUser;\n}\n\nconst AdminNavbar: React.FC<Props> = ({ currentUser }) => {\n  return (\n    <div style={{ marginBottom: '1.5rem' }}>\n      <Menu pointing stackable inverted>\n        <Menu.Item link>\n          <Link to='/'>\n            <Image alt='logo' src={logo} size='mini' />\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/reports'>\n            <h4>REPORTS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/top100'>\n            <h4>TOP 100</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/search'>\n            <h4>SEARCH</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/transfer'>\n            <h4>TRANSFER FILES</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/programs'>\n            <h4>PROGRAMS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/users'>\n            <h4>USERS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item position='right'>\n          {/* <Dropdown\n            trigger={trigger}\n            options={options}\n            pointing='top left'\n            icon={null}\n          /> */}\n        </Menu.Item>\n        <Menu.Item>{/* <CurrentReport /> */}</Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default AdminNavbar;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ApplicationState } from '../../../store/types';\nimport AdminNavbar from './AdminNavbar';\n\nconst Navbar: React.FC = () => {\n  const login = useSelector((state: ApplicationState) => state.login);\n  switch (login.currentUser?.level) {\n    case 1:\n      return <AdminNavbar currentUser={login.currentUser} />;\n    case 2:\n      return <AdminNavbar currentUser={login.currentUser} />;\n    case 3:\n      return <AdminNavbar currentUser={login.currentUser} />;\n    default:\n      return null;\n  }\n};\n\nexport default Navbar;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div\n      style={{ marginTop: '5rem', marginBottom: '2rem', textAlign: 'center' }}\n    >\n      <br />\n      <em>\n        {' '}\n        &copy; {new Date().getFullYear()}{' '}\n        <a\n          href='https://www.teemukostamo.com'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          {' '}\n          Teemu Kostamo{' '}\n        </a>{' '}\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from 'axios';\nimport { MergeProgramParams, NewProgramType, UpdateProgramType } from './types';\n\nconst baseUrl = '/api/programs';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAllActive = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(`${baseUrl}/active`, config);\n  return req.data;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(`${baseUrl}/all`, config);\n  return req.data;\n};\n\nconst getOne = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/getone/${id}`, config);\n  return request.data;\n};\n\nconst createProgram = async (newProgram: NewProgramType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(baseUrl, newProgram, config);\n  return request.data;\n};\n\nconst updateProgram = async (updatedProgram: UpdateProgramType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/update`, updatedProgram, config);\n  return request.data;\n};\n\nconst mergePrograms = async (mergeParams: MergeProgramParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/merge`, mergeParams, config);\n  return request.data;\n};\n\nexport default {\n  getAllActive,\n  getAll,\n  getOne,\n  createProgram,\n  updateProgram,\n  mergePrograms,\n  setToken,\n};\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps } from 'formik';\nimport { Form } from 'semantic-ui-react';\n\ninterface SelectFieldOptions {\n  key?: number | string;\n  value: number | string;\n  label: string;\n}\n\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: SelectFieldOptions[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options,\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as='select' name={name} className='ui dropdown'>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='text' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const RequiredTextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field required>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='text' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface PasswordProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const PasswordField: React.FC<PasswordProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='password' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const RequiredPasswordField: React.FC<PasswordProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field required>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='password' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { SelectField, TextField } from '../../layout/forms/FormFields';\n\nimport { EditProgramFormValues, Program } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: EditProgramFormValues) => void;\n  onCancel: () => void;\n  login: LoginState;\n  program: Program;\n}\n\nconst displayOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst siteOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst EditProgramForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  login,\n  program,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        id: program.id,\n        name: program.name,\n        identifier: program.identifier,\n        display: program.display || 1,\n        site: program.site || 1,\n        user_id: login.currentUser?.id,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        console.log(values.display);\n        console.log(values.site);\n\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Name'\n              placeholder='Name'\n              name='name'\n              component={TextField}\n            />\n            <Field\n              label='Identifier'\n              placeholder='Identifier'\n              name='identifier'\n              type='password'\n              component={TextField}\n            />\n            <SelectField\n              label='Display'\n              name='display'\n              options={displayOptions}\n            />\n            <SelectField\n              label='Display on site'\n              name='site'\n              options={siteOptions}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Save changes\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditProgramForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport EditProgramForm from './EditProgramForm';\nimport { EditProgramFormValues, Program } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EditProgramFormValues) => void;\n  error?: string;\n  program: Program;\n  login: LoginState;\n}\n\nconst EditUserModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  program,\n  login,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Edit info of program {program.name}</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <EditProgramForm\n        program={program}\n        login={login}\n        onSubmit={onSubmit}\n        onCancel={onClose}\n      />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default EditUserModal;\n","import { Dispatch } from 'redux';\n\nexport const setNotification = (message: string, type: 'success' | 'fail') => {\n  const content = {\n    message,\n    type,\n  };\n  return async (dispatch: Dispatch) => {\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content,\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION',\n      });\n    }, 3000);\n  };\n};\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\n\nimport { SelectField } from '../../layout/forms/FormFields';\n\ninterface MergeValues {\n  programToMerge: number;\n}\n\ninterface SelectFieldType {\n  key: number;\n  value: number;\n  label: string;\n}\n\ninterface Props {\n  onSubmit: (values: MergeValues) => void;\n  onCancel: () => void;\n  selectOptions: Array<SelectFieldType>;\n}\n\nconst MergeProgramForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  selectOptions,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        programToMerge: selectOptions[0].value,\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ dirty }) => {\n        return (\n          <Form className='form ui'>\n            <span style={{ color: 'red' }}>\n              <SelectField\n                label=''\n                name='programToMerge'\n                options={selectOptions}\n              />\n            </span>\n            <Grid>\n              <Grid.Column\n                style={{ marginTop: '1rem' }}\n                floated='left'\n                width={5}\n              >\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty}\n                >\n                  Merge\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default MergeProgramForm;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Modal, Header } from 'semantic-ui-react';\nimport { mergePrograms } from '../../../store/program/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { ApplicationState } from '../../../store/types';\n\nimport MergeProgramForm from './MergeProgramForm';\n\ninterface Props {\n  program_id: number;\n  program_name: string;\n}\n\nconst MergePrograms: React.FC<Props> = ({ program_id, program_name }) => {\n  const dispatch = useDispatch();\n  const programs = useSelector((state: ApplicationState) => state.program);\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {program_id}\n      </button>\n    );\n  }\n\n  interface MergeValues {\n    programToMerge: number;\n  }\n  const submitMergePrograms = (values: MergeValues) => {\n    console.log(Number(values.programToMerge));\n    const mergeParams = {\n      type: 'program',\n      merge: Number(values.programToMerge),\n      mergeTo: program_id,\n    };\n    console.log(mergeParams);\n    dispatch(mergePrograms(mergeParams));\n    dispatch(\n      setNotification(`Ohjelma #${mergeParams.merge} yhdistetty!`, 'success')\n    );\n    handleClose();\n  };\n  const mergeOptions = programs.allPrograms.map((program) => ({\n    key: program.id,\n    label: `${program.id} - ${program.name}`,\n    value: program.id,\n  }));\n  // const getProgramToMerge = (\n  //   e: React.SyntheticEvent<HTMLElement>,\n  //   value: DropdownProps\n  // ) => {\n  //   console.log(value);\n  //   e.preventDefault();\n  //   // setProgramToMerge(value);\n  // };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {program_id}\n        </button>\n      }\n    >\n      <Header>\n        Merge {program_id} - {program_name} with:\n      </Header>\n      <Modal.Content>\n        {/* <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getProgramToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>{' '} */}\n        <MergeProgramForm\n          onSubmit={submitMergePrograms}\n          onCancel={handleClose}\n          selectOptions={mergeOptions}\n        />\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default MergePrograms;\n","import { Dispatch } from 'redux';\nimport programService from './services';\nimport {\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  GET_ONE_PROGRAM,\n  CREATE_NEW_PROGRAM,\n  UPDATE_PROGRAM,\n  SET_LOADING,\n  MergeProgramParams,\n  NewProgramType,\n  UpdateProgramType,\n} from './types';\n\nexport const getAllPrograms = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs,\n    });\n  } catch (err) {\n    console.log(\n      'error getting all programs programActions.getAllPrograms',\n      err\n    );\n  }\n};\n\n// get all active programs\nexport const initializePrograms = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const programs = await programService.getAllActive();\n    dispatch({\n      type: GET_ALL_ACTIVE_PROGRAMS,\n      data: programs,\n    });\n  } catch (err) {\n    console.log(\n      'error getting all active programs programActions.initializePrograms',\n      err\n    );\n  }\n};\n\nexport const getOneProgram = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const program = await programService.getOne(id);\n    dispatch({\n      type: GET_ONE_PROGRAM,\n      data: program,\n      id,\n    });\n  } catch (err) {\n    console.log('error getting one program programActions.getOneProgram', err);\n  }\n};\n\nexport const createNewProgram = (programToAdd: NewProgramType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const program = await programService.createProgram(programToAdd);\n    dispatch({\n      type: CREATE_NEW_PROGRAM,\n      data: program,\n    });\n  } catch (err) {\n    console.log('error creating new program', err);\n  }\n};\n\nexport const updateProgram = (updatedProgram: UpdateProgramType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await programService.updateProgram(updatedProgram);\n    dispatch({\n      type: UPDATE_PROGRAM,\n      data: updatedProgram,\n    });\n  } catch (error) {\n    console.log('error updating program', error);\n  }\n};\n\nexport const mergePrograms = (mergeParams: MergeProgramParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await programService.mergePrograms(mergeParams);\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs,\n    });\n  } catch (error) {\n    console.log(\n      'error merging two programs programActions.mergePrograms',\n      error\n    );\n  }\n};\n","export const GET_ONE_PROGRAM = 'GET_ONE_PROGRAM';\nexport const GET_ALL_PROGRAMS = 'GET_ALL_PROGRAMS';\nexport const GET_ALL_ACTIVE_PROGRAMS = 'GET_ALL_ACTIVE_PROGRAMS';\nexport const CREATE_NEW_PROGRAM = 'CREATE_NEW_PROGRAM';\nexport const CREATE_NEW_PROGRAM_ON_NEW_REPORT =\n  'CREATE_NEW_PROGRAM_ON_NEW_REPORT';\nexport const UPDATE_PROGRAM = 'UPDATE_PROGRAM';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Program {\n  id: number;\n  user_id: number;\n  name: string;\n  identifier?: string;\n  display?: number;\n  site?: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface ProgramState {\n  allPrograms: Array<Program>;\n  activePrograms: Array<Program>;\n  program: Program | null;\n  loading: boolean;\n}\n\nexport interface NewProgramType {\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface AddProgramFormValues {\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface EditProgramFormValues {\n  id: number;\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface UpdateProgramType {\n  id: number;\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface MergeProgramParams {\n  type: string;\n  merge: number;\n  mergeTo: number;\n}\n\n// program action types\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface GetOneProgram {\n  type: typeof GET_ONE_PROGRAM;\n  data: Program;\n}\n\ninterface GetAllPrograms {\n  type: typeof GET_ALL_PROGRAMS;\n  data: Array<Program>;\n}\n\ninterface GetAllActivePrograms {\n  type: typeof GET_ALL_ACTIVE_PROGRAMS;\n  data: Array<Program>;\n}\n\ninterface CreateNewProgram {\n  type: typeof CREATE_NEW_PROGRAM;\n  data: Program;\n}\n\ninterface CreateNewProgramOnNewReport {\n  type: typeof CREATE_NEW_PROGRAM_ON_NEW_REPORT;\n  data: Program;\n}\n\ninterface UpdateProgram {\n  type: typeof UPDATE_PROGRAM;\n  data: Program;\n}\n\nexport type ProgramActionTypes =\n  | SetLoadingAction\n  | GetOneProgram\n  | GetAllPrograms\n  | GetAllActivePrograms\n  | CreateNewProgram\n  | CreateNewProgramOnNewReport\n  | UpdateProgram;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table } from 'semantic-ui-react';\n\nimport EditProgramModal from './EditProgramModal';\nimport MergePrograms from './MergePrograms';\n\nimport { Program, EditProgramFormValues } from '../../store/program/types';\nimport { ApplicationState } from '../../store/types';\n\nimport { updateProgram } from '../../store/program/actions';\nimport { setNotification } from '../../store/notification/actions';\n\ninterface Props {\n  program: Program;\n}\n\nconst ProgramListItem: React.FC<Props> = ({ program }) => {\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  let className;\n  if (program.display === 1) {\n    className = 'active-program';\n  }\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitUpdatedProgram = (values: EditProgramFormValues) => {\n    try {\n      console.log(values);\n      dispatch(updateProgram(values));\n      dispatch(setNotification(`${values.name} updated!`, 'success'));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <Table.Row className={className}>\n      <Table.Cell>\n        <MergePrograms program_id={program.id} program_name={program.name} />\n      </Table.Cell>\n      <Table.Cell>\n        <EditProgramModal\n          program={program}\n          login={login}\n          modalOpen={modalOpen}\n          onSubmit={submitUpdatedProgram}\n          error={error}\n          onClose={closeModal}\n        />\n        <button\n          style={{ border: 'none', cursor: 'pointer', color: 'blue' }}\n          onClick={openModal}\n        >\n          {program.name}\n        </button>\n      </Table.Cell>\n      <Table.Cell>{program.identifier}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default ProgramListItem;\n","import React from 'react';\nimport { Container, Dimmer, Loader, Table } from 'semantic-ui-react';\nimport { LoginState } from '../../store/login/types';\nimport { ProgramState, Program } from '../../store/program/types';\n\nimport ProgramListItem from './ProgramListItem';\n\ninterface Props {\n  login: LoginState;\n  program: ProgramState;\n}\n\nconst ProgramList: React.FC<Props> = ({ login, program }) => {\n  if (program.allPrograms === null || program.loading === true) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Loading programs...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n  if (login.currentUser?.level === 2 || login.currentUser?.level === 3) {\n    return (\n      <Container>\n        <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n          <h3 style={{ display: 'inline' }}>Programs</h3>\n          {/* <AddProgramModal /> */}\n        </div>\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>ID</Table.Cell>\n              <Table.Cell>Program name</Table.Cell>\n              <Table.Cell>Program identifier</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {program.allPrograms.map((program: Program) => (\n              <ProgramListItem program={program} key={program.id} />\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default ProgramList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  SelectField,\n  TextField,\n} from '../../layout/forms/FormFields';\n\nimport { AddProgramFormValues } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: AddProgramFormValues) => void;\n  onCancel: () => void;\n  login: LoginState;\n}\n\nconst displayOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst siteOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst AddProgramForm: React.FC<Props> = ({ onSubmit, onCancel, login }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        identifier: '',\n        display: 1,\n        site: 1,\n        user_id: login.currentUser?.id,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        console.log(values.display);\n        console.log(values.site);\n\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Name'\n              placeholder='Name'\n              name='name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Identifier'\n              placeholder='Identifier'\n              name='identifier'\n              type='password'\n              component={TextField}\n            />\n            <SelectField\n              label='Display'\n              name='display'\n              options={displayOptions}\n            />\n            <SelectField\n              label='Display on site'\n              name='site'\n              options={siteOptions}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddProgramForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddProgramForm from './AddProgramForm';\nimport { AddProgramFormValues } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: AddProgramFormValues) => void;\n  error?: string;\n  login: LoginState;\n}\nconst AddProgramModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  login,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new program</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <AddProgramForm onSubmit={onSubmit} onCancel={onClose} login={login} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddProgramModal;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ApplicationState } from '../../store/types';\nimport { AddProgramFormValues } from '../../store/program/types';\nimport { Button, Icon, Container } from 'semantic-ui-react';\nimport { getAllPrograms, createNewProgram } from '../../store/program/actions';\nimport ProgramList from './ProgramList';\nimport AddProgramModal from './AddProgramModal';\n\nconst Programs: React.FC = () => {\n  const programs = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllPrograms());\n    // eslint-disable-next-line\n  }, []);\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  console.log(modalOpen);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewProgram = (values: AddProgramFormValues) => {\n    try {\n      const programToAdd = {\n        ...values,\n        display: Number(values.display),\n        site: Number(values.site),\n      };\n      console.log(programToAdd);\n      dispatch(createNewProgram(programToAdd));\n      // dispatch(setNotification(`User ${values.username} created!`, 'success'));\n      console.log('adding program', programToAdd);\n      closeModal();\n    } catch (e) {\n      // dispatch(setNotification('Failed to create user!', 'fail'));\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <Container>\n      <Button\n        floated='right'\n        color='green'\n        style={{ marginBottom: '0.5rem' }}\n        onClick={() => openModal()}\n      >\n        <Icon name='add' />\n        Create a new program\n      </Button>\n      <AddProgramModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewProgram}\n        error={error}\n        onClose={closeModal}\n        login={login}\n      />\n      <ProgramList program={programs} login={login} />\n    </Container>\n  );\n};\n\nexport default Programs;\n","export const INIT_USER_LIST = 'INIT_USER_LIST';\nexport const CREATE_USER = 'CREATE_USER';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USER = 'DELETE_USER';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface User {\n  id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  address?: string;\n  zip?: string;\n  city?: string;\n  country?: string;\n  phone?: string;\n  status: number | null;\n  level: number;\n  last_seen?: string;\n  reset_key?: string;\n  old_id?: number;\n  created_at: Date;\n  updated_at: Date;\n}\nexport type Users = Array<User>;\n\nexport interface UserToAdd {\n  username: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport enum UserLevel {\n  'DJ' = 1,\n  'Staff' = 2,\n  'Admin' = 3,\n}\n\nexport type UserLevelOptions = {\n  value: UserLevel;\n  label: string;\n};\n\nexport interface AddUserFormValues {\n  username: string;\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport interface EditUserFormValues {\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  level: number;\n  status: number | null;\n}\n\nexport interface UserToUpdate {\n  id: number;\n  password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  level: number;\n  status: number | null;\n}\n\nexport interface UserState {\n  users: Users;\n  loading: boolean;\n}\n\n// user action types\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface InitUserListAction {\n  type: typeof INIT_USER_LIST;\n  data: Users;\n}\n\ninterface CreateUser {\n  type: typeof CREATE_USER;\n  data: User;\n}\n\ninterface UpdateUser {\n  type: typeof UPDATE_USER;\n  data: Users;\n}\n\ninterface DeleteUser {\n  type: typeof DELETE_USER;\n  data: number;\n}\n\nexport type UserActionTypes =\n  | SetLoadingAction\n  | InitUserListAction\n  | CreateUser\n  | UpdateUser\n  | DeleteUser;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\nimport { SelectField } from '../layout/forms/FormFields';\nimport { ReportListSelectionDate } from '../../store/reportList/types';\nimport { reportMonthOptions, reportYearOptions } from '../../constants';\n\ninterface Props {\n  onSubmit: (values: ReportListSelectionDate) => void;\n}\n\nconst ReportPeriodSelectionForm: React.FC<Props> = ({ onSubmit }) => {\n  console.log(reportYearOptions);\n  return (\n    <Formik\n      initialValues={{\n        reportYear: '2020',\n        reportMonth: '01',\n      }}\n      onSubmit={onSubmit}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            <Grid>\n              <Grid.Column width={4}>\n                <SelectField\n                  label='Select month'\n                  name='reportMonth'\n                  options={reportMonthOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={4}>\n                <SelectField\n                  label='Select month'\n                  name='reportYear'\n                  options={reportYearOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={4}>\n                <Button type='submit' floated='right' color='green'>\n                  Get reports\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ReportPeriodSelectionForm;\n","import axios from 'axios';\nimport download from 'downloadjs';\nimport { ReportTransferParams } from './types';\n\nconst baseUrl = '/api/reportslist';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get a list of reports by date\nconst getAllByDate = async (date: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/date/${date}`, config);\n  return request.data;\n};\n\n// get all by month and by user\nconst getAllByDateByUser = async (date: string, user: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `${baseUrl}/all?date=${date}&user=${user}`,\n    config\n  );\n  return request.data;\n};\n\n// get all in progress reports of one user\nconst getAllInProgress = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/user/${id}`, config);\n  return request.data;\n};\n\nconst getAllTransfers = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get('/api/reporttransfer', config);\n  return request.data;\n};\n\nconst deleteReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/${id}`, {}, config);\n  return request.data;\n};\n\n// generate text file for download\nconst generateReportDownload = async (params: ReportTransferParams) => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' },\n    };\n    const request = await axios.post('/api/reporttransfer', params, config);\n    return request.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// download report\nexport const downloadReport = async (filename: string) => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' },\n    };\n    const response = await axios.get(`/api/reporttransfer/${filename}`, config);\n    download(response.data, filename);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default {\n  setToken,\n  deleteReport,\n  getAllByDate,\n  getAllByDateByUser,\n  getAllInProgress,\n  getAllTransfers,\n  generateReportDownload,\n  downloadReport,\n};\n","import { Dispatch } from 'redux';\nimport {\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  SET_LOADING,\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  CLEAR_CURRENT_REPORT,\n  DELETE_REPORT,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT,\n  ReportTransferParams,\n  DeleteInProgressReportParams,\n} from './types';\n\nimport reportListService from './services';\n\n// get a list of report transfers by date\nexport const getAllTransfers = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const reports = await reportListService.getAllTransfers();\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllTransfers error', error);\n  }\n};\n\nexport const generateReportTransfer = (params: ReportTransferParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const transferredReport = await reportListService.generateReportDownload(\n      params\n    );\n    const reports = await reportListService.getAllTransfers();\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports,\n    });\n    dispatch({\n      type: GENERATE_REPORT_TRANSFER,\n      data: transferredReport,\n    });\n  } catch (error) {\n    console.log('reportListActions generateReportTransferError', error);\n  }\n};\n\n// get a list of reports by date\nexport const getAllReportsByDate = (date: string) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllByDate(date);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllReportsByDate error', error);\n  }\n};\n\n// get a list of reports by date by user\nexport const getAllReportsByDateByUser = (date: string, user: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllByDateByUser(date, user);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllReportsByDateByUser error', error);\n  }\n};\n\n// get all in progress by current user for front page\nexport const getAllInProgress = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllInProgress(id);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllInProgressReports error', error);\n  }\n};\n\nexport const deleteInProgressReport = (\n  params: DeleteInProgressReportParams\n) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportListService.deleteReport(params.report_id);\n    const reports = await reportListService.getAllInProgress(params.user_id);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteReport = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportListService.deleteReport(id);\n    dispatch({\n      type: DELETE_REPORT,\n      data: id,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const filterByUserId = (id: number) => (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_USER_ID,\n    data: id,\n  });\n};\n\nexport const filterByStatus = (status: number) => (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_STATUS,\n    data: status,\n  });\n};\n\nexport const filterByText = (text: string) => async (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_TEXT,\n    data: text,\n  });\n};\n","export const GET_ALL_REPORTS_BY_DATE = 'GET_ALL_REPORTS_BY_DATE';\nexport const GET_ALL_IN_PROGRESS = 'GET_ALL_IN_PROGRESS';\nexport const GET_ALL_REPORT_TRANSFERS = 'GET_ALL_REPORT_TRANSFERS';\nexport const GENERATE_REPORT_TRANSFER = 'GENERATE_REPORT_TRANSFER';\nexport const FILTER_BY_USER_ID = 'FILTER_BY_USER_ID';\nexport const FILTER_BY_STATUS = 'FILTER_BY_STATUS';\nexport const FILTER_BY_TEXT = 'FILTER_BY_TEXT';\nexport const DELETE_REPORT = 'DELETE_REPORT';\nexport const CLEAR_CURRENT_REPORT = 'CLEAR_CURRENT_REPORT';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Report {\n  program_no: number | null;\n  name: string;\n  program_date: string;\n  program_start_time: string;\n  program_end_time: string;\n  status: number;\n  rerun: number | null;\n  program_dj: string;\n  id: number;\n  user_id: number;\n}\n\nexport interface ReportTransfer {\n  id: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n  status: number;\n  filename: string;\n  period: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ReportListState {\n  inProgress: Array<Report>;\n  reportList: Array<Report>;\n  reportListDate: string | null;\n  reportTransferList: Array<ReportTransfer>;\n  lastTransfer: ReportTransfer | null;\n  filterStatusValue: number | null;\n  filterUserValue: number | null;\n  filterByText: string;\n  error: string | null;\n  loading: boolean;\n}\n\nexport interface ReportTransferParams {\n  user_id: number;\n  status: number;\n  period: string;\n  filename: string;\n}\n\nexport interface DeleteInProgressReportParams {\n  report_id: number;\n  user_id: number;\n}\n\n// reportlist action types\ninterface GetAllReportsByDateAction {\n  type: typeof GET_ALL_REPORTS_BY_DATE;\n  data: Array<Report>;\n  date: string;\n}\n\ninterface GetAllInProgressAction {\n  type: typeof GET_ALL_IN_PROGRESS;\n  data: Array<Report>;\n}\n\ninterface GetAllReportTransfersAction {\n  type: typeof GET_ALL_REPORT_TRANSFERS;\n  data: Array<ReportTransfer>;\n}\n\ninterface GenerateReportTransferAction {\n  type: typeof GENERATE_REPORT_TRANSFER;\n  data: ReportTransfer;\n}\n\ninterface FilterByUserIdAction {\n  type: typeof FILTER_BY_USER_ID;\n  data: number;\n}\n\ninterface FilterByStatusAction {\n  type: typeof FILTER_BY_STATUS;\n  data: number;\n}\n\ninterface FilterByTextAction {\n  type: typeof FILTER_BY_TEXT;\n  data: string;\n}\n\ninterface DeleteReportAction {\n  type: typeof DELETE_REPORT;\n  data: number;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ReportListActionTypes =\n  | GetAllReportsByDateAction\n  | GetAllInProgressAction\n  | GetAllReportTransfersAction\n  | GenerateReportTransferAction\n  | FilterByUserIdAction\n  | FilterByStatusAction\n  | FilterByTextAction\n  | DeleteReportAction\n  | SetLoadingAction;\n\nexport interface ReportListSelectionDate {\n  reportYear: string;\n  reportMonth: string;\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Table, Icon, Confirm, Responsive } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { deleteReport } from '../../store/reportList/actions';\nimport { setNotification } from '../../store/notification/actions';\nimport { Report } from '../../store/reportList/types';\n\ninterface Props {\n  loginLevel: number | undefined;\n  report: Report;\n}\n\nconst ReportListItem: React.FC<Props> = ({ loginLevel, report }) => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n  const confirmDelete = () => {\n    setOpen(false);\n    dispatch(deleteReport(report.id));\n    dispatch(\n      setNotification(\n        `${report.name} ${report.program_date} poistettu!`,\n        'success'\n      )\n    );\n  };\n  let reportStatusOutPrint;\n  let className;\n\n  if (report.status === 1) {\n    reportStatusOutPrint = 'Ready';\n  } else if (report.status === 0) {\n    reportStatusOutPrint = 'In progress';\n  } else if (report.status === 9) {\n    reportStatusOutPrint = 'Deleted';\n    return null;\n  }\n  if (report.rerun === 1) {\n    className = 'rerun';\n  }\n\n  if (loginLevel === 1 && report.rerun === 1) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <Table.Row className={className}>\n        <Responsive as={Table.Cell} minWidth={768}>\n          {report.program_no}\n        </Responsive>\n        <Table.Cell>\n          <Link className={className} to={`reports/${report.id}`}>\n            {report.name}\n          </Link>\n        </Table.Cell>\n        <Table.Cell>\n          {moment(report.program_date).format('DD.MM.YYYY')}\n        </Table.Cell>\n        <Table.Cell>\n          {report.program_start_time.slice(0, -3)} -{' '}\n          {report.program_end_time.slice(0, -3)}\n        </Table.Cell>\n        <Table.Cell>{reportStatusOutPrint}</Table.Cell>\n        <Table.Cell>\n          <Icon\n            style={{ color: 'red' }}\n            name='delete'\n            onClick={() => setOpen(true)}\n          />\n          <Confirm\n            content={`Haluatko varmasti poistaa raportin ${report.name} ${report.program_date}`}\n            open={open}\n            onCancel={cancelDelete}\n            onConfirm={confirmDelete}\n          />\n        </Table.Cell>\n      </Table.Row>\n    </React.Fragment>\n  );\n};\n\nexport default ReportListItem;\n","/* eslint-disable indent */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Container,\n  Table,\n  Dimmer,\n  Loader,\n  Responsive,\n} from 'semantic-ui-react';\nimport moment from 'moment';\nimport { ApplicationState } from '../../store/types';\nimport ReportPeriodSelectionForm from './ReportPeriodSelectionForm';\nimport ReportListItem from './ReportListItem';\nimport { ReportListSelectionDate } from '../../store/reportList/types';\nimport {\n  getAllReportsByDate,\n  getAllReportsByDateByUser,\n} from '../../store/reportList/actions';\n\nconst ReportList = () => {\n  const login = useSelector((state: ApplicationState) => state.login);\n  const reportList = useSelector((state: ApplicationState) => state.reportList);\n  console.log(reportList);\n\n  const dispatch = useDispatch();\n  // initial reports list\n  useEffect(() => {\n    if (login.currentUser?.level === 1) {\n      if (reportList.reportListDate === null) {\n        dispatch(\n          getAllReportsByDateByUser(\n            moment().format('YYYY-MM'),\n            login.currentUser.id\n          )\n        );\n      } else {\n        dispatch(\n          getAllReportsByDateByUser(\n            reportList.reportListDate,\n            login.currentUser.id\n          )\n        );\n      }\n    } else if (reportList.reportListDate === null) {\n      dispatch(getAllReportsByDate(moment().format('YYYY-MM')));\n    } else {\n      dispatch(getAllReportsByDate(reportList.reportListDate));\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const onSubmit = (values: ReportListSelectionDate) => {\n    console.log(values);\n    const date = `${values.reportYear}-${values.reportMonth}`;\n\n    if (login.currentUser?.level === 1) {\n      dispatch(getAllReportsByDateByUser(date, login.currentUser.id));\n    } else {\n      dispatch(getAllReportsByDate(date));\n    }\n  };\n\n  if (reportList.reportList === null || reportList.loading) {\n    return (\n      <Dimmer active>\n        <Loader content='Ladataan...' />\n      </Dimmer>\n    );\n  }\n\n  if (reportList.reportList.length === 0) {\n    return (\n      <Container>\n        <h2>No reports in the selected time period</h2>\n        <ReportPeriodSelectionForm onSubmit={onSubmit} />\n      </Container>\n    );\n  }\n\n  let reportListTimeDate;\n  if (reportList.reportListDate === null) {\n    reportListTimeDate = moment().format('MMMM YYYY');\n  } else {\n    reportListTimeDate = moment(reportList.reportListDate).format('MMMM YYYY');\n  }\n\n  let reportsToShow = reportList.reportList;\n\n  reportsToShow =\n    Number(reportList.filterByText) === 0\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter((report) =>\n          report.name\n            .toLowerCase()\n            .includes(reportList.filterByText.toLowerCase())\n        ));\n  reportsToShow =\n    reportList.filterUserValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          (report) => report.user_id === reportList.filterUserValue\n        ));\n  reportsToShow =\n    reportList.filterStatusValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          (report) => report.status === reportList.filterStatusValue\n        ));\n\n  return (\n    <Container>\n      {/* <ReportFilterForm /> */}\n      <h3>Reports {reportListTimeDate}</h3>\n      <ReportPeriodSelectionForm onSubmit={onSubmit} />\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Responsive as={Table.Cell} minWidth={768}>\n              Program number\n            </Responsive>\n            <Table.Cell>Program name</Table.Cell>\n            <Table.Cell>Date</Table.Cell>\n            <Table.Cell>Time</Table.Cell>\n            <Table.Cell>Status</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {reportsToShow.map((r) => (\n            <ReportListItem\n              key={r.id}\n              report={r}\n              loginLevel={login.currentUser?.level}\n            />\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  );\n};\n\nexport default ReportList;\n","import axios from 'axios';\nimport {\n  DiscogsQueryType,\n  Top100QueryType,\n  AdvancedSearchQueryType,\n  MergeParamsType,\n} from './types';\n\nconst baseUrl = '/api/search';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getTracksForAutocompleteSearch = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/autocomplete/${query}`, config);\n  return request.data;\n};\n\nconst getDiscogsData = async (query: DiscogsQueryType) => {\n  const request = await axios.get(\n    `https://api.discogs.com/database/search?artist=${query.artist}&release_title=${query.album}&token=${process.env.REACT_APP_DISCOGS_TOKEN}`\n  );\n  return request.data;\n};\n\nconst getTop100 = async (query: Top100QueryType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `/api/top100?list=${query.list}&start_date=${query.start_date}&end_date=${query.end_date}`,\n    config\n  );\n  return request.data;\n};\n\nconst advancedSearch = async (searchParams: AdvancedSearchQueryType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `${baseUrl}/advanced?kind=${searchParams.kind}&query=${searchParams.query}`,\n    config\n  );\n  return request.data;\n};\n\nconst merge = async (mergeParams: MergeParamsType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/advanced`, mergeParams, config);\n  return request.data;\n};\n\nconst changeArtistOptions = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/changeartist/${query}`, config);\n  return request.data;\n};\n\nconst changeAlbumOptions = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/changealbum/${query}`, config);\n  return request.data;\n};\n\nexport default {\n  advancedSearch,\n  getTop100,\n  getDiscogsData,\n  getTracksForAutocompleteSearch,\n  setToken,\n  changeArtistOptions,\n  changeAlbumOptions,\n  merge,\n};\n","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Formik } from 'formik';\nimport { Datepicker, Form, Select } from 'react-formik-ui';\nimport { Top100QueryType } from '../../store/search/types';\nimport moment from 'moment';\n\nconst listOptions = [\n  {\n    key: 1,\n    value: 'artist_id',\n    label: 'Artists',\n  },\n  {\n    key: 2,\n    value: 'track_id',\n    label: 'Tracks',\n  },\n  {\n    key: 3,\n    value: 'album_id',\n    label: 'Albums',\n  },\n];\n\ninterface Props {\n  onSubmit: (values: Top100QueryType) => void;\n}\n\nconst Top100SearchForm: React.FC<Props> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        list: 'artist_id',\n        start_date: moment(Date.now() - 7 * 24 * 3600 * 1000).format(\n          'YYYY-MM-DD'\n        ),\n        end_date: moment(new Date()).format('YYYY-MM-DD'),\n      }}\n      onSubmit={onSubmit}\n    >\n      {() => {\n        return (\n          <Form mode='structured'>\n            {/* <SelectField label='Get' name='list' options={listOptions} />{' '} */}\n            <Select name='list' label='Get Top 100' options={listOptions} />\n            <Datepicker\n              name='start_date'\n              label='Starting'\n              dateFormat='dd.MM.yyyy'\n              placeholder='dd.mm.yyyy'\n            />{' '}\n            <Datepicker\n              name='end_date'\n              label='Ending'\n              dateFormat='dd.MM.yyyy'\n              placeholder='dd.mm.yyyy'\n            />{' '}\n            <Button type='submit' color='green'>\n              Submit\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Top100SearchForm;\n","import React, { useState } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Album</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Album</Table.Cell>\n          <Table.Cell>Track</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n          <Table.Cell></Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/track/${t.track_id}`}>{t.track_title}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n            <Table.Cell>\n              {/* <AddToCurrentReport\n                    track_title={t.track_title}\n                    track_id={t.track_id}\n                    length={t.length}\n                  /> */}\n            </Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container } from 'semantic-ui-react';\nimport { ApplicationState } from '../../store/types';\nimport { Top100QueryType } from '../../store/search/types';\nimport { getTop100 } from '../../store/search/actions';\nimport moment from 'moment';\n\nimport Top100SearchForm from './Top100SearchForm';\nimport Top100ArtistList from './Top100ArtistList';\nimport Top100AlbumList from './Top100AlbumList';\nimport Top100TrackList from './Top100TrackList';\n\nconst Top100: React.FC = () => {\n  const search = useSelector((state: ApplicationState) => state.search);\n  const dispatch = useDispatch();\n\n  const getTop100Results = (values: Top100QueryType) => {\n    console.log(values);\n    const top100Values = {\n      ...values,\n      end_date: moment(new Date()).format('YYYY-MM-DD'),\n    };\n    console.log(top100Values);\n    dispatch(getTop100(top100Values));\n  };\n  console.log(search);\n  if (search.top100Query === null) {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n      </Container>\n    );\n  }\n  if (search.loading) {\n    return (\n      <Container>\n        <h1>Top 100</h1>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <div>Loading</div>\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'artist_id') {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100ArtistList top100={search.top100} />\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'album_id') {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100AlbumList top100={search.top100} />\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'track_id') {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100TrackList top100={search.top100} />\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default Top100;\n","import { Dispatch } from 'redux';\nimport searchService from './services';\nimport {\n  AUTOCOMPLETE_RESULTS,\n  SET_SEARCH_LOADING,\n  TOP_100,\n  GET_DISCOGS_DATA,\n  CLEAR_DISCOGS_DATA,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_CHANGE_ALBUM_OPTIONS,\n  GET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ALBUM_OPTIONS,\n  AdvancedSearchQueryType,\n  DiscogsQueryType,\n  DiscogsDataType,\n  Top100QueryType,\n} from './types';\n\nexport const getAutocompleteResults = (query: string) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.getTracksForAutocompleteSearch(query);\n    dispatch({\n      type: AUTOCOMPLETE_RESULTS,\n      data: results,\n    });\n  } catch (error) {\n    console.log('searchActions error getting autocomplete results', error);\n  }\n};\n\nexport const advancedSearch = (searchParams: AdvancedSearchQueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.advancedSearch(searchParams);\n    dispatch({\n      type: ADVANCED_RESULTS,\n      data: results,\n    });\n  } catch (error) {\n    console.log('searchActions error getting advanced results', error);\n  }\n};\n\nexport const sortAdvancedResults = (sortBy: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SORT_ADVANCED_RESULTS,\n      data: sortBy,\n    });\n  } catch (error) {\n    console.log('searchActions error sorting advanced results', error);\n  }\n};\n\nexport const getCatIdFromDiscogs = (query: DiscogsQueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    let catId: string = '';\n    let year: string = '';\n    let label: string = '';\n    const results = await searchService.getDiscogsData(query);\n\n    console.log(results.results.length);\n    if (results.results.length === 0) {\n      catId = 'EI ILMOITETTU';\n    } else if (results.results[0].catno !== 'none') {\n      console.log(results.results[0]);\n\n      catId = results.results[0].catno;\n    } else if (results.results[1].catno !== 'none') {\n      console.log(results.results[1]);\n\n      catId = results.results[1].catno;\n    } else if (results.results[2].catno !== 'none') {\n      console.log(results.results[2]);\n\n      catId = results.results[2].catno;\n    } else if (results.results[3].catno !== 'none') {\n      console.log(results.results[3]);\n\n      catId = results.results[3].catno;\n    } else if (results.results[4].catno !== 'none') {\n      console.log(results.results[4]);\n\n      catId = results.results[4].catno;\n    } else {\n      catId = 'EI ILMOITETTU';\n    }\n    const discogsData: DiscogsDataType = {\n      cat_id: catId,\n      year,\n      label,\n    };\n    console.log(catId);\n    dispatch({\n      type: GET_DISCOGS_DATA,\n      data: discogsData,\n    });\n  } catch (error) {\n    console.log('searchActions error getting discogs data', error);\n  }\n};\n\nexport const clearDiscogsCatId = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CLEAR_DISCOGS_DATA,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getTop100 = (query: Top100QueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.getTop100(query);\n    dispatch({\n      type: TOP_100,\n      data: results,\n      query,\n    });\n  } catch (error) {\n    console.log('searchActions error getting top100 results', error);\n  }\n};\n","export const AUTOCOMPLETE_RESULTS = 'AUTOCOMPLETE_RESULTS';\nexport const ADVANCED_RESULTS = 'ADVANCED_RESULTS';\nexport const SORT_ADVANCED_RESULTS = 'SORT_ADVANCED_RESULTS';\nexport const GET_DISCOGS_DATA = 'GET_DISCOGS_DATA';\nexport const CLEAR_DISCOGS_DATA = 'CLEAR_DISCOGS_DATA';\nexport const TOP_100 = 'TOP_100';\nexport const SET_SEARCH_LOADING = 'SET_SEARCH_LOADING';\nexport const GET_CHANGE_ALBUM_OPTIONS = 'GET_CHANGE_ALBUM_OPTIONS';\nexport const GET_CHANGE_ARTIST_OPTIONS = 'GET_CHANGE_ARTIST_OPTIONS';\nexport const RESET_CHANGE_ALBUM_OPTIONS = 'RESET_CHANGE_ALBUM_OPTIONS';\nexport const RESET_CHANGE_ARTIST_OPTIONS = 'RESET_CHANGE_ARTIST_OPTIONS';\nexport const MERGE_ALBUMS = 'MERGE_ALBUMS';\nexport const MERGE_ARTISTS = 'MERGE_ARTISTS';\nexport const MERGE_TRACKS = 'MERGE_TRACKS';\n\nexport interface AdvancedResultsType {\n  artist_name: string;\n  artist_id: number;\n  album_name: string;\n  album_id: number;\n  track_title: string;\n  track_id: number;\n  length: number;\n  program_date: string;\n  report_id: number;\n}\n\nexport interface AdvancedSearchQueryType {\n  kind: string;\n  query: string;\n}\n\nexport interface Top100Type {\n  count: number;\n  track_id: number;\n  track_title: string;\n  album: string;\n  artist: string;\n  album_id: number;\n  artist_id: number;\n}\n\nexport interface Top100QueryType {\n  list: string;\n  start_date: string;\n  end_date: string;\n}\n\nexport type SortAdvancedResultsType = number | null;\n\nexport interface DiscogsDataType {\n  year: string;\n  cat_id: string;\n  label: string;\n}\n\nexport interface DiscogsQueryType {\n  album: string;\n  artist: string;\n}\n\nexport interface MergeParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n}\n\nexport interface MergeTrackParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n  newName: string;\n}\n\nexport interface MergeArtistsParamsType {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface SearchState {\n  top100: Array<Top100Type>;\n  top100Query: Top100QueryType | null;\n  advancedResults: Array<AdvancedResultsType>;\n  sortAdvancedResults: number | null;\n  loading: boolean;\n  discogsData: DiscogsDataType | null;\n}\n\n// search action types\ninterface AdvancedResultsAction {\n  type: typeof ADVANCED_RESULTS;\n  data: Array<AdvancedResultsType>;\n}\n\ninterface Top100Action {\n  type: typeof TOP_100;\n  data: Array<Top100Type>;\n  query: Top100QueryType;\n}\n\ninterface SortAdvancedResultsAction {\n  type: typeof SORT_ADVANCED_RESULTS;\n  data: SortAdvancedResultsType;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_SEARCH_LOADING;\n}\n\ninterface GetDiscogsDataAction {\n  type: typeof GET_DISCOGS_DATA;\n  data: DiscogsDataType;\n}\n\ninterface ClearDiscogsDataAction {\n  type: typeof CLEAR_DISCOGS_DATA;\n}\n\ninterface MergeTracksAction {\n  type: typeof MERGE_TRACKS;\n  data: MergeTrackParamsType;\n}\n\ninterface MergeArtistsAction {\n  type: typeof MERGE_ARTISTS;\n  data: MergeArtistsParamsType;\n}\n\nexport type SearchActionTypes =\n  | AdvancedResultsAction\n  | Top100Action\n  | SortAdvancedResultsAction\n  | SetLoadingAction\n  | GetDiscogsDataAction\n  | ClearDiscogsDataAction\n  | MergeTracksAction\n  | MergeArtistsAction;\n","import axios from 'axios';\nimport { UserToAdd, UserToUpdate } from './types';\n\nconst baseUrl = '/api/users';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(baseUrl, config);\n  return req.data;\n};\n\nconst createUser = async (userToAdd: UserToAdd) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(baseUrl, userToAdd, config);\n  return request.data;\n};\n\nconst updateUser = async (userToUpdate: UserToUpdate) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/${userToUpdate.id}`,\n    userToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst deleteUser = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.delete(`${baseUrl}/${id}`, config);\n  return response.data;\n};\n\nexport default { getAll, setToken, createUser, updateUser, deleteUser };\n","import { Dispatch } from 'redux';\nimport userService from './services';\nimport {\n  SET_LOADING,\n  INIT_USER_LIST,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER,\n  UserToAdd,\n  UserToUpdate,\n} from './types';\n\nexport const initializeUsers = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const users = await userService.getAll();\n    dispatch({\n      type: INIT_USER_LIST,\n      data: users,\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createUser = (userToAdd: UserToAdd) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const newUser = await userService.createUser(userToAdd);\n    dispatch({\n      type: CREATE_USER,\n      data: newUser,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateUser = (userToUpdate: UserToUpdate) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await userService.updateUser(userToUpdate);\n    const users = await userService.getAll();\n    dispatch({\n      type: UPDATE_USER,\n      data: users,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteUser = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: DELETE_USER,\n      data: id,\n    });\n    await userService.deleteUser(id);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\nimport {\n  TextField,\n  PasswordField,\n  SelectField,\n} from '../../layout/forms/FormFields';\n\nimport {\n  EditUserFormValues,\n  User,\n  UserLevelOptions,\n  UserLevel,\n} from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: EditUserFormValues) => void;\n  onCancel: () => void;\n  user: User;\n}\n\nconst levelOptions: UserLevelOptions[] = [\n  { value: UserLevel.DJ, label: 'DJ' },\n  { value: UserLevel.Staff, label: 'Staff' },\n  { value: UserLevel.Admin, label: 'Admin' },\n];\n\nconst statusOptions = [\n  { value: 1, label: 'Active' },\n  { value: 0, label: 'Inactive' },\n];\n\nconst AddUserForm: React.FC<Props> = ({ onSubmit, onCancel, user }) => {\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        confirm_password: '',\n        first_name: user.first_name,\n        last_name: user.last_name,\n        email: user.email,\n        level: user.level,\n        status: user.status,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        console.log(values.level);\n        console.log(values.status);\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Password - fill out field only if you wish to change the password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={TextField}\n              required\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={TextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={TextField}\n            />\n            <SelectField label='Level' name='level' options={levelOptions} />\n            <SelectField label='Status' name='status' options={statusOptions} />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddUserForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport EditUserForm from './EditUserForm';\nimport { EditUserFormValues } from '../../../store/user/types';\nimport { User } from '../../../store/user/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EditUserFormValues) => void;\n  error?: string;\n  user: User;\n}\n\nconst EditUserModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  user,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Edit info of user {user.username}</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <EditUserForm user={user} onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default EditUserModal;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Table, Icon, Confirm } from 'semantic-ui-react';\n\nimport { updateUser, deleteUser } from '../../store/user/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nimport EditUserModal from './EditUserModal';\n\nimport { EditUserFormValues } from '../../store/user/types';\nimport { User } from '../../store/user/types';\n\ninterface Props {\n  user: User;\n}\n\nconst UserListItem: React.FC<Props> = ({ user }) => {\n  const dispatch = useDispatch();\n  const [openDeleteUser, setDeleteUserOpen] = useState<boolean>(false);\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const cancelDelete = () => {\n    setDeleteUserOpen(false);\n  };\n  const confirmDelete = () => {\n    setDeleteUserOpen(false);\n    dispatch(deleteUser(user.id));\n    // setNotificationConnect(`Käyttäjä ${user.username} poistettu!`, 'success')\n  };\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitUpdatedUser = (values: EditUserFormValues) => {\n    try {\n      const userToUpdate = {\n        ...values,\n        id: user.id,\n      };\n      dispatch(updateUser(userToUpdate));\n      dispatch(\n        setNotification(\n          `${userToUpdate.first_name} ${userToUpdate.last_name} updated!`,\n          'success'\n        )\n      );\n      console.log('updating user', userToUpdate);\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  let userLevelOutPrint;\n  if (user.level === 1) {\n    userLevelOutPrint = 'DJ';\n  } else if (user.level === 2) {\n    userLevelOutPrint = 'Staff';\n  } else {\n    userLevelOutPrint = 'Admin';\n  }\n\n  let className;\n  let userStatusOutPrint;\n  if (user.status === null || user.status === 0) {\n    userStatusOutPrint = 'Inactive';\n    className = 'inactive-user';\n  } else if (user.status === 1) {\n    userStatusOutPrint = 'Active';\n    className = 'active-user';\n  }\n\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <EditUserModal\n          user={user}\n          modalOpen={modalOpen}\n          onSubmit={submitUpdatedUser}\n          error={error}\n          onClose={closeModal}\n        />\n        <button\n          style={{ border: 'none', cursor: 'pointer', color: 'blue' }}\n          onClick={openModal}\n        >\n          {user.username}\n        </button>\n      </Table.Cell>\n      <Table.Cell>\n        {user.first_name} {user.last_name}\n      </Table.Cell>\n      {/* <Table.Cell>\n        <Moment format='MMMM Do YYYY, h:mm:ss a'>{user.last_seen}</Moment>\n      </Table.Cell> */}\n      <Table.Cell>{user.last_seen}</Table.Cell>\n      <Table.Cell className={className}>{userStatusOutPrint}</Table.Cell>\n      <Table.Cell>{userLevelOutPrint}</Table.Cell>\n      <Table.Cell>\n        <Icon\n          color='red'\n          onClick={() => setDeleteUserOpen(true)}\n          name='delete'\n        />\n        <Confirm\n          content={`Are you sure you wish to delete user ${user.username}?`}\n          open={openDeleteUser}\n          onCancel={cancelDelete}\n          onConfirm={confirmDelete}\n          cancelButton='Cancel delete'\n          confirmButton='Confirm delete'\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default UserListItem;\n","import React from 'react';\nimport { Container, Table } from 'semantic-ui-react';\nimport { LoginState } from '../../store/login/types';\nimport { Users, User } from '../../store/user/types';\n\nimport UserListItem from './UserListItem';\n\ninterface Props {\n  login: LoginState;\n  users: Users;\n}\n\nconst UserList: React.FC<Props> = ({ login, users }) => {\n  if (login.currentUser?.level === 3) {\n    return (\n      <Container>\n        <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n          <h3 style={{ display: 'inline' }}>Users</h3>\n        </div>\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>Username</Table.Cell>\n              <Table.Cell>Name</Table.Cell>\n              <Table.Cell>Latest login</Table.Cell>\n              <Table.Cell>Status</Table.Cell>\n              <Table.Cell>Level</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {users.map((user: User) => (\n              <UserListItem user={user} key={user.id} />\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default UserList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  RequiredPasswordField,\n  SelectField,\n} from '../../layout/forms/FormFields';\n\nimport {\n  AddUserFormValues,\n  UserLevel,\n  UserLevelOptions,\n} from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: AddUserFormValues) => void;\n  onCancel: () => void;\n}\n\nconst levelOptions: UserLevelOptions[] = [\n  { value: UserLevel.DJ, label: 'DJ' },\n  { value: UserLevel.Staff, label: 'Staff' },\n  { value: UserLevel.Admin, label: 'Admin' },\n];\n\nconst AddUserForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        password: '',\n        confirm_password: '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        level: UserLevel.DJ,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.username) {\n          errors.username = requiredError;\n        }\n        if (!values.password) {\n          errors.password = requiredError;\n        }\n        if (!values.confirm_password) {\n          errors.confirm_password = requiredError;\n        }\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Username'\n              placeholder='Username'\n              name='username'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={RequiredPasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={RequiredPasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={RequiredTextField}\n            />\n            <SelectField label='Level' name='level' options={levelOptions} />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddUserForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddUserForm from './AddUserForm';\nimport { AddUserFormValues } from '../../../store/user/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: AddUserFormValues) => void;\n  error?: string;\n}\n\nconst AddUserModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new user</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <AddUserForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddUserModal;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ApplicationState } from '../../store/types';\nimport { Button, Icon, Container } from 'semantic-ui-react';\nimport UserList from './UserList';\nimport AddUserModal from './AddUserModal';\nimport { AddUserFormValues } from '../../store/user/types';\nimport { createUser } from '../../store/user/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nconst Users: React.FC = () => {\n  const users = useSelector((state: ApplicationState) => state.user);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewUser = (values: AddUserFormValues) => {\n    try {\n      dispatch(createUser(values));\n      dispatch(setNotification(`User ${values.username} created!`, 'success'));\n      closeModal();\n    } catch (e) {\n      dispatch(setNotification('Failed to create user!', 'fail'));\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n  return (\n    <Container>\n      <Button\n        floated='right'\n        color='green'\n        style={{ marginBottom: '0.5rem' }}\n        onClick={() => openModal()}\n      >\n        <Icon name='add' />\n        Add a new user\n      </Button>\n      <AddUserModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewUser}\n        error={error}\n        onClose={closeModal}\n      />\n      <UserList users={users.users} login={login} />\n    </Container>\n  );\n};\n\nexport default Users;\n","import axios from 'axios';\n\nconst baseUrl = '/api/login';\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nconst login = async (credentials: LoginCredentials) => {\n  const res = await axios.post(baseUrl, credentials);\n  return res.data;\n};\n\nexport default { login };\n","import { UpdateAlbumParams, ChangeArtistParams } from './types';\nimport axios from 'axios';\n\nconst baseUrl = '/api/albums';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getOneAlbum = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/albumdetails/${id}`, config);\n  return response.data;\n};\n\nconst getTracklistOfAlbum = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/tracklist/${id}`, config);\n  return response.data;\n};\n\nconst updateAlbum = async (albumToUpdate: UpdateAlbumParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/albumdetails/${albumToUpdate.id}`,\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst changeArtistId = async (artistToUpdate: ChangeArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/albums/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateAlbum,\n  getOneAlbum,\n  getTracklistOfAlbum,\n  changeArtistId,\n};\n","import axios from 'axios';\nimport { UpdateArtistParams } from './types';\n\nconst baseUrl = '/api/artists';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get artist details\nconst getOneArtist = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getAlbumsByArtist = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/albumsby/${id}`, config);\n  return response.data;\n};\n\nconst updateArtist = async (artistToUpdate: UpdateArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/details/${artistToUpdate.id}`,\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateArtist,\n  getOneArtist,\n  getAlbumsByArtist,\n};\n","import axios from 'axios';\nimport { AddTrackToReportParams, ReportDetails } from './types';\n\nconst baseUrl = '/api/reports';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get one report with tracks\nconst getOne = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst addTrackToReport = async (trackToAdd: AddTrackToReportParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(`${baseUrl}`, trackToAdd, config);\n  return request.data;\n};\n\nconst deleteTrackFromReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.delete(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst deleteReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`/api/reportslist/${id}`, {}, config);\n  return request.data;\n};\n\n// const updateSortableRank = async remainingTracks => {\n//   const config = {\n//     headers: { Authorization: token }\n//   };\n//   if (remainingTracks === null) {\n//     return;\n//   }\n//   remainingTracks.forEach(async (track, index) => {\n//     const trackToUpdate = {\n//       sortable_rank: index + 1\n//     };\n//     const request = await axios.put(\n//       `${baseUrl}/${track.report_track_id}`,\n//       trackToUpdate,\n//       config\n//     );\n//     return request.data;\n//   });\n// };\n\nconst getReportDetails = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`/api/reportdetails/details/${id}`, config);\n  return request.data;\n};\n\n// create new report\n// const createReport = async newReport => {\n//   const config = {\n//     headers: { Authorization: token }\n//   };\n//   const response = await axios.post('/api/reportdetails', newReport, config);\n//   return response.data;\n// };\n\n// update existing report details\nconst updateReport = async (updatedReport: ReportDetails) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n\n  await axios.put(\n    `/api/reportdetails/update/${updatedReport.id}`,\n    updatedReport,\n    config\n  );\n  return updatedReport;\n};\n\nexport default {\n  setToken,\n  addTrackToReport,\n  deleteTrackFromReport,\n  deleteReport,\n  // updateSortableRank,\n  getOne,\n  getReportDetails,\n  // createReport,\n  updateReport,\n};\n","import axios from 'axios';\nimport {\n  AddTrackToDbType,\n  AddTrackToDbAndReportType,\n  ChangeAlbumParams,\n  ChangeArtistParams,\n} from './types';\nconst baseUrl = '/api/tracks';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// add new track and save it to a report\nconst addNewTrack = async (trackToAdd: AddTrackToDbAndReportType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(\n    `${baseUrl}/addandreport`,\n    trackToAdd,\n    config\n  );\n  return response.data;\n};\n\n// add new track without saving to report\nconst addTrackToDb = async (trackToAdd: AddTrackToDbType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(`${baseUrl}/addtodb`, trackToAdd, config);\n  return response.data;\n};\n\n// add track to album without saving to a report\nconst addTrackToAlbum = async (trackToAdd: AddTrackToDbType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(\n    `${baseUrl}/addtracktoalbum`,\n    trackToAdd,\n    config\n  );\n  return response.data;\n};\n\nconst updateTrack = async (trackToUpdate: AddTrackToDbType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(baseUrl, trackToUpdate, config);\n  return response.data;\n};\n\nconst updateAlbumId = async (albumToUpdate: ChangeAlbumParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/tracks/updatealbum',\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst updateArtistId = async (artistToUpdate: ChangeArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/tracks/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst getOneTrack = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getOneTrackHistory = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/history/${id}`, config);\n  return response.data;\n};\n\nexport default {\n  setToken,\n  addNewTrack,\n  addTrackToAlbum,\n  updateTrack,\n  getOneTrack,\n  getOneTrackHistory,\n  updateAlbumId,\n  updateArtistId,\n  addTrackToDb,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Button, Input } from 'semantic-ui-react';\nimport { newLogin } from '../../store/login/actions';\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n    const user = {\n      username,\n      password,\n    };\n    dispatch(newLogin(user));\n  };\n\n  return (\n    <div>\n      <h1>RADIO TRACKLIST REPORTING</h1>\n      <h3>Log in</h3>\n      <Form onSubmit={handleLogin}>\n        <Form.Field\n          id='login-username'\n          label='username'\n          control={Input}\n          type='text'\n          placeholder='Username...'\n          onChange={(e: { target: { value: string } }) =>\n            setUsername(e.target.value.trim())\n          }\n        />\n        <Form.Field\n          id='login-password'\n          label='password'\n          control={Input}\n          type='password'\n          placeholder='Password...'\n          onChange={(e: { target: { value: string } }) =>\n            setPassword(e.target.value.trim())\n          }\n        />\n        <Button id='login-button' color='green' type='submit'>\n          Log in\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import loginService from './services';\nimport { SET_LOADING } from './types';\nimport { Dispatch } from 'redux';\n\nimport albumService from '../album/services';\nimport artistService from '../artist/services';\nimport programService from '../program/services';\nimport reportService from '../report/services';\nimport reportListService from '../reportList/services';\nimport searchService from '../search/services';\nimport trackService from '../track/services';\nimport userService from '../user/services';\n\ninterface NewLogin {\n  username: string;\n  password: string;\n}\n\nexport const initializeUser = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      // set token for logged in user\n      userService.setToken(user.token);\n      reportService.setToken(user.token);\n      reportListService.setToken(user.token);\n      programService.setToken(user.token);\n      searchService.setToken(user.token);\n      trackService.setToken(user.token);\n      artistService.setToken(user.token);\n      albumService.setToken(user.token);\n      dispatch({\n        type: 'INIT_USER',\n        data: user,\n      });\n    }\n  } catch (err) {\n    // dispatch({\n    //   type: LOGIN_ERROR,\n    //   payload: err.response.statusText,\n    // });\n    console.log('error initializing user', err);\n  }\n};\n\nexport const newLogin = (user: NewLogin) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const newUser = await loginService.login(user);\n    console.log(newUser);\n    window.localStorage.setItem('loggedUser', JSON.stringify(newUser));\n    dispatch({\n      type: 'LOGIN',\n      data: newUser,\n      loading: false,\n    });\n  } catch (error) {\n    console.log(error);\n    const content = {\n      message: 'wrong username or password',\n      type: 'fail',\n    };\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content,\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION',\n      });\n    }, 3000);\n  }\n};\n\nexport const logout = () => async (dispatch: Dispatch) => {\n  window.localStorage.removeItem('loggedUser');\n  dispatch({\n    type: 'LOGOUT',\n  });\n};\n","export const INIT_USER = 'INIT_USER';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface CurrentUser {\n  token: string;\n  username: string;\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  level: number;\n  status: number;\n}\n\nexport interface LoginState {\n  loading: boolean;\n  currentUser: CurrentUser | null;\n}\n\ninterface NewLoginAction {\n  type: typeof LOGIN;\n  data: CurrentUser;\n}\n\ninterface InitUserAction {\n  type: typeof INIT_USER;\n  data: CurrentUser;\n}\n\ninterface LogoutAction {\n  type: typeof LOGOUT;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type LoginActionTypes =\n  | SetLoadingAction\n  | NewLoginAction\n  | InitUserAction\n  | LogoutAction;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport { NotificationState } from '../../../store/notification/types';\n\ninterface Props {\n  notification: NotificationState;\n}\n\nconst Notification: React.FC<Props> = ({ notification }) => {\n  if (notification.type === 'success') {\n    return (\n      <div className='fixedTop'>\n        <Message floating success header={notification.message} />\n      </div>\n    );\n  }\n\n  if (notification.type === 'fail') {\n    return (\n      <div className='fixedTop'>\n        <Message floating negative header={notification.message} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Notification;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport axios from 'axios';\nimport { Container, Button } from 'semantic-ui-react';\nimport './App.css';\n\nimport Navbar from './components/layout/navbar';\nimport Footer from './components/layout/footer';\nimport Programs from './components/programs';\nimport ReportList from './components/reportList/ReportList';\nimport Top100 from './components/top100';\nimport Users from './components/users';\nimport LoginForm from './components/login/LoginForm';\nimport Notification from './components/layout/notification/Notification';\n\nimport { initializeUser, logout } from './store/login/actions';\nimport { initializeUsers } from './store/user/actions';\nimport { ApplicationState } from './store/types';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const login = useSelector((state: ApplicationState) => state.login);\n  const notification = useSelector(\n    (state: ApplicationState) => state.notification\n  );\n\n  useEffect(() => {\n    dispatch(initializeUser());\n    dispatch(initializeUsers());\n    axios.get<void>('/ping');\n    // eslint-disable-next-line\n  }, [login.currentUser?.token]);\n\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n\n  if (login.currentUser === null) {\n    return (\n      <Container>\n        <LoginForm />\n        <Footer />\n      </Container>\n    );\n  }\n  if (login.currentUser?.status === null) {\n    return (\n      <Container>\n        <div>Credentials deactivated. Please contact the administrator.</div>\n        <LoginForm />\n        <Footer />\n      </Container>\n    );\n  }\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar />\n        <Notification notification={notification} />\n        <h1>you logged in as {login.currentUser.username}</h1>\n        <Button onClick={handleLogoutClick}>logout</Button>\n      </div>\n      <Switch>\n        {/* <Route exact path='/' component={Home} />\n        <Route exact path='/reports' component={ReportsByMonth} />\n        <Route exact path='/transfer' component={ReportTransferList} />\n        <Route\n          path='/reports/:id'\n          render={({ match }) => {\n            return <ReportWithTracks id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/artist/:id'\n          render={({ match }) => {\n            return <ArtistDetails id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/album/:id'\n          render={({ match }) => {\n            return <AlbumDetails id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/track/:id'\n          render={({ match }) => {\n            return <TrackDetails id={match.params.id} />;\n          }}\n        />\n        \n        <Route exact path='/search' component={Search} /> */}\n        <Route exact path='/reports' component={ReportList} />\n\n        <Route exact path='/top100' component={Top100} />\n        <Route exact path='/programs' component={Programs} />\n        <Route exact path='/users' component={Users} />\n      </Switch>\n      <Footer />\n    </Router>\n  );\n};\n\nexport default App;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_ALBUM,\n  ADD_TRACK_TO_ALBUM,\n  GET_TRACKLIST_OF_ALBUM,\n  CLEAR_CURRENT_ALBUM,\n  SET_LOADING,\n  CHANGE_ARTIST_OF_ALBUM,\n  AlbumState,\n  AlbumActionTypes,\n} from './types';\n\nconst initialState: AlbumState = {\n  currentAlbum: null,\n  tracklist: [],\n  loading: false,\n};\n\nconst albumReducer: Reducer<AlbumState, Action> = (\n  state = initialState,\n  action: AlbumActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_ALBUM:\n      return {\n        ...state,\n        currentAlbum: action.data,\n        loading: false,\n      };\n    case GET_TRACKLIST_OF_ALBUM:\n      return {\n        ...state,\n        tracklist: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_ALBUM:\n      return {\n        ...state,\n        currentAlbum: null,\n        tracklist: [],\n        loading: false,\n      };\n    case ADD_TRACK_TO_ALBUM:\n      return {\n        ...state,\n        tracklist: [...state.tracklist, action.data],\n      };\n    // case CHANGE_ARTIST_OF_ALBUM:\n    //   return {\n    //     ...state,\n    //     currentAlbum: {\n    //       ...state.currentAlbum,\n    //       artist_id: action.data.artist_id,\n    //       artist_name: action.data.artist_name,\n    //     },\n    //     loading: false,\n    //   };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default albumReducer;\n","export const GET_ONE_ALBUM = 'GET_ONE_ALBUM';\nexport const ADD_TRACK_TO_ALBUM = 'ADD_TRACK_TO_ALBUM';\nexport const GET_TRACKLIST_OF_ALBUM = 'GET_TRACKLIST_OF_ALBUM';\nexport const CLEAR_CURRENT_ALBUM = 'CLEAR_CURRENT_ALBUM';\nexport const SET_LOADING = 'SET_LOADING';\nexport const CHANGE_ARTIST_OF_ALBUM = 'CHANGE_ARTIST_OF_ALBUM';\nexport const MERGE_ALBUMS = 'MERGE_ALBUMS';\n\nexport interface Album {\n  album_name: string;\n  album_id: number;\n  label: string | null;\n  cat_id: string | null;\n  spotify_id: string | null;\n  year: string | null;\n  artist_name: string;\n  artist_id: number;\n}\n\nexport interface TracklistItem {\n  track_id: number;\n  isrc: string | null;\n  disc_no: number | null;\n  track_no: number | null;\n  track_title: string;\n  artist_name: string;\n  report_occurrence: number;\n}\n\nexport interface AlbumState {\n  currentAlbum: Album | null;\n  tracklist: Array<TracklistItem>;\n  loading: boolean;\n}\n\nexport interface MergeAlbumsParams {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface UpdateAlbumParams {\n  id: number;\n  name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | null;\n  spotify_id: string | null;\n}\n\nexport interface ChangeArtistParams {\n  album_id: number;\n  artist_id: number;\n  artist_name: string;\n}\n\n// album action types\ninterface GetOneAlbumAction {\n  type: typeof GET_ONE_ALBUM;\n  data: Album;\n}\n\ninterface GetTracklistAction {\n  type: typeof GET_TRACKLIST_OF_ALBUM;\n  data: Array<TracklistItem>;\n}\n\ninterface AddTrackToAlbumAction {\n  type: typeof ADD_TRACK_TO_ALBUM;\n  data: TracklistItem;\n}\n\ninterface ClearCurrentAlbumAction {\n  type: typeof CLEAR_CURRENT_ALBUM;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface ChangeArtistOfAlbumAction {\n  type: typeof CHANGE_ARTIST_OF_ALBUM;\n  data: ChangeArtistParams;\n}\n\nexport type AlbumActionTypes =\n  | GetOneAlbumAction\n  | GetTracklistAction\n  | AddTrackToAlbumAction\n  | ClearCurrentAlbumAction\n  | SetLoadingAction\n  | ChangeArtistOfAlbumAction;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_ARTIST,\n  GET_ALBUM_LIST_BY_ARTIST,\n  CLEAR_CURRENT_ARTIST,\n  SET_LOADING,\n  ArtistState,\n  ArtistActionTypes,\n} from './types';\n\nconst initialState: ArtistState = {\n  currentArtist: null,\n  albumList: [],\n  loading: false,\n};\n\nconst artistReducer: Reducer<ArtistState, Action> = (\n  state = initialState,\n  action: ArtistActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_ARTIST:\n      return {\n        ...state,\n        currentArtist: action.data,\n        loading: false,\n      };\n    case GET_ALBUM_LIST_BY_ARTIST:\n      return {\n        ...state,\n        albumList: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_ARTIST:\n      return {\n        ...state,\n        currentArtist: null,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default artistReducer;\n","export const GET_ONE_ARTIST = 'GET_ONE_ARTIST';\nexport const GET_ALBUM_LIST_BY_ARTIST = 'GET_ALBUM_LIST_BY_ARTIST';\nexport const CLEAR_CURRENT_ARTIST = 'CLEAR_CURRENT_ARTIST';\nexport const MERGE_ARTISTS = 'MERGE_ARTISTS';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Artist {\n  id: number;\n  name: string;\n  spotify_id: string | null;\n  old_id: number | null;\n  user_id: number | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AlbumListItem {\n  album_id: number;\n  artist_id: number;\n  name: string;\n  identifier: string | null;\n  artist_name: string;\n  artist_spotify_id: string | null;\n  track_count: number;\n  report_occurrence: number;\n}\n\nexport interface UpdateArtistParams {\n  id: number;\n  name: string;\n  spotify_id: string | null;\n}\n\nexport interface MergeArtistsParams {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface ArtistState {\n  currentArtist: Artist | null;\n  albumList: Array<AlbumListItem>;\n  loading: boolean;\n}\n\n// artist action types\ninterface GetOneArtistAction {\n  type: typeof GET_ONE_ARTIST;\n  data: Artist;\n}\n\ninterface GetAlbumListByArtistAction {\n  type: typeof GET_ALBUM_LIST_BY_ARTIST;\n  data: Array<AlbumListItem>;\n}\n\ninterface ClearCurrentArtistAction {\n  type: typeof CLEAR_CURRENT_ARTIST;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ArtistActionTypes =\n  | GetOneArtistAction\n  | GetAlbumListByArtistAction\n  | ClearCurrentArtistAction\n  | SetLoadingAction;\n","import { Action, Reducer } from 'redux';\nimport {\n  LoginActionTypes,\n  LoginState,\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  SET_LOADING,\n} from './types';\n\nconst initialState: LoginState = {\n  loading: false,\n  currentUser: null,\n};\n\nconst loginReducer: Reducer<LoginState, Action> = (\n  state = initialState,\n  action: LoginActionTypes\n) => {\n  switch (action.type) {\n    case INIT_USER:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGIN:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGOUT:\n      return initialState;\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;\n","import { Action, Reducer } from 'redux';\nimport { NotificationState, NotificationActionTypes } from './types';\n\nconst initialState: NotificationState = {\n  message: null,\n  type: null,\n};\n\nconst notificationReducer: Reducer<NotificationState, Action> = (\n  state = initialState,\n  action: NotificationActionTypes\n) => {\n  switch (action.type) {\n    case 'SET_NOTIFICATION':\n      return action.data;\n\n    case 'CLEAR_NOTIFICATION':\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport default notificationReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_PROGRAM,\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  CREATE_NEW_PROGRAM,\n  CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n  UPDATE_PROGRAM,\n  ProgramState,\n  ProgramActionTypes,\n} from './types';\n\nconst initialState: ProgramState = {\n  allPrograms: [],\n  activePrograms: [],\n  program: null,\n  loading: false,\n};\n\nconst programReducer: Reducer<ProgramState, Action> = (\n  state = initialState,\n  action: ProgramActionTypes\n) => {\n  switch (action.type) {\n    case GET_ALL_PROGRAMS:\n      return {\n        ...state,\n        allPrograms: action.data,\n        loading: false,\n      };\n    case GET_ALL_ACTIVE_PROGRAMS:\n      return {\n        ...state,\n        activePrograms: action.data,\n        loading: false,\n      };\n    case GET_ONE_PROGRAM:\n      return {\n        ...state,\n        program: action.data,\n        loading: false,\n      };\n    case CREATE_NEW_PROGRAM:\n      return {\n        ...state,\n        allPrograms: [...state.allPrograms, action.data],\n        loading: false,\n      };\n    case CREATE_NEW_PROGRAM_ON_NEW_REPORT:\n      return {\n        ...state,\n        activePrograms: [...state.activePrograms, action.data],\n        loading: false,\n      };\n    case UPDATE_PROGRAM:\n      return {\n        ...state,\n        allPrograms: state.allPrograms.map((program) =>\n          program.id === action.data.id ? action.data : program\n        ),\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\nexport default programReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_REPORT,\n  GET_PLAYLOG_TRACKS,\n  GET_REPORT_DETAILS,\n  ADD_NEW_TRACK,\n  UPDATE_TRACK,\n  SET_EDIT_TRACK_ID,\n  GET_ONE_TRACK,\n  REMOVE_CURRENT_TRACK,\n  DELETE_TRACK_FROM_REPORT,\n  CHECK_FOR_DELETE,\n  UNCHECK_FOR_DELETE,\n  CLEAR_CHECKED_FOR_DELETE,\n  CREATE_REPORT,\n  UPDATE_REPORT,\n  CLEAR_CURRENT_REPORT,\n  SET_LOADING,\n  ADD_TRACK_TO_REPORT,\n  ReportState,\n  ReportActionTypes,\n} from './types';\n\nconst initialState: ReportState = {\n  report: [],\n  playlog: [],\n  editTrackId: null,\n  reportDetails: null,\n  newReport: null,\n  loading: false,\n  checkedForDelete: [],\n  currentTrack: null,\n};\n\nconst reportReducer: Reducer<ReportState, Action> = (\n  state = initialState,\n  action: ReportActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_REPORT:\n      return {\n        ...state,\n        report: action.data,\n        loading: false,\n      };\n    case GET_PLAYLOG_TRACKS:\n      return {\n        ...state,\n        report: [...state.report, ...action.report],\n        playlog: action.playlog,\n        loading: false,\n      };\n    case GET_REPORT_DETAILS:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null,\n        loading: false,\n      };\n    case ADD_NEW_TRACK:\n      return {\n        ...state,\n        report: [...state.report, action.data],\n        loading: false,\n      };\n    case ADD_TRACK_TO_REPORT:\n      return {\n        ...state,\n        report: [...state.report, action.data],\n      };\n    case UPDATE_TRACK:\n      return {\n        ...state,\n        report: state.report.map((track) =>\n          track.track_id === action.data.track_id ? action.data : track\n        ),\n        loading: false,\n      };\n    case SET_EDIT_TRACK_ID:\n      return {\n        ...state,\n        editTrackId: action.data,\n      };\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case REMOVE_CURRENT_TRACK:\n      return {\n        ...state,\n        currentTrack: null,\n      };\n    case CLEAR_CURRENT_REPORT:\n      return {\n        ...state,\n        report: [],\n      };\n    case CREATE_REPORT:\n      return {\n        ...state,\n        newReport: action.data,\n        reportDetails: action.data,\n        loading: false,\n      };\n    case UPDATE_REPORT:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null,\n        loading: false,\n      };\n    case DELETE_TRACK_FROM_REPORT:\n      return {\n        ...state,\n        report: state.report.filter(\n          (track) => track.report_track_id !== action.data\n        ),\n      };\n    case CHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: [action.data, ...state.checkedForDelete],\n      };\n    case UNCHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: state.checkedForDelete.filter(\n          (id) => id !== action.data\n        ),\n      };\n    case CLEAR_CHECKED_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: [],\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reportReducer;\n","import { Track } from '../track/types';\nexport const GET_ONE_REPORT = 'GET_ONE_REPORT';\nexport const GET_REPORT_DETAILS = 'GET_REPORT_DETAILS';\nexport const GET_PLAYLOG_TRACKS = 'GET_PLAYLOG_TRACKS';\nexport const ADD_NEW_TRACK = 'ADD_NEW_TRACK';\nexport const UPDATE_TRACK = 'UPDATE_TRACK';\nexport const SET_EDIT_TRACK_ID = 'SET_EDIT_TRACK_ID';\nexport const GET_ONE_TRACK = 'GET_ONE_TRACK';\nexport const REMOVE_CURRENT_TRACK = 'REMOVE_CURRENT_TRACK';\nexport const DELETE_TRACK_FROM_REPORT = 'DELETE_TRACK_FROM_REPORT';\nexport const CHECK_FOR_DELETE = 'CHECK_FOR_DELETE';\nexport const UNCHECK_FOR_DELETE = 'UNCHECK_FOR_DELETE';\nexport const CLEAR_CHECKED_FOR_DELETE = 'CLEAR_CHECKED_FOR_DELETE';\nexport const CREATE_REPORT = 'CREATE_REPORT';\nexport const UPDATE_REPORT = 'UPDATE_REPORT';\nexport const CLEAR_CURRENT_REPORT = 'CLEAR_CURRENT_REPORT';\nexport const SET_LOADING = 'SET_LOADING';\nexport const ADD_TRACK_TO_REPORT = 'ADD_TRACK_TO_REPORT';\nexport const CREATE_NEW_PROGRAM_ON_NEW_REPORT =\n  'CREATE_NEW_PROGRAM_ON_NEW_REPORT';\n// REPORT_ERROR\n\nexport interface ReportItem {\n  sortable_rank: number;\n  artist_name: string;\n  track_title: string;\n  length: number;\n  track_id: number;\n  artist_id: number;\n  album_id: number;\n  album_name: string;\n  disc_no: number | null;\n  track_no: number | null;\n  cat_id: string | null;\n  country: number;\n  isrc: string | null;\n  label: string | null;\n  people: string | null;\n  record_country: string | null;\n  year: string | null;\n  report_track_id: number;\n}\n\nexport interface PlaylogItem {\n  track_id: number;\n  artist_id: number;\n  album_id: number;\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | null;\n  disc_no: string | null;\n  track_no: string | null;\n  length: number;\n  country: number;\n  record_country: string | null;\n  sortable_rank: number;\n  people: string | null;\n  isrc: string | null;\n  report_id: number;\n  report_track_id: number;\n  user_id: number;\n  spotify_id: string | null;\n}\n\nexport interface ReportDetails {\n  program_name: string;\n  program_no: number | null;\n  program_dj: string;\n  program_date: string;\n  program_start_time: string;\n  program_end_time: string;\n  id: number;\n  program_id: number;\n  rerun: number | null;\n  status: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport interface ReportState {\n  report: Array<ReportItem>;\n  playlog: Array<PlaylogItem>;\n  editTrackId: number | null;\n  reportDetails: ReportDetails | null;\n  newReport: ReportDetails | null;\n  loading: boolean;\n  checkedForDelete: Array<number>;\n  currentTrack: Track | null;\n}\n\n// report action types\ninterface GetReportDetailsAction {\n  type: typeof GET_REPORT_DETAILS;\n  data: ReportDetails;\n}\n\ninterface CreateReportAction {\n  type: typeof CREATE_REPORT;\n  data: ReportDetails;\n}\n\ninterface UpdateReportAction {\n  type: typeof UPDATE_REPORT;\n  data: ReportDetails;\n}\n\ninterface GetOneReportAction {\n  type: typeof GET_ONE_REPORT;\n  data: ReportItem[];\n}\n\ninterface PlaylogAction {\n  type: typeof GET_PLAYLOG_TRACKS;\n  playlog: Array<PlaylogItem>;\n  report: Array<ReportItem>;\n}\n\ninterface AddTrackToReportAction {\n  type: typeof ADD_TRACK_TO_REPORT;\n  data: ReportItem;\n}\n\ninterface AddNewTrackToReportAction {\n  type: typeof ADD_NEW_TRACK;\n  data: ReportItem;\n}\n\ninterface UpdateTrackAction {\n  type: typeof UPDATE_TRACK;\n  data: ReportItem;\n}\n\ninterface SetEditTrackIdAction {\n  type: typeof SET_EDIT_TRACK_ID;\n  data: number;\n}\n\ninterface GetOneTrackAction {\n  type: typeof GET_ONE_TRACK;\n  data: Track;\n}\n\ninterface RemoveCurrentTrackAction {\n  type: typeof REMOVE_CURRENT_TRACK;\n}\n\ninterface DeleteTrackFromReportAction {\n  type: typeof DELETE_TRACK_FROM_REPORT;\n  data: number;\n}\n\ninterface CheckForDeleteAction {\n  type: typeof CHECK_FOR_DELETE;\n  data: number;\n}\n\ninterface UncheckForDeleteAction {\n  type: typeof UNCHECK_FOR_DELETE;\n  data: number;\n}\n\ninterface ClearCheckedForDeleteAction {\n  type: typeof CLEAR_CHECKED_FOR_DELETE;\n}\n\ninterface ClearCurrentReportAction {\n  type: typeof CLEAR_CURRENT_REPORT;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ReportActionTypes =\n  | GetOneReportAction\n  | UpdateReportAction\n  | PlaylogAction\n  | GetReportDetailsAction\n  | CreateReportAction\n  | AddTrackToReportAction\n  | AddNewTrackToReportAction\n  | UpdateTrackAction\n  | SetEditTrackIdAction\n  | GetOneTrackAction\n  | RemoveCurrentTrackAction\n  | DeleteTrackFromReportAction\n  | ClearCurrentReportAction\n  | CheckForDeleteAction\n  | UncheckForDeleteAction\n  | ClearCheckedForDeleteAction\n  | SetLoadingAction;\n\nexport interface AddTrackToReportParams {\n  track_id: number;\n  report_id: number;\n  length: number;\n  sortable_rank: number;\n}\n\nexport interface DeleteTrackFromReportParams {\n  report_track_id: number;\n  report_id: number;\n  remainingTracks: Array<ReportItem>;\n}\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT,\n  DELETE_REPORT,\n  SET_LOADING,\n  ReportListState,\n  ReportListActionTypes,\n} from './types';\n\nconst initialState: ReportListState = {\n  reportList: [],\n  inProgress: [],\n  reportListDate: null,\n  reportTransferList: [],\n  lastTransfer: null,\n  loading: false,\n  filterStatusValue: null,\n  filterUserValue: null,\n  filterByText: '',\n  error: null,\n};\n\nconst reportListReducer: Reducer<ReportListState, Action> = (\n  state = initialState,\n  action: ReportListActionTypes\n) => {\n  switch (action.type) {\n    case GET_ALL_REPORTS_BY_DATE:\n      return {\n        ...state,\n        reportList: action.data,\n        reportListDate: action.date,\n        loading: false,\n      };\n    case GET_ALL_IN_PROGRESS:\n      return {\n        ...state,\n        inProgress: action.data,\n        loading: false,\n      };\n    case GET_ALL_REPORT_TRANSFERS:\n      return {\n        ...state,\n        reportTransferList: action.data,\n        loading: false,\n      };\n    case GENERATE_REPORT_TRANSFER:\n      return {\n        ...state,\n        lastTransfer: action.data,\n        loading: false,\n      };\n    case DELETE_REPORT:\n      return {\n        ...state,\n        reportList: state.reportList.filter(\n          (report) => report.id !== action.data\n        ),\n        loading: false,\n      };\n    case FILTER_BY_USER_ID:\n      return {\n        ...state,\n        filterUserValue: action.data,\n      };\n    case FILTER_BY_STATUS:\n      return {\n        ...state,\n        filterStatusValue: action.data,\n      };\n    case FILTER_BY_TEXT:\n      return {\n        ...state,\n        filterByText: action.data,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reportListReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  // AUTOCOMPLETE_RESULTS,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_DISCOGS_DATA,\n  CLEAR_DISCOGS_DATA,\n  TOP_100,\n  SET_SEARCH_LOADING,\n  // GET_CHANGE_ALBUM_OPTIONS,\n  // GET_CHANGE_ARTIST_OPTIONS,\n  // RESET_CHANGE_ALBUM_OPTIONS,\n  // RESET_CHANGE_ARTIST_OPTIONS,\n  // MERGE_ALBUMS,\n  MERGE_ARTISTS,\n  MERGE_TRACKS,\n  SearchState,\n  SearchActionTypes,\n} from './types';\n\nconst initialState: SearchState = {\n  // searchResults: [],\n  top100: [],\n  top100Query: null,\n  advancedResults: [],\n  sortAdvancedResults: null,\n  // changeArtistOptions: [],\n  // changeAlbumOptions: [],\n  loading: false,\n  discogsData: null,\n};\n\nconst searchReducer: Reducer<SearchState, Action> = (\n  state = initialState,\n  action: SearchActionTypes\n) => {\n  switch (action.type) {\n    case ADVANCED_RESULTS:\n      return {\n        ...state,\n        advancedResults: action.data,\n        loading: false,\n      };\n    case SORT_ADVANCED_RESULTS:\n      return {\n        ...state,\n        sortAdvancedResults: action.data,\n      };\n    case TOP_100:\n      return {\n        ...state,\n        top100: action.data,\n        top100Query: action.query,\n        loading: false,\n      };\n    case GET_DISCOGS_DATA:\n      return {\n        ...state,\n        discogsData: action.data,\n      };\n    case CLEAR_DISCOGS_DATA:\n      return {\n        ...state,\n        discogsData: null,\n      };\n    case SET_SEARCH_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case MERGE_TRACKS:\n      return {\n        ...state,\n        advancedResults: state.advancedResults.filter(\n          (result) => result.track_id !== action.data.merge\n        ),\n      };\n    case MERGE_ARTISTS: {\n      const artistToMerge = action.data.merge;\n      const mergeArtistTo = action.data.mergeTo;\n      const newArtistName = action.data.newName;\n      // get the artists that need name and id changing\n      const filteredArtists = state.advancedResults.filter(\n        (r) => r.artist_id === artistToMerge\n      );\n      // update the names and ids of those artists\n      const renamedArtists = filteredArtists.map((result) => ({\n        ...result,\n        artist_id: mergeArtistTo,\n        artist_name: newArtistName,\n      }));\n      // remove albums with old ids from advancedResults\n      const removeMergedArtists = state.advancedResults.filter(\n        (r) => r.artist_id !== artistToMerge\n      );\n      //\n      const newArtistResults = [...renamedArtists, ...removeMergedArtists];\n      return {\n        ...state,\n        advancedResults: newArtistResults,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_TRACK,\n  GET_ONE_TRACK_HISTORY,\n  CLEAR_CURRENT_TRACK,\n  SET_LOADING,\n  CHANGE_ALBUM,\n  CHANGE_ARTIST,\n  TrackState,\n  TrackActionTypes,\n} from './types';\n\nconst initialState: TrackState = {\n  currentTrack: null,\n  playHistory: [],\n  loading: false,\n};\n\nconst trackReducer: Reducer<TrackState, Action> = (\n  state = initialState,\n  action: TrackActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case GET_ONE_TRACK_HISTORY:\n      return {\n        ...state,\n        playhistory: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_TRACK:\n      return {\n        ...state,\n        playhistory: null,\n        currentTrack: null,\n      };\n    // case CHANGE_ALBUM:\n    //   return {\n    //     ...state,\n    //     currentTrack: {\n    //       ...state.currentTrack,\n    //       album_id: action.data.album_id,\n    //       album: action.data.album_name,\n    //     },\n    //     loading: false,\n    //   };\n    // case CHANGE_ARTIST:\n    //   return {\n    //     ...state,\n    //     currentTrack: {\n    //       ...state.currentTrack,\n    //       artist_id: action.data.artist_id,\n    //       artist: action.data.artist,\n    //     },\n    //     loading: false,\n    //   };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\nexport default trackReducer;\n","export const GET_ONE_TRACK = 'GET_ONE_TRACK';\nexport const GET_ONE_TRACK_HISTORY = 'GET_ONE_TRACK_HISTORY';\nexport const CLEAR_CURRENT_TRACK = 'CLEAR_CURRENT_TRACK';\nexport const SET_LOADING = 'SET_LOADING';\nexport const CHANGE_ALBUM = 'CHANGE_ALBUM';\nexport const CHANGE_ARTIST = 'CHANGE_ARTIST';\nexport const ADD_NEW_TRACK = 'ADD_NEW_TRACK';\nexport const ADD_TRACK_TO_ALBUM = 'ADD_TRACK_TO_ALBUM';\nexport const UPDATE_TRACK = 'UPDATE_TRACK';\nexport const REMOVE_CURRENT_TRACK = 'REMOVE_CURRENT_TRACK';\nexport const MERGE_TRACKS = 'MERGE_TRACKS';\nexport const ADD_TRACK_TO_REPORT = 'ADD_TRACK_TO_REPORT';\n\nexport interface Track {\n  track_title: string;\n  artist: string;\n  album: string;\n  track_id: number;\n  album_id: number;\n  artist_id: number;\n  label: string | null;\n  cat_id: string | null;\n  lengtt: number;\n  disc_no: number | null;\n  track_no: number | null;\n  people: string | null;\n  isrc: string | null;\n  year: string | null;\n  comment: string | null;\n  record_country: string | null;\n  country: number;\n}\n\nexport interface AddTrackToDbType {\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string;\n  cat_id: string;\n  year: string;\n  disc_no: number;\n  track_no: number;\n  length: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n  user_id: number;\n}\n\nexport interface AddTrackToDbAndReportType {\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string;\n  cat_id: string;\n  year: string;\n  disc_no: number;\n  track_no: number;\n  length: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n  report_id: number;\n  user_id: number;\n  sortable_rank: number;\n}\n\nexport interface ChangeAlbumParams {\n  track_id: number;\n  album_id: number;\n  album_name: string;\n}\n\nexport interface ChangeArtistParams {\n  track_id: number;\n  artist_id: number;\n  artist_name: string;\n}\n\nexport interface PlayHistoryEntry {\n  program_name: string;\n  program_id: number;\n  report_id: number;\n  program_date: string;\n  track_id: number;\n}\n\nexport interface ChangeArtist {\n  artist_id: number;\n  artist: string;\n}\n\nexport interface ChangeAlbum {\n  album_id: number;\n  album_name: string;\n}\n\nexport interface MergeTrackParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n  newName: string;\n}\n\nexport interface TrackState {\n  currentTrack: Track | null;\n  playHistory: Array<PlayHistoryEntry>;\n  loading: boolean;\n}\n\n// track action types\ninterface GetOneTrackAction {\n  type: typeof GET_ONE_TRACK;\n  data: Track;\n}\n\ninterface GetOneTrackHistoryAction {\n  type: typeof GET_ONE_TRACK_HISTORY;\n  data: Array<PlayHistoryEntry>;\n}\n\ninterface ClearCurrentTrackAction {\n  type: typeof CLEAR_CURRENT_TRACK;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface ChangeAlbumAction {\n  type: typeof CHANGE_ALBUM;\n  data: ChangeAlbum;\n}\n\ninterface ChangeArtistAction {\n  type: typeof CHANGE_ARTIST;\n  data: ChangeArtist;\n}\n\nexport type TrackActionTypes =\n  | GetOneTrackAction\n  | GetOneTrackHistoryAction\n  | ClearCurrentTrackAction\n  | SetLoadingAction\n  | ChangeAlbumAction\n  | ChangeArtistAction;\n","import { Action, Reducer } from 'redux';\nimport {\n  INIT_USER_LIST,\n  SET_LOADING,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER,\n  UserState,\n  UserActionTypes,\n} from './types';\n\nconst initialState: UserState = {\n  users: [],\n  loading: false,\n};\n\nconst userReducer: Reducer<UserState, Action> = (\n  state = initialState,\n  action: UserActionTypes\n) => {\n  switch (action.type) {\n    case INIT_USER_LIST:\n      return {\n        ...state,\n        users: action.data,\n        loading: false,\n      };\n    case CREATE_USER:\n      return {\n        ...state,\n        users: [...state.users, action.data],\n        loading: false,\n      };\n    case UPDATE_USER:\n      return {\n        ...state,\n        users: action.data,\n        loading: false,\n      };\n    case DELETE_USER:\n      return {\n        ...state,\n        users: state.users.filter((user) => user.id !== action.data),\n        loading: false,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport albumReducer from './album/reducer';\nimport artistReducer from './artist/reducer';\nimport loginReducer from './login/reducer';\nimport notificationReducer from './notification/reducer';\nimport programReducer from './program/reducer';\nimport reportReducer from './report/reducer';\nimport reportListReducer from './reportList/reducer';\nimport searchReducer from './search/reducer';\nimport trackReducer from './track/reducer';\nimport userReducer from './user/reducer';\n\nconst reducer = combineReducers({\n  album: albumReducer,\n  artist: artistReducer,\n  login: loginReducer,\n  notification: notificationReducer,\n  program: programReducer,\n  report: reportReducer,\n  reportList: reportListReducer,\n  search: searchReducer,\n  track: trackReducer,\n  user: userReducer,\n});\n\nexport default createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}