{"version":3,"sources":["store/login/services.tsx","components/login/LoginForm.tsx","store/login/actions.tsx","types.ts","App.tsx","reducers/userReducer.tsx","store/login/reducer.tsx","store/login/types.tsx","store/index.tsx","index.tsx"],"names":["login","credentials","a","axios","post","res","data","LoginForm","dispatch","useDispatch","useState","username","setUsername","password","setPassword","Form","onSubmit","event","preventDefault","user","type","loginService","newUser","console","log","window","localStorage","setItem","JSON","stringify","loading","newLogin","Field","label","control","Input","placeholder","onChange","e","target","value","trim","Button","color","App","useSelector","state","useEffect","loggedUserJSON","getItem","parse","err","get","currentUser","Container","className","onClick","removeItem","initialState","current","userReducer","action","loginReducer","reducer","combineReducers","users","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.5bb5eeb7.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/login';\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nconst login = async (credentials: LoginCredentials) => {\n  const res = await axios.post(baseUrl, credentials);\n  return res.data;\n};\n\nexport default { login };\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Form, Button, Input } from 'semantic-ui-react';\nimport { newLogin } from '../../store/login/actions';\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n    const user = {\n      username,\n      password,\n    };\n    dispatch(newLogin(user));\n  };\n\n  return (\n    <div>\n      <h1>RADIO TRACKLIST REPORTING</h1>\n      <h3>Log in</h3>\n      <Form onSubmit={handleLogin}>\n        <Form.Field\n          label='username'\n          control={Input}\n          type='text'\n          placeholder='Username...'\n          onChange={(e: { target: { value: string } }) =>\n            setUsername(e.target.value.trim())\n          }\n        />\n        <Form.Field\n          label='password'\n          control={Input}\n          type='password'\n          placeholder='Password...'\n          onChange={(e: { target: { value: string } }) =>\n            setPassword(e.target.value.trim())\n          }\n        />\n        <Button color='green' type='submit'>\n          Kirjaudu\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import loginService from './services';\nimport { SET_LOADING } from '../../types';\nimport { Dispatch } from 'redux';\n\ninterface NewLogin {\n  username: string;\n  password: string;\n}\n\nexport const initializeUser = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      // set token for logged in user\n      // userService.setToken(user.token);\n      // reportService.setToken(user.token);\n      // programService.setToken(user.token);\n      // searchService.setToken(user.token);\n      // trackService.setToken(user.token);\n      // artistService.setToken(user.token);\n      // albumService.setToken(user.token);\n      dispatch({\n        type: 'INIT_USER',\n        data: user,\n      });\n    }\n  } catch (err) {\n    // dispatch({\n    //   type: LOGIN_ERROR,\n    //   payload: err.response.statusText,\n    // });\n    console.log(err);\n  }\n};\n\nexport const newLogin = (user: NewLogin) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const newUser = await loginService.login(user);\n    console.log(newUser);\n    window.localStorage.setItem('loggedUser', JSON.stringify(newUser));\n\n    dispatch({\n      type: 'LOGIN',\n      data: newUser,\n      loading: false,\n    });\n  } catch (error) {\n    console.log(error);\n    // const content = {\n    //   message: 'wrong username or password',\n    //   type: 'fail'\n    // };\n    // dispatch({\n    //   type: 'SET_NOTIFICATION',\n    //   data: content\n    // });\n    // setTimeout(() => {\n    //   dispatch({\n    //     type: 'CLEAR_NOTIFICATION'\n    //   });\n    // }, 3000);\n  }\n};\n\nexport const logout = () => async (dispatch: Dispatch) => {\n  window.localStorage.removeItem('loggedUser');\n  dispatch({\n    type: 'LOGOUT',\n  });\n};\n","export const SET_LOADING = 'SET_LOADING';\n\nexport interface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport interface ReportTracks {\n  length: number;\n}\n\ntype CurrentUser = {\n  username: string;\n  id: number;\n  iat: number;\n};\n\nexport interface UserState {\n  loading: boolean;\n  current?: CurrentUser | null;\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport axios from 'axios';\nimport { Container, Button } from 'semantic-ui-react';\nimport LoginForm from './components/login/LoginForm';\nimport { initializeUser, logout } from './store/login/actions';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const login = useSelector((state: any) => state.login);\n\n  useEffect(() => {\n    dispatch(initializeUser());\n    axios.get<void>('/ping');\n  }, []);\n\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n\n  if (login.currentUser === null) {\n    return (\n      <Container>\n        <LoginForm />\n      </Container>\n    );\n  }\n  return (\n    <div className='App'>\n      <h1>you logged in as {login.currentUser.username}</h1>\n      <Button onClick={handleLogoutClick}>logout</Button>\n    </div>\n  );\n};\n\nexport default App;\n","import { UserState, SetLoadingAction } from '../types';\n\nconst initialState: UserState = {\n  loading: false,\n  current: null,\n};\n\nconst userReducer = (state = initialState, action: SetLoadingAction) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  LoginActionTypes,\n  LoginState,\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  SET_LOADING,\n} from './types';\n\nconst initialState: LoginState = {\n  loading: false,\n  currentUser: null,\n};\n\nconst loginReducer: Reducer<LoginState, Action> = (\n  state = initialState,\n  action: LoginActionTypes\n) => {\n  switch (action.type) {\n    case INIT_USER:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGIN:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGOUT:\n      return initialState;\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;\n","export const INIT_USER = 'INIT_USER';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const SET_LOADING = 'SET_LOADING';\n\ninterface CurrentUser {\n  token: string;\n  username: string;\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  level: number;\n  status: number;\n}\n\nexport interface LoginState {\n  loading: boolean;\n  currentUser: CurrentUser | null;\n}\n\ninterface NewLoginAction {\n  type: typeof LOGIN;\n  data: CurrentUser;\n}\n\ninterface InitUserAction {\n  type: typeof INIT_USER;\n  data: CurrentUser;\n}\n\ninterface LogoutAction {\n  type: typeof LOGOUT;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type LoginActionTypes =\n  | SetLoadingAction\n  | NewLoginAction\n  | InitUserAction\n  | LogoutAction;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport userReducer from '../reducers/userReducer';\nimport loginReducer from './login/reducer';\nimport { LoginState } from './login/types';\n\nexport interface ApplicationState {\n  login: LoginState;\n}\n\nconst reducer = combineReducers({\n  login: loginReducer,\n  users: userReducer,\n});\n\nexport default createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}