{"version":3,"sources":["img/logo.png","constants.tsx","store/album/services.tsx","store/search/services.tsx","store/notification/actions.tsx","components/layout/forms/FormFields.tsx","components/album/AlbumDetailsForm.tsx","store/report/services.tsx","store/report/actions.tsx","store/report/types.tsx","components/track/AddTrackToCurrentReport.tsx","components/album/TracksInAnAlbumItem.tsx","components/album/TracksInAnAlbum.tsx","store/track/services.tsx","store/track/actions.tsx","store/track/types.tsx","store/user/types.tsx","components/album/AddTrackToAlbum/AddTrackToAlbumForm.tsx","components/album/AddTrackToAlbum/index.tsx","components/album/index.tsx","store/album/actions.tsx","store/album/types.tsx","store/artist/services.tsx","components/artist/AlbumsByArtistItem.tsx","components/artist/AlbumsByArtist.tsx","components/artist/ArtistDetailsForm.tsx","components/artist/index.tsx","store/artist/actions.tsx","store/artist/types.tsx","components/layout/footer/index.tsx","components/report/CreateNewReport/CreateNewReportForm.tsx","components/report/CreateNewReport/index.tsx","store/reportList/services.tsx","store/reportList/actions.tsx","store/reportList/types.tsx","components/reportList/InProgressReportListItem.tsx","components/reportList/InProgressReportList.tsx","components/layout/home/index.tsx","store/login/services.tsx","store/program/services.tsx","store/user/services.tsx","store/login/actions.tsx","store/login/types.tsx","components/login/LoginForm.tsx","components/users/CurrentUserModal/CurrentUserForm.tsx","store/user/actions.tsx","components/users/CurrentUserModal/CurrentUserModal.tsx","components/layout/navbar/CurrentReport.tsx","components/layout/navbar/AdminNavbar.tsx","components/layout/navbar/StaffNavbar.tsx","components/layout/navbar/BasicNavbar.tsx","components/layout/navbar/index.tsx","components/layout/notification/Notification.tsx","store/program/actions.tsx","store/program/types.tsx","components/programs/EditProgramModal/EditProgramForm.tsx","components/programs/EditProgramModal/index.tsx","components/programs/MergePrograms/MergeProgramForm.tsx","components/programs/MergePrograms/index.tsx","components/programs/ProgramListItem.tsx","components/programs/ProgramList.tsx","components/programs/AddProgramModal/AddProgramForm.tsx","components/programs/AddProgramModal/index.tsx","components/programs/index.tsx","components/reportList/ReportPeriodSelectionForm.tsx","components/reportList/ReportListItem.tsx","components/reportList/FilterReportList/index.tsx","components/reportList/ReportList.tsx","components/report/ReportWithTracks/EditTrackModal/EditTrackModalForm.tsx","components/report/ReportWithTracks/EditTrackModal/index.tsx","components/report/ReportWithTracks/ReportTrackListItem.tsx","components/report/ReportWithTracks/ReportTrackList.tsx","components/report/AutocompleteSearch/AddAndReportNewTrack/AddAndReportNewTrackForm.tsx","components/report/AutocompleteSearch/AddAndReportNewTrack/index.tsx","components/report/AutocompleteSearch/index.tsx","hooks/searchTracksHook.tsx","components/report/GetPlaylogTracks/GetPlaylogForm.tsx","components/report/GetPlaylogTracks/index.tsx","components/report/AddTracksToReport/index.tsx","components/report/ReportDetails/ReportDetailsForm.tsx","components/report/ReportDetails/index.tsx","components/report/index.tsx","components/reportTransfer/ReportTransferListItem.tsx","components/reportTransfer/ReportTransferList.tsx","components/reportTransfer/ReportTransferGenerator.tsx","components/reportTransfer/index.tsx","components/search/SearchForm.tsx","store/search/actions.tsx","store/search/types.tsx","components/search/SearchResultItem.tsx","components/search/SortResults.tsx","components/search/SearchResults.tsx","components/search/AddTrackModal/AddTrackForm.tsx","components/search/AddTrackModal/index.tsx","components/search/index.tsx","components/top100/Top100SearchForm.tsx","components/top100/Top100ArtistList.tsx","components/top100/Top100AlbumList.tsx","components/top100/Top100TrackList.tsx","components/top100/index.tsx","components/track/TrackDetailsForm.tsx","components/track/PlayHistoryItem.tsx","components/track/PlayHistory.tsx","components/track/index.tsx","components/users/EditUserModal/EditUserForm.tsx","components/users/EditUserModal/index.tsx","components/users/UserListItem.tsx","components/users/UserList.tsx","components/users/AddUserModal/AddUserForm.tsx","components/users/AddUserModal/index.tsx","components/users/index.tsx","App.tsx","store/album/reducer.tsx","store/artist/reducer.tsx","store/login/reducer.tsx","store/notification/reducer.tsx","store/program/reducer.tsx","store/report/reducer.tsx","store/reportList/reducer.tsx","store/search/reducer.tsx","store/track/reducer.tsx","store/user/reducer.tsx","store/index.tsx","index.tsx"],"names":["module","exports","token","getOneAlbum","id","a","config","headers","Authorization","axios","get","response","data","getTracklistOfAlbum","setToken","newToken","updateAlbum","albumToUpdate","put","changeArtistId","artistToUpdate","getTracksForAutocompleteSearch","query","request","getDiscogsData","artist","album","process","getTop100","list","start_date","end_date","advancedSearch","searchParams","kind","merge","mergeParams","changeArtistOptions","changeAlbumOptions","setNotification","message","type","content","dispatch","setTimeout","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","RequiredTextField","required","DisabledTextField","disabled","PasswordField","RequiredPasswordField","NumberField","min","max","TextAreaField","marginTop","component","AlbumDetailsForm","currentAlbum","onSubmit","Dimmer","Loader","Grid","columns","Column","Header","initialValues","album_id","artist_name","album_name","cat_id","year","Number","substring","spotify_id","validate","values","console","log","errors","isValid","Button","floated","getOne","addTrackToReport","trackToAdd","post","deleteTrackFromReport","delete","deleteReport","updateSortableRank","remainingTracks","forEach","track","index","trackToUpdate","sortable_rank","report_track_id","getReportDetails","createReport","newReport","updateReport","updatedReport","checkPlaylogTracks","date","tracks","arr","Object","entries","push","reverse","newArr","hours","charAt","parseInt","length","split","seconds","startTime","endTime","matrix","disc_no","side","track_no","tracknumber","isrc","record_country","recording_country","country","play_time","djonline_id","track_title","song","report_id","newerArr","sortable_rank_start","returnArr","getOneReport","reportService","report","borderRadius","display","opacity","padding","AddTrackToCurrentReport","track_id","useDispatch","useSelector","state","reportDetails","Fragment","Popup","trigger","Icon","cursor","onClick","trackToSave","program_name","inverted","basic","TracksInAnAlbumItem","Table","Row","Cell","to","report_occurrence","TracksInAnAlbum","tracklist","striped","Body","addNewTrack","addTrackToDb","addTrackToAlbum","updateTrack","updateAlbumId","updateArtistId","getOneTrack","getOneTrackHistory","trackService","recordCountryOptions","countryOptions","startTimeOptions","endTimeOptions","reportMonthOptions","reportStatusOptions","dateNow","Date","getFullYear","years","i","UserLevel","yearOptions","toString","reportYearOptions","AddTrackToAlbumForm","addToAlbumAndReport","onClose","minutes","people","comment","saveButton","dirty","width","program_date","AddTrackToAlbum","useState","modalOpen","setModalOpen","handleClose","Modal","marginBottom","closeIcon","open","Content","regexPeople","replace","artist_id","trackToReport","trackToReducer","addTrackToAlbumAndReport","Album","useEffect","albumService","Container","updatedAlbum","getOneArtist","getAlbumsByArtist","updateArtist","AlbumsByArtistItem","identifier","track_count","AlbumsByArtist","albumList","ArtistDetailsForm","currentArtist","Artist","artistService","updatedArtist","Footer","textAlign","href","target","rel","labelStyle","CreateNewReportForm","currentUser","programOptions","program_no","program_dj","first_name","last_name","moment","format","program_start_time","program_end_time","program_id","rerun","status","user_id","username","fontWeight","dateFormat","CreateNewReport","redirect","setRedirect","program","login","activePrograms","reportToCreate","find","pgm","getAllByDate","getAllByDateByUser","user","getAllInProgress","getAllTransfers","generateReportDownload","params","responseType","downloadReport","filename","download","getAllReportsByDate","reportListService","reports","getAllReportsByDateByUser","InProgressReportListItem","setOpen","Confirm","onCancel","onConfirm","deleteInProgressReport","cancelButton","confirmButton","InProgressReportList","inProgress","r","Home","reportList","active","divided","credentials","res","getAllActive","req","getAll","createProgram","newProgram","updateProgram","updatedProgram","mergePrograms","createUser","userToAdd","updateUser","userToUpdate","deleteUser","logout","window","localStorage","removeItem","LoginForm","setUsername","password","setPassword","event","preventDefault","loginService","newUser","setItem","JSON","stringify","loading","newLogin","control","Input","onChange","e","trim","CurrentUserForm","confirm_password","email","userService","users","CurrentUserModal","role","tabIndex","level","currentUserToUpdate","updatedCurrentUser","error","CurrentReport","float","marginRight","slice","AdminNavbar","size","text","icon","Menu","pointing","stackable","Item","link","Image","alt","src","logo","position","Dropdown","StaffNavbar","BasicNavbar","Navbar","Notification","notification","Message","floating","success","header","negative","getAllPrograms","programService","programs","displayOptions","siteOptions","EditProgramForm","site","EditUserModal","centered","Segment","MergeProgramForm","selectOptions","programToMerge","MergePrograms","handleOpen","mergeOptions","allPrograms","mergeTo","ProgramListItem","setError","closeModal","undefined","EditProgramModal","border","ProgramList","AddProgramForm","AddProgramModal","Programs","React","programToAdd","createNewProgram","ReportPeriodSelectionForm","reportYear","reportMonth","ReportListItem","reportStatusOutPrint","loginLevel","Responsive","minWidth","FilterReportList","userId","setUserId","filterText","setFilterText","filterByStatus","userOptions","addAllToUserOptions","ReportList","reportListDate","reportListTimeDate","reportsToShow","filterByText","filter","toLowerCase","includes","filterUserValue","filterStatusValue","EditTrackModalForm","initialPeople","Math","floor","EditTrackModal","ReportTrackListItem","checked","setChecked","Checkbox","checkForDelete","marginLeft","t","ReportTrackList","AddAndReportNewTrackForm","AddAndReportNewTrack","AutocompleteSearch","results","setTrackToSave","inputText","setInputText","debouncedSearchTrack","useConstant","AwesomeDebouncePromise","searchService","search","useAsync","useSearchTracksHook","handleResultSelect","_e","result","newTrackToReport","title","description","Group","onResultSelect","onSearchChange","onSelectionChange","GetPlaylogForm","studioOptions","studioId","GetPlaylogTracks","getPlaylogTracks","AddTracksToReport","horizontal","ReportDetailsForm","userField","duplicateReportClick","onRerunChange","ReportDetailsIndex","setRerun","reportToUpdate","reportDetailsToCopy","reportTracksToCopy","reportToDuplicate","ReportTrackIndex","dragState","setDragState","reportArray","timer1","clearTimeout","playlog","newOrder","updatedSortableRanks","item","deleteCheckedButton","checkedForDelete","idsToDelete","deleteChecked","array","dragProps","onDragEnd","fromIndex","toIndex","splice","nodeSelector","handleSelector","ReportDetails","RepotTransferListItem","created_at","period","ReportTransferList","reportTransferList","ReportTransferListItem","ReportTransferGenerator","pickerDate","setPickerDate","transferredReport","generateReportTransfer","ReportTransfer","lastTransfer","SearchForm","searchTargetOptions","SearchResultItem","SortResults","sortBy","setSortBy","sortAdvancedResults","sortOptions","SearchResults","advancedResults","resultsToShow","sort","b","AddTrackForm","AddTrackModal","Search","listOptions","Top100SearchForm","now","Top100ArtistList","top100","count","Top100","getTop100Results","top100Values","top100Query","Top100AlbumList","Top100TrackList","TrackDetailsForm","currentTrack","PlayHistoryItem","PlayHistory","playHistory","Track","history","levelOptions","DJ","Staff","Admin","statusOptions","EditUserForm","UserListItem","userLevelOutPrint","userStatusOutPrint","openDeleteUser","setDeleteUserOpen","last_seen","UserList","AddUserForm","requiredError","AddUserModal","Users","App","loggedUserJSON","getItem","parse","err","exact","path","render","match","initialState","albumReducer","action","artistReducer","loginReducer","notificationReducer","programReducer","editTrackId","reportReducer","reportListReducer","discogsData","searchReducer","artistToMerge","mergeArtistTo","newArtistName","newName","filteredArtists","renamedArtists","removeMergedArtists","newArtistResults","trackReducer","playhistory","userReducer","appReducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","store","document","getElementById"],"mappings":"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EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,aAKE+I,GAAiB,CAC5B,CACEhJ,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,aAwBEgJ,GAAqB,CAChC,CACEjJ,IAAK,KACLR,MAAO,UACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,WACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,QACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,QACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,MACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,OACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,OACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,SACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,YACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,UACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,WACPS,MAAO,MAET,CACED,IAAK,KACLR,MAAO,WACPS,MAAO,OAKEiJ,GAAsB,CACjC,CACElJ,IAAK,EACLR,MAAO,cACPS,MAAO,GAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,GAET,CACED,IAAK,EACLR,MAAO,UACPS,MAAO,IAKLkJ,IAAU,IAAIC,MAAOC,cAAgB,EACrCC,GAAQ,GAELC,GAAI,KAAMA,IAAKJ,GAASI,KAC/BD,GAAM/E,KAAKgF,IAEb,IezkBYC,GfykBRC,GAAcH,GAAMxJ,KA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","file":"static/js/main.4b73c909.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ca9e42db.png\";","export const recordCountryOptions = [\n  { label: 'Finland', value: 'FI' },\n  { label: 'United Kingdom', value: 'GB' },\n  { label: 'United States', value: 'US' },\n  { label: 'Afghanistan', value: 'AF' },\n  { label: 'Åland Islands', value: 'AX' },\n  { label: 'Albania', value: 'AL' },\n  { label: 'Algeria', value: 'DZ' },\n  { label: 'American Samoa', value: 'AS' },\n  { label: 'AndorrA', value: 'AD' },\n  { label: 'Angola', value: 'AO' },\n  { label: 'Anguilla', value: 'AI' },\n  { label: 'Antarctica', value: 'AQ' },\n  { label: 'Antigua and Barbuda', value: 'AG' },\n  { label: 'Argentina', value: 'AR' },\n  { label: 'Armenia', value: 'AM' },\n  { label: 'Aruba', value: 'AW' },\n  { label: 'Australia', value: 'AU' },\n  { label: 'Austria', value: 'AT' },\n  { label: 'Azerbaijan', value: 'AZ' },\n  { label: 'Bahamas', value: 'BS' },\n  { label: 'Bahrain', value: 'BH' },\n  { label: 'Bangladesh', value: 'BD' },\n  { label: 'Barbados', value: 'BB' },\n  { label: 'Belarus', value: 'BY' },\n  { label: 'Belgium', value: 'BE' },\n  { label: 'Belize', value: 'BZ' },\n  { label: 'Benin', value: 'BJ' },\n  { label: 'Bermuda', value: 'BM' },\n  { label: 'Bhutan', value: 'BT' },\n  { label: 'Bolivia', value: 'BO' },\n  { label: 'Bosnia and Herzegovina', value: 'BA' },\n  { label: 'Botswana', value: 'BW' },\n  { label: 'Bouvet Island', value: 'BV' },\n  { label: 'Brazil', value: 'BR' },\n  { label: 'British Indian Ocean Territory', value: 'IO' },\n  { label: 'Brunei Darussalam', value: 'BN' },\n  { label: 'Bulgaria', value: 'BG' },\n  { label: 'Burkina Faso', value: 'BF' },\n  { label: 'Burundi', value: 'BI' },\n  { label: 'Cambodia', value: 'KH' },\n  { label: 'Cameroon', value: 'CM' },\n  { label: 'Canada', value: 'CA' },\n  { label: 'Cape Verde', value: 'CV' },\n  { label: 'Cayman Islands', value: 'KY' },\n  { label: 'Central African Republic', value: 'CF' },\n  { label: 'Chad', value: 'TD' },\n  { label: 'Chile', value: 'CL' },\n  { label: 'China', value: 'CN' },\n  { label: 'Christmas Island', value: 'CX' },\n  { label: 'Cocos (Keeling) Islands', value: 'CC' },\n  { label: 'Colombia', value: 'CO' },\n  { label: 'Comoros', value: 'KM' },\n  { label: 'Congo', value: 'CG' },\n  { label: 'Congo, The Democratic Republic of the', value: 'CD' },\n  { label: 'Cook Islands', value: 'CK' },\n  { label: 'Costa Rica', value: 'CR' },\n  { label: \"Cote D'Ivoire\", value: 'CI' },\n  { label: 'Croatia', value: 'HR' },\n  { label: 'Cuba', value: 'CU' },\n  { label: 'Cyprus', value: 'CY' },\n  { label: 'Czech Republic', value: 'CZ' },\n  { label: 'Denmark', value: 'DK' },\n  { label: 'Djibouti', value: 'DJ' },\n  { label: 'Dominica', value: 'DM' },\n  { label: 'Dominican Republic', value: 'DO' },\n  { label: 'Ecuador', value: 'EC' },\n  { label: 'Egypt', value: 'EG' },\n  { label: 'El Salvador', value: 'SV' },\n  { label: 'Equatorial Guinea', value: 'GQ' },\n  { label: 'Eritrea', value: 'ER' },\n  { label: 'Estonia', value: 'EE' },\n  { label: 'Ethiopia', value: 'ET' },\n  { label: 'Falkland Islands (Malvinas)', value: 'FK' },\n  { label: 'Faroe Islands', value: 'FO' },\n  { label: 'Fiji', value: 'FJ' },\n  { label: 'France', value: 'FR' },\n  { label: 'French Guiana', value: 'GF' },\n  { label: 'French Polynesia', value: 'PF' },\n  { label: 'French Southern Territories', value: 'TF' },\n  { label: 'Gabon', value: 'GA' },\n  { label: 'Gambia', value: 'GM' },\n  { label: 'Georgia', value: 'GE' },\n  { label: 'Germany', value: 'DE' },\n  { label: 'Ghana', value: 'GH' },\n  { label: 'Gibraltar', value: 'GI' },\n  { label: 'Greece', value: 'GR' },\n  { label: 'Greenland', value: 'GL' },\n  { label: 'Grenada', value: 'GD' },\n  { label: 'Guadeloupe', value: 'GP' },\n  { label: 'Guam', value: 'GU' },\n  { label: 'Guatemala', value: 'GT' },\n  { label: 'Guernsey', value: 'GG' },\n  { label: 'Guinea', value: 'GN' },\n  { label: 'Guinea-Bissau', value: 'GW' },\n  { label: 'Guyana', value: 'GY' },\n  { label: 'Haiti', value: 'HT' },\n  { label: 'Heard Island and Mcdonald Islands', value: 'HM' },\n  { label: 'Holy See (Vatican City State)', value: 'VA' },\n  { label: 'Honduras', value: 'HN' },\n  { label: 'Hong Kong', value: 'HK' },\n  { label: 'Hungary', value: 'HU' },\n  { label: 'Iceland', value: 'IS' },\n  { label: 'India', value: 'IN' },\n  { label: 'Indonesia', value: 'ID' },\n  { label: 'Iran, Islamic Republic Of', value: 'IR' },\n  { label: 'Iraq', value: 'IQ' },\n  { label: 'Ireland', value: 'IE' },\n  { label: 'Isle of Man', value: 'IM' },\n  { label: 'Israel', value: 'IL' },\n  { label: 'Italy', value: 'IT' },\n  { label: 'Jamaica', value: 'JM' },\n  { label: 'Japan', value: 'JP' },\n  { label: 'Jersey', value: 'JE' },\n  { label: 'Jordan', value: 'JO' },\n  { label: 'Kazakhstan', value: 'KZ' },\n  { label: 'Kenya', value: 'KE' },\n  { label: 'Kiribati', value: 'KI' },\n  { label: \"Korea, Democratic People's Republic of\", value: 'KP' },\n  { label: 'Korea, Republic of', value: 'KR' },\n  { label: 'Kuwait', value: 'KW' },\n  { label: 'Kyrgyzstan', value: 'KG' },\n  { label: \"Lao People's Democratic Republic\", value: 'LA' },\n  { label: 'Latvia', value: 'LV' },\n  { label: 'Lebanon', value: 'LB' },\n  { label: 'Lesotho', value: 'LS' },\n  { label: 'Liberia', value: 'LR' },\n  { label: 'Libyan Arab Jamahiriya', value: 'LY' },\n  { label: 'Liechtenstein', value: 'LI' },\n  { label: 'Lithuania', value: 'LT' },\n  { label: 'Luxembourg', value: 'LU' },\n  { label: 'Macao', value: 'MO' },\n  { label: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n  { label: 'Madagascar', value: 'MG' },\n  { label: 'Malawi', value: 'MW' },\n  { label: 'Malaysia', value: 'MY' },\n  { label: 'Maldives', value: 'MV' },\n  { label: 'Mali', value: 'ML' },\n  { label: 'Malta', value: 'MT' },\n  { label: 'Marshall Islands', value: 'MH' },\n  { label: 'Martinique', value: 'MQ' },\n  { label: 'Mauritania', value: 'MR' },\n  { label: 'Mauritius', value: 'MU' },\n  { label: 'Mayotte', value: 'YT' },\n  { label: 'Mexico', value: 'MX' },\n  { label: 'Micronesia, Federated States of', value: 'FM' },\n  { label: 'Moldova, Republic of', value: 'MD' },\n  { label: 'Monaco', value: 'MC' },\n  { label: 'Mongolia', value: 'MN' },\n  { label: 'Montenegro', value: 'ME' },\n  { label: 'Montserrat', value: 'MS' },\n  { label: 'Morocco', value: 'MA' },\n  { label: 'Mozambique', value: 'MZ' },\n  { label: 'Myanmar', value: 'MM' },\n  { label: 'Namibia', value: 'NA' },\n  { label: 'Nauru', value: 'NR' },\n  { label: 'Nepal', value: 'NP' },\n  { label: 'Netherlands', value: 'NL' },\n  { label: 'Netherlands Antilles', value: 'AN' },\n  { label: 'New Caledonia', value: 'NC' },\n  { label: 'New Zealand', value: 'NZ' },\n  { label: 'Nicaragua', value: 'NI' },\n  { label: 'Niger', value: 'NE' },\n  { label: 'Nigeria', value: 'NG' },\n  { label: 'Niue', value: 'NU' },\n  { label: 'Norfolk Island', value: 'NF' },\n  { label: 'Northern Mariana Islands', value: 'MP' },\n  { label: 'Norway', value: 'NO' },\n  { label: 'Oman', value: 'OM' },\n  { label: 'Pakistan', value: 'PK' },\n  { label: 'Palau', value: 'PW' },\n  { label: 'Palestinian Territory, Occupied', value: 'PS' },\n  { label: 'Panama', value: 'PA' },\n  { label: 'Papua New Guinea', value: 'PG' },\n  { label: 'Paraguay', value: 'PY' },\n  { label: 'Peru', value: 'PE' },\n  { label: 'Philippines', value: 'PH' },\n  { label: 'Poland', value: 'PL' },\n  { label: 'Portugal', value: 'PT' },\n  { label: 'Puerto Rico', value: 'PR' },\n  { label: 'Qatar', value: 'QA' },\n  { label: 'Romania', value: 'RO' },\n  { label: 'Russian Federation', value: 'RU' },\n  { label: 'RWANDA', value: 'RW' },\n  { label: 'Saint Helena', value: 'SH' },\n  { label: 'Saint Kitts and Nevis', value: 'KN' },\n  { label: 'Saint Lucia', value: 'LC' },\n  { label: 'Saint Pierre and Miquelon', value: 'PM' },\n  { label: 'Saint Vincent and the Grenadines', value: 'VC' },\n  { label: 'Samoa', value: 'WS' },\n  { label: 'San Marino', value: 'SM' },\n  { label: 'Sao Tome and Principe', value: 'ST' },\n  { label: 'Saudi Arabia', value: 'SA' },\n  { label: 'Senegal', value: 'SN' },\n  { label: 'Serbia', value: 'RS' },\n  { label: 'Seychelles', value: 'SC' },\n  { label: 'Sierra Leone', value: 'SL' },\n  { label: 'Singapore', value: 'SG' },\n  { label: 'Slovakia', value: 'SK' },\n  { label: 'Slovenia', value: 'SI' },\n  { label: 'Solomon Islands', value: 'SB' },\n  { label: 'Somalia', value: 'SO' },\n  { label: 'South Africa', value: 'ZA' },\n  { label: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n  { label: 'Spain', value: 'ES' },\n  { label: 'Sri Lanka', value: 'LK' },\n  { label: 'Sudan', value: 'SD' },\n  { label: 'Suriname', value: 'SR' },\n  { label: 'Svalbard and Jan Mayen', value: 'SJ' },\n  { label: 'Swaziland', value: 'SZ' },\n  { label: 'Sweden', value: 'SE' },\n  { label: 'Switzerland', value: 'CH' },\n  { label: 'Syrian Arab Republic', value: 'SY' },\n  { label: 'Taiwan, Province of China', value: 'TW' },\n  { label: 'Tajikistan', value: 'TJ' },\n  { label: 'Tanzania, United Republic of', value: 'TZ' },\n  { label: 'Thailand', value: 'TH' },\n  { label: 'Timor-Leste', value: 'TL' },\n  { label: 'Togo', value: 'TG' },\n  { label: 'Tokelau', value: 'TK' },\n  { label: 'Tonga', value: 'TO' },\n  { label: 'Trinidad and Tobago', value: 'TT' },\n  { label: 'Tunisia', value: 'TN' },\n  { label: 'Turkey', value: 'TR' },\n  { label: 'Turkmenistan', value: 'TM' },\n  { label: 'Turks and Caicos Islands', value: 'TC' },\n  { label: 'Tuvalu', value: 'TV' },\n  { label: 'Uganda', value: 'UG' },\n  { label: 'Ukraine', value: 'UA' },\n  { label: 'United Arab Emirates', value: 'AE' },\n  { label: 'United States Minor Outlying Islands', value: 'UM' },\n  { label: 'Uruguay', value: 'UY' },\n  { label: 'Uzbekistan', value: 'UZ' },\n  { label: 'Vanuatu', value: 'VU' },\n  { label: 'Venezuela', value: 'VE' },\n  { label: 'Viet Nam', value: 'VN' },\n  { label: 'Virgin Islands, British', value: 'VG' },\n  { label: 'Virgin Islands, U.S.', value: 'VI' },\n  { label: 'Wallis and Futuna', value: 'WF' },\n  { label: 'Western Sahara', value: 'EH' },\n  { label: 'Yemen', value: 'YE' },\n  { label: 'Zambia', value: 'ZM' },\n  { label: 'Zimbabwe', value: 'ZW' },\n];\n\nexport const countryOptions = [\n  {\n    key: 1,\n    label: 'Finland',\n    value: 1,\n  },\n  {\n    key: 2,\n    label: 'Other than Finland',\n    value: 2,\n  },\n  {\n    key: 0,\n    label: 'Unknown',\n    value: 0,\n  },\n];\n\n// program start time options\nexport const startTimeOptions = [\n  {\n    key: 0,\n    label: '00:00',\n    value: '00:00:00',\n  },\n  {\n    key: 1,\n    label: '01:00',\n    value: '01:00:00',\n  },\n  {\n    key: 2,\n    label: '02:00',\n    value: '02:00:00',\n  },\n  {\n    key: 3,\n    label: '03:00',\n    value: '03:00:00',\n  },\n  {\n    key: 4,\n    label: '04:00',\n    value: '04:00:00',\n  },\n  {\n    key: 5,\n    label: '05:00',\n    value: '05:00:00',\n  },\n  {\n    key: 6,\n    label: '06:00',\n    value: '06:00:00',\n  },\n  {\n    key: 7,\n    label: '07:00',\n    value: '07:00:00',\n  },\n  {\n    key: 8,\n    label: '08:00',\n    value: '08:00:00',\n  },\n  {\n    key: 9,\n    label: '09:00',\n    value: '09:00:00',\n  },\n  {\n    key: 10,\n    label: '10:00',\n    value: '10:00:00',\n  },\n  {\n    key: 11,\n    label: '11:00',\n    value: '11:00:00',\n  },\n  {\n    key: 12,\n    label: '12:00',\n    value: '12:00:00',\n  },\n  {\n    key: 13,\n    label: '13:00',\n    value: '13:00:00',\n  },\n  {\n    key: 14,\n    label: '14:00',\n    value: '14:00:00',\n  },\n  {\n    key: 15,\n    label: '15:00',\n    value: '15:00:00',\n  },\n  {\n    key: 16,\n    label: '16:00',\n    value: '16:00:00',\n  },\n  {\n    key: 17,\n    label: '17:00',\n    value: '17:00:00',\n  },\n  {\n    key: 18,\n    label: '18:00',\n    value: '18:00:00',\n  },\n  {\n    key: 19,\n    label: '19:00',\n    value: '19:00:00',\n  },\n  {\n    key: 20,\n    label: '20:00',\n    value: '20:00:00',\n  },\n  {\n    key: 21,\n    label: '21:00',\n    value: '21:00:00',\n  },\n  {\n    key: 22,\n    label: '22:00',\n    value: '22:00:00',\n  },\n  {\n    key: 23,\n    label: '23:00',\n    value: '23:00:00',\n  },\n];\n\n// program end time options\nexport const endTimeOptions = [\n  {\n    key: 0,\n    label: '01:00',\n    value: '01:00:00',\n  },\n  {\n    key: 1,\n    label: '02:00',\n    value: '02:00:00',\n  },\n  {\n    key: 2,\n    label: '03:00',\n    value: '03:00:00',\n  },\n  {\n    key: 3,\n    label: '04:00',\n    value: '04:00:00',\n  },\n  {\n    key: 4,\n    label: '05:00',\n    value: '05:00:00',\n  },\n  {\n    key: 5,\n    label: '06:00',\n    value: '06:00:00',\n  },\n  {\n    key: 6,\n    label: '07:00',\n    value: '07:00:00',\n  },\n  {\n    key: 7,\n    label: '08:00',\n    value: '08:00:00',\n  },\n  {\n    key: 8,\n    label: '09:00',\n    value: '09:00:00',\n  },\n  {\n    key: 9,\n    label: '10:00',\n    value: '10:00:00',\n  },\n  {\n    key: 10,\n    label: '11:00',\n    value: '11:00:00',\n  },\n  {\n    key: 11,\n    label: '12:00',\n    value: '12:00:00',\n  },\n  {\n    key: 12,\n    label: '13:00',\n    value: '13:00:00',\n  },\n  {\n    key: 13,\n    label: '14:00',\n    value: '14:00:00',\n  },\n  {\n    key: 14,\n    label: '15:00',\n    value: '15:00:00',\n  },\n  {\n    key: 15,\n    label: '16:00',\n    value: '16:00:00',\n  },\n  {\n    key: 16,\n    label: '17:00',\n    value: '17:00:00',\n  },\n  {\n    key: 17,\n    label: '18:00',\n    value: '18:00:00',\n  },\n  {\n    key: 18,\n    label: '19:00',\n    value: '19:00:00',\n  },\n  {\n    key: 19,\n    label: '20:00',\n    value: '20:00:00',\n  },\n  {\n    key: 20,\n    label: '21:00',\n    value: '21:00:00',\n  },\n  {\n    key: 21,\n    label: '22:00',\n    value: '22:00:00',\n  },\n  {\n    key: 22,\n    label: '23:00',\n    value: '23:00:00',\n  },\n  {\n    key: 23,\n    label: '24:00',\n    value: '23:59:59',\n  },\n];\n\n// user level options\nexport const levelOptions = [\n  {\n    key: 1,\n    label: 'DJ',\n    value: 1,\n  },\n  {\n    key: 2,\n    label: 'Toimitus',\n    value: 2,\n  },\n  {\n    key: 3,\n    label: 'Admin',\n    value: 3,\n  },\n];\n\n// month options\nexport const reportMonthOptions = [\n  {\n    key: '01',\n    label: 'January',\n    value: '01',\n  },\n  {\n    key: '02',\n    label: 'February',\n    value: '02',\n  },\n  {\n    key: '03',\n    label: 'March',\n    value: '03',\n  },\n  {\n    key: '04',\n    label: 'April',\n    value: '04',\n  },\n  {\n    key: '05',\n    label: 'May',\n    value: '05',\n  },\n  {\n    key: '06',\n    label: 'June',\n    value: '06',\n  },\n  {\n    key: '07',\n    label: 'July',\n    value: '07',\n  },\n  {\n    key: '08',\n    label: 'August',\n    value: '08',\n  },\n  {\n    key: '09',\n    label: 'September',\n    value: '09',\n  },\n  {\n    key: '10',\n    label: 'October',\n    value: '10',\n  },\n  {\n    key: '11',\n    label: 'November',\n    value: '11',\n  },\n  {\n    key: '12',\n    label: 'December',\n    value: '12',\n  },\n];\n\n// report status options\nexport const reportStatusOptions = [\n  {\n    key: 0,\n    label: 'In progress',\n    value: 0,\n  },\n  {\n    key: 1,\n    label: 'Ready',\n    value: 1,\n  },\n  {\n    key: 9,\n    label: 'Deleted',\n    value: 9,\n  },\n];\n\n// year options\nconst dateNow = new Date().getFullYear() + 1;\nconst years = [];\n// eslint-disable-next-line no-plusplus\nfor (let i = 2001; i <= dateNow; i++) {\n  years.push(i);\n}\nlet yearOptions = years.map((option) => ({\n  key: option.toString(),\n  label: option.toString(),\n  value: option.toString(),\n}));\nyearOptions = yearOptions.reverse();\n\nexport const reportYearOptions = yearOptions;\n","import { UpdateAlbumParams, ChangeArtistParams } from './types';\nimport axios from 'axios';\n\nconst baseUrl = '/api/albums';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getOneAlbum = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/albumdetails/${id}`, config);\n  return response.data;\n};\n\nconst getTracklistOfAlbum = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/tracklist/${id}`, config);\n  return response.data;\n};\n\nconst updateAlbum = async (albumToUpdate: UpdateAlbumParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/albumdetails/${albumToUpdate.id}`,\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst changeArtistId = async (artistToUpdate: ChangeArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/albums/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateAlbum,\n  getOneAlbum,\n  getTracklistOfAlbum,\n  changeArtistId,\n};\n","import axios from 'axios';\nimport {\n  DiscogsQueryType,\n  Top100QueryType,\n  AdvancedSearchQueryType,\n  MergeParamsType,\n} from './types';\n\nconst baseUrl = '/api/search';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getTracksForAutocompleteSearch = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/autocomplete/${query}`, config);\n  return request.data;\n};\n\nconst getDiscogsData = async (query: DiscogsQueryType) => {\n  const request = await axios.get(\n    `https://api.discogs.com/database/search?artist=${query.artist}&release_title=${query.album}&token=${process.env.REACT_APP_DISCOGS_TOKEN}`\n  );\n  return request.data;\n};\n\nconst getTop100 = async (query: Top100QueryType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `/api/top100?list=${query.list}&start_date=${query.start_date}&end_date=${query.end_date}`,\n    config\n  );\n  return request.data;\n};\n\nconst advancedSearch = async (searchParams: AdvancedSearchQueryType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `${baseUrl}/advanced?kind=${searchParams.kind}&query=${searchParams.query}`,\n    config\n  );\n  return request.data;\n};\n\nconst merge = async (mergeParams: MergeParamsType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/advanced`, mergeParams, config);\n  return request.data;\n};\n\nconst changeArtistOptions = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/changeartist/${query}`, config);\n  return request.data;\n};\n\nconst changeAlbumOptions = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/changealbum/${query}`, config);\n  return request.data;\n};\n\nexport default {\n  advancedSearch,\n  getTop100,\n  getDiscogsData,\n  getTracksForAutocompleteSearch,\n  setToken,\n  changeArtistOptions,\n  changeAlbumOptions,\n  merge,\n};\n","import { Dispatch } from 'redux';\n\nexport const setNotification = (message: string, type: 'success' | 'fail') => {\n  const content = {\n    message,\n    type,\n  };\n  return async (dispatch: Dispatch) => {\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content,\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION',\n      });\n    }, 3000);\n  };\n};\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps } from 'formik';\nimport { Form } from 'semantic-ui-react';\n\nexport interface SelectFieldOptions {\n  key?: number | string;\n  value: number | string;\n  label: string;\n}\n\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: SelectFieldOptions[];\n  placeholder?: string;\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options,\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as='select' name={name} className='ui dropdown'>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='text' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const RequiredTextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field required>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='text' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DisabledTextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field disabled>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='text' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface PasswordProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const PasswordField: React.FC<PasswordProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='password' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const RequiredPasswordField: React.FC<PasswordProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field required>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='password' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({\n  field,\n  label,\n  min,\n  max,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface TextAreaProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const TextAreaField: React.FC<TextAreaProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field style={{ marginTop: '1rem' }}>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} component='textarea' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n","import React from 'react';\nimport { Button, Grid, Dimmer, Loader, Header } from 'semantic-ui-react';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  TextField,\n  DisabledTextField,\n  NumberField,\n} from '../layout/forms/FormFields';\nimport { Album, UpdateAlbumParams } from '../../store/album/types';\n\ninterface Props {\n  currentAlbum: Album;\n  onSubmit: (values: UpdateAlbumParams) => void;\n}\n\nconst AlbumDetailsForm: React.FC<Props> = ({ currentAlbum, onSubmit }) => {\n  if (currentAlbum === null) {\n    return (\n      <Dimmer>\n        <Loader>Loading album...</Loader>\n      </Dimmer>\n    );\n  }\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Header>Album info</Header>\n        <Formik\n          initialValues={{\n            id: currentAlbum.album_id,\n            artist: currentAlbum.artist_name,\n            name: currentAlbum.album_name,\n            label: currentAlbum.label || '',\n            cat_id: currentAlbum.cat_id || '',\n            year: Number(currentAlbum.year?.substring(0, 4)) || '',\n            spotify_id: currentAlbum.spotify_id || '',\n          }}\n          onSubmit={onSubmit}\n          validate={(values) => {\n            console.log(values);\n            const requiredError = 'Album name is required';\n            const errors: { [field: string]: string } = {};\n            if (!values.name) {\n              errors.name = requiredError;\n            }\n            return errors;\n          }}\n        >\n          {({ isValid }) => {\n            return (\n              <Form className='form ui'>\n                <Field\n                  label='Artist'\n                  placeholder='Artist'\n                  name='artist'\n                  component={DisabledTextField}\n                />\n                <Field\n                  label='Album name'\n                  placeholder='Name'\n                  name='name'\n                  component={TextField}\n                />\n                <Field\n                  label='Label'\n                  placeholder='Label...'\n                  name='label'\n                  component={TextField}\n                />\n                <Field\n                  label='Catalog ID'\n                  placeholder='Catalog ID...'\n                  name='cat_id'\n                  component={TextField}\n                />\n                <Field\n                  label='Year'\n                  name='year'\n                  component={NumberField}\n                  min={1900}\n                  max={2900}\n                />\n                <Field\n                  label='Spotify id'\n                  placeholder='Spotify id'\n                  name='spotify_id'\n                  component={TextField}\n                />\n                <Button\n                  type='submit'\n                  floated='left'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update album\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default AlbumDetailsForm;\n","import axios from 'axios';\nimport {\n  AddTrackToReportParams,\n  ReportDetails,\n  CreateNewReportFormTypes,\n  PlaylogParams,\n  PlaylogRawData,\n  PlaylogNewArray,\n  PlaylogNewArrayWithSortable,\n  ReportItem,\n} from './types';\n\nconst baseUrl = '/api/reports';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get one report with tracks\nconst getOne = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst addTrackToReport = async (trackToAdd: AddTrackToReportParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(`${baseUrl}`, trackToAdd, config);\n  return request.data;\n};\n\nconst deleteTrackFromReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.delete(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst deleteReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`/api/reportslist/${id}`, {}, config);\n  return request.data;\n};\n\nconst updateSortableRank = async (remainingTracks: Array<ReportItem>) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  if (remainingTracks === null) {\n    return;\n  }\n  remainingTracks.forEach(async (track, index) => {\n    const trackToUpdate = {\n      sortable_rank: index + 1,\n    };\n    const request = await axios.put(\n      `${baseUrl}/${track.report_track_id}`,\n      trackToUpdate,\n      config\n    );\n    return request.data;\n  });\n};\n\nconst getReportDetails = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`/api/reportdetails/details/${id}`, config);\n  return request.data;\n};\n\n// create new report\nconst createReport = async (newReport: CreateNewReportFormTypes) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post('/api/reportdetails', newReport, config);\n  return response.data;\n};\n\n// update existing report details\nconst updateReport = async (updatedReport: ReportDetails) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n\n  await axios.put(\n    `/api/reportdetails/update/${updatedReport.id}`,\n    updatedReport,\n    config\n  );\n  return updatedReport;\n};\n\nconst checkPlaylogTracks = async (searchParams: PlaylogParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n\n  const tracks = await axios.get<PlaylogRawData>(\n    `/api/playlog?date=${searchParams.date}`\n  );\n\n  let arr: Array<PlaylogRawData> = [];\n  const entries = Object.entries(tracks.data);\n  // eslint-disable-next-line no-unused-vars\n  entries.forEach(([_key, value]) => {\n    arr.push(value);\n  });\n  arr = arr.reverse();\n\n  const newArr: Array<PlaylogNewArray> = [];\n  arr.forEach((track) => {\n    let hours: number | string = track.date.charAt(11) + track.date.charAt(12);\n    hours = parseInt(hours);\n    const a = track.length.split(':');\n    const seconds = parseInt(a[0]) * 60 + parseInt(a[1]);\n    // make loop skip the songs not matching the start time - end time -window\n    if (\n      hours < parseInt(searchParams.startTime) ||\n      hours >= parseInt(searchParams.endTime)\n    ) {\n      return;\n    }\n    newArr.push({\n      album_name: track.album,\n      artist_name: track.artist,\n      cat_id: track.matrix,\n      disc_no: Number(track.side),\n      track_no: Number(track.tracknumber),\n      isrc: track.isrc,\n      record_country: track.recording_country,\n      country: null,\n      play_time: track.date,\n      djonline_id: track.id,\n      label: track.label,\n      length: seconds,\n      track_title: track.song,\n      year: track.year,\n      // sortable_rank: searchParams.sortable_rank_start + index + 1,\n      report_id: searchParams.report_id,\n    });\n  });\n  const newerArr: Array<PlaylogNewArrayWithSortable> = [];\n  newArr.forEach((track, index) => {\n    newerArr.push({\n      ...track,\n      sortable_rank: searchParams.sortable_rank_start + index + 1,\n    });\n  });\n  const returnArr: Array<ReportItem> = [];\n  newerArr.forEach(async (track) => {\n    const request = await axios.post(`/api/tracks/playlog`, track, config);\n    returnArr.push(request.data);\n  });\n  console.log('return array at reportservice', returnArr);\n  return returnArr;\n};\n\nexport default {\n  setToken,\n  addTrackToReport,\n  deleteTrackFromReport,\n  deleteReport,\n  updateSortableRank,\n  getOne,\n  getReportDetails,\n  createReport,\n  updateReport,\n  checkPlaylogTracks,\n};\n","import { Dispatch } from 'redux';\nimport {\n  GET_ONE_REPORT,\n  GET_REPORT_DETAILS,\n  SET_EDIT_TRACK_ID,\n  GET_PLAYLOG_TRACKS,\n  CREATE_REPORT,\n  UPDATE_REPORT,\n  CHECK_FOR_DELETE,\n  UNCHECK_FOR_DELETE,\n  // CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n  SET_LOADING,\n  CLEAR_CHECKED_FOR_DELETE,\n  CreateNewReportFormTypes,\n  PlaylogParams,\n  AddTrackToReportParams,\n  ReportDetails,\n  ReportItem,\n  DeleteTrackFromReportParams,\n} from './types';\n\nimport reportService from './services';\n\n// get one report with tracks by report id\nexport const getOneReport = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const report = await reportService.getOne(id);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report,\n      id,\n    });\n  } catch (error) {\n    console.log('reportActions getOneReport error:', error);\n  }\n};\n\nexport const setEditTrackId = (id: Number) => async (dispatch: Dispatch) => {\n  dispatch({\n    type: SET_EDIT_TRACK_ID,\n    data: id,\n  });\n};\n\n// add track to a report\nexport const addTrackToReport = (trackToAdd: AddTrackToReportParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const track = await reportService.addTrackToReport(trackToAdd);\n    const report = await reportService.getOne(track.report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report,\n    });\n  } catch (error) {\n    console.log('reportActions addTrackToReport error', error);\n  }\n};\n\n// delete track from report\nexport const deleteTrackFromReport = (\n  params: DeleteTrackFromReportParams\n) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportService.deleteTrackFromReport(params.report_track_id);\n    // await reportService.updateSortableRank(params.remainingTracks);\n    const report = await reportService.getOne(params.report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report,\n    });\n  } catch (error) {\n    console.log('reportActions deleteTrackFromReport error: ', error);\n  }\n};\n\n// get report details by report id\nexport const getReportDetails = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const reportArray = await reportService.getReportDetails(id);\n    const report = reportArray[0];\n    dispatch({\n      type: GET_REPORT_DETAILS,\n      data: report,\n      id,\n    });\n  } catch (error) {\n    console.log('reportActions getReportDetails error', error);\n  }\n};\n\nexport const createReport = (newReport: CreateNewReportFormTypes) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    // if (newReport.program_id === '' && newReport.new_program_name !== '') {\n    //   const newProgram = {\n    //     name: newReport.new_program_name,\n    //     user_id: newReport.user_id\n    //   };\n    //   const program = await programService.createProgram(newProgram);\n    //   dispatch({\n    //     type: CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n    //     data: program\n    //   });\n    //   const newReportWithNewProgram = {\n    //     ...newReport,\n    //     program_id: program.id,\n    //     display: 1\n    //   };\n    //   const report = await reportService.createReport(newReportWithNewProgram);\n    //   dispatch({\n    //     type: CREATE_REPORT,\n    //     data: report\n    //   });\n    // } else {\n    //   const report = await reportService.createReport(newReport);\n    //   dispatch({\n    //     type: CREATE_REPORT,\n    //     data: report\n    //   });\n    // }\n    const report = await reportService.createReport(newReport);\n    dispatch({\n      type: CREATE_REPORT,\n      data: report,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const copyReport = (\n  reportDetailsToCopy: CreateNewReportFormTypes,\n  reportTracksToCopy: Array<ReportItem>\n) => async (dispatch: Dispatch) => {\n  dispatch({\n    type: SET_LOADING,\n  });\n  const report = await reportService.createReport(reportDetailsToCopy);\n  dispatch({\n    type: CREATE_REPORT,\n    data: report,\n  });\n  reportTracksToCopy.forEach(async (track) => {\n    const trackToAdd = {\n      ...track,\n      report_id: report.id,\n      report_track_id: null,\n    };\n    await reportService.addTrackToReport(trackToAdd);\n  });\n  const newReport = await reportService.getOne(report.id);\n  dispatch({\n    type: GET_ONE_REPORT,\n    data: newReport,\n  });\n};\n\nexport const updateReport = (updatedReport: ReportDetails) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportService.updateReport(updatedReport);\n    dispatch({\n      type: UPDATE_REPORT,\n      data: updatedReport,\n    });\n  } catch (error) {\n    console.log('reportActions updateReport error:', error);\n  }\n};\n\nexport const checkForDelete = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CHECK_FOR_DELETE,\n      data: id,\n    });\n  } catch (error) {\n    console.log('reportActions checkFordelete error', error);\n  }\n};\n\nexport const unCheckForDelete = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: UNCHECK_FOR_DELETE,\n      data: id,\n    });\n  } catch (error) {\n    console.log('reportActions unCheckForDelete error', error);\n  }\n};\n\nexport const deleteChecked = (\n  idsToDelete: Array<number>,\n  // eslint-disable-next-line camelcase\n  report_id: Number,\n  remainingTracks: Array<ReportItem>\n) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    console.log('function fired');\n    idsToDelete.forEach(async (id: number) => {\n      await reportService.deleteTrackFromReport(id);\n    });\n    await reportService.updateSortableRank(remainingTracks);\n    const report = await reportService.getOne(Number(report_id));\n    console.log(report);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: remainingTracks,\n    });\n    dispatch({\n      type: CLEAR_CHECKED_FOR_DELETE,\n    });\n  } catch (error) {\n    console.log('reportActions deleteChecked error:', error);\n  }\n};\n\n// eslint-disable-next-line camelcase\nexport const updateSortableRank = (newOrder: Array<ReportItem>) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportService.updateSortableRank(newOrder);\n    const updatedSortableRanks: Array<ReportItem> = [];\n    newOrder.forEach((track, index) => {\n      const item = {\n        ...track,\n        sortable_rank: index + 1,\n      };\n      updatedSortableRanks.push(item);\n    });\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: updatedSortableRanks,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getPlaylogTracks = (searchParams: PlaylogParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const tracks = await reportService.checkPlaylogTracks(searchParams);\n    console.log('returnArray at report action', tracks);\n    dispatch({\n      type: GET_PLAYLOG_TRACKS,\n      data: tracks,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { Track } from '../track/types';\nexport const GET_ONE_REPORT = 'GET_ONE_REPORT';\nexport const GET_REPORT_DETAILS = 'GET_REPORT_DETAILS';\nexport const GET_PLAYLOG_TRACKS = 'GET_PLAYLOG_TRACKS';\nexport const ADD_NEW_TRACK = 'ADD_NEW_TRACK';\nexport const UPDATE_TRACK = 'UPDATE_TRACK';\nexport const SET_EDIT_TRACK_ID = 'SET_EDIT_TRACK_ID';\nexport const GET_ONE_TRACK = 'GET_ONE_TRACK';\nexport const REMOVE_CURRENT_TRACK = 'REMOVE_CURRENT_TRACK';\nexport const DELETE_TRACK_FROM_REPORT = 'DELETE_TRACK_FROM_REPORT';\nexport const CHECK_FOR_DELETE = 'CHECK_FOR_DELETE';\nexport const UNCHECK_FOR_DELETE = 'UNCHECK_FOR_DELETE';\nexport const CLEAR_CHECKED_FOR_DELETE = 'CLEAR_CHECKED_FOR_DELETE';\nexport const CREATE_REPORT = 'CREATE_REPORT';\nexport const UPDATE_REPORT = 'UPDATE_REPORT';\nexport const CLEAR_CURRENT_REPORT = 'CLEAR_CURRENT_REPORT';\nexport const SET_LOADING = 'SET_LOADING';\nexport const ADD_TRACK_TO_REPORT = 'ADD_TRACK_TO_REPORT';\nexport const CREATE_NEW_PROGRAM_ON_NEW_REPORT =\n  'CREATE_NEW_PROGRAM_ON_NEW_REPORT';\n// REPORT_ERROR\n\nexport interface ReportItem {\n  sortable_rank: number;\n  artist_name: string;\n  track_title: string;\n  length: number;\n  track_id: number;\n  artist_id: number;\n  album_id: number;\n  album_name: string;\n  disc_no: number | null;\n  track_no: number | null;\n  cat_id: string | null;\n  country: number;\n  isrc: string | null;\n  label: string | null;\n  people: string | null;\n  record_country: string | null;\n  year: string | null;\n  report_track_id: number;\n}\n\nexport interface PlaylogItem {\n  track_id: number;\n  artist_id: number;\n  album_id: number;\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | null;\n  disc_no: string | null;\n  track_no: string | null;\n  length: number;\n  country: number;\n  record_country: string | null;\n  sortable_rank: number;\n  people: string | null;\n  isrc: string | null;\n  report_id: number;\n  report_track_id: number;\n  user_id: number;\n  spotify_id: string | null;\n}\n\nexport interface ReportDetails {\n  program_name: string;\n  program_no: number | null;\n  program_dj: string;\n  program_date: string;\n  program_start_time: string;\n  program_end_time: string;\n  id: number;\n  program_id: number;\n  rerun: number | null | undefined;\n  status: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport interface CreateNewReportFormTypes {\n  program_name: string | undefined;\n  program_no: number | null;\n  program_dj: string;\n  program_date: string;\n  program_start_time: string | undefined;\n  program_end_time: string | undefined;\n  program_id: number;\n  rerun: number | null | undefined;\n  status: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport interface ReportState {\n  report: Array<ReportItem>;\n  playlog: Array<ReportItem>;\n  editTrackId: number | null;\n  reportDetails: ReportDetails | null;\n  newReport: ReportDetails | null;\n  loading: boolean;\n  checkedForDelete: Array<number>;\n  currentTrack: Track | null;\n}\n\n// report action types\ninterface GetReportDetailsAction {\n  type: typeof GET_REPORT_DETAILS;\n  data: ReportDetails;\n}\n\ninterface CreateReportAction {\n  type: typeof CREATE_REPORT;\n  data: ReportDetails;\n}\n\ninterface UpdateReportAction {\n  type: typeof UPDATE_REPORT;\n  data: ReportDetails;\n}\n\ninterface GetOneReportAction {\n  type: typeof GET_ONE_REPORT;\n  data: ReportItem[];\n}\n\ninterface PlaylogAction {\n  type: typeof GET_PLAYLOG_TRACKS;\n  data: Array<ReportItem>;\n}\n\ninterface AddTrackToReportAction {\n  type: typeof ADD_TRACK_TO_REPORT;\n  data: ReportItem;\n}\n\ninterface AddNewTrackToReportAction {\n  type: typeof ADD_NEW_TRACK;\n  data: ReportItem;\n}\n\ninterface UpdateTrackAction {\n  type: typeof UPDATE_TRACK;\n  data: ReportItem;\n}\n\ninterface SetEditTrackIdAction {\n  type: typeof SET_EDIT_TRACK_ID;\n  data: number;\n}\n\ninterface GetOneTrackAction {\n  type: typeof GET_ONE_TRACK;\n  data: Track;\n}\n\ninterface RemoveCurrentTrackAction {\n  type: typeof REMOVE_CURRENT_TRACK;\n}\n\ninterface DeleteTrackFromReportAction {\n  type: typeof DELETE_TRACK_FROM_REPORT;\n  data: number;\n}\n\ninterface CheckForDeleteAction {\n  type: typeof CHECK_FOR_DELETE;\n  data: number;\n}\n\ninterface UncheckForDeleteAction {\n  type: typeof UNCHECK_FOR_DELETE;\n  data: number;\n}\n\ninterface ClearCheckedForDeleteAction {\n  type: typeof CLEAR_CHECKED_FOR_DELETE;\n}\n\ninterface ClearCurrentReportAction {\n  type: typeof CLEAR_CURRENT_REPORT;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ReportActionTypes =\n  | GetOneReportAction\n  | UpdateReportAction\n  | PlaylogAction\n  | GetReportDetailsAction\n  | CreateReportAction\n  | AddTrackToReportAction\n  | AddNewTrackToReportAction\n  | UpdateTrackAction\n  | SetEditTrackIdAction\n  | GetOneTrackAction\n  | RemoveCurrentTrackAction\n  | DeleteTrackFromReportAction\n  | ClearCurrentReportAction\n  | CheckForDeleteAction\n  | UncheckForDeleteAction\n  | ClearCheckedForDeleteAction\n  | SetLoadingAction;\n\nexport interface AddTrackToReportParams {\n  track_id: number;\n  report_id?: number;\n  length: number;\n  sortable_rank: number;\n}\n\nexport interface DeleteTrackFromReportParams {\n  report_track_id: number;\n  report_id: number;\n  remainingTracks: Array<ReportItem>;\n}\n\n//\ninterface Result {\n  description: string;\n  key: number;\n  length: number;\n  title: string;\n  value: number;\n}\n\nexport interface AutocompleteResultType {\n  result: Result;\n}\n\nexport interface PlaylogParams {\n  studioId: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  report_id: number;\n  sortable_rank_start: number;\n}\n\nexport interface PlaylogRawData {\n  date: string;\n  id: string;\n  composer: string;\n  artist: string;\n  artist_fi: null | string;\n  additional_artist: null | string;\n  conductor: null | string;\n  song: string;\n  song_fi: null | string;\n  label: string;\n  matrix: string;\n  isrc: string;\n  album: string;\n  side: string;\n  tracknumber: string;\n  length: string;\n  year: string;\n  recording_country: string;\n}\n\nexport interface PlaylogNewArray {\n  album_name: string;\n  artist_name: string;\n  cat_id: string;\n  disc_no: number;\n  track_no: number;\n  isrc: string;\n  record_country: string;\n  country: null | number;\n  play_time: string;\n  djonline_id: string;\n  label: string;\n  length: number;\n  track_title: string;\n  year: string;\n  // sortable_rank: searchParams.sortable_rank_start + index + 1,\n  report_id: number;\n}\n\nexport interface PlaylogNewArrayWithSortable {\n  album_name: string;\n  artist_name: string;\n  cat_id: string;\n  disc_no: number;\n  track_no: number;\n  isrc: string;\n  record_country: string;\n  country: null | number;\n  play_time: string;\n  djonline_id: string;\n  label: string;\n  length: number;\n  track_title: string;\n  year: string;\n  sortable_rank: number;\n  report_id: number;\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Icon, Popup } from 'semantic-ui-react';\n\nimport { setNotification } from '../../store/notification/actions';\nimport { addTrackToReport } from '../../store/report/actions';\n\nimport { ApplicationState } from '../../store/types';\n\ninterface Props {\n  track_id: number;\n  track_title: string;\n  length: number;\n}\n\nconst style = {\n  borderRadius: 0,\n  display: 'block',\n  opacity: 0.9,\n  padding: '2em',\n};\n\nconst AddTrackToCurrentReport: React.FC<Props> = ({\n  track_id,\n  track_title,\n  length,\n}) => {\n  const dispatch = useDispatch();\n  const report = useSelector((state: ApplicationState) => state.report);\n\n  if (!report.reportDetails) {\n    return null;\n  }\n  const onAdd = () => {\n    const trackToSave = {\n      track_id,\n      report_id: report.reportDetails?.id,\n      length,\n      sortable_rank: report.report.length + 1,\n    };\n    dispatch(addTrackToReport(trackToSave));\n    dispatch(\n      setNotification(\n        `${track_title} added to ${report.reportDetails?.program_name}!`,\n        'success'\n      )\n    );\n  };\n  return (\n    <React.Fragment>\n      <Popup\n        trigger={\n          <Icon\n            style={{ cursor: 'pointer' }}\n            color='green'\n            onClick={onAdd}\n            name='add'\n          />\n        }\n        style={style}\n        inverted\n        basic\n        content={`Add ${track_title} to ${report.reportDetails.program_name}`}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default AddTrackToCurrentReport;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\n// import MergeAlbumTracksModal from './MergeAlbumTracksModal';\n// import AddToCurrentReport from '../track/AddToCurrentReport';\nimport AddTrackToCurrentReport from '../track/AddTrackToCurrentReport';\n\nimport { TracklistItem } from '../../store/album/types';\n\ninterface Props {\n  track: TracklistItem;\n}\n\nconst TracksInAnAlbumItem: React.FC<Props> = ({ track }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>\n        {/* <MergeAlbumTracksModal\n          track_id={track.track_id}\n          track_title={track.track_title}\n        /> */}\n        merge album tracks modal here\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`/track/${track.track_id}`}>\n          {track.artist_name} - {track.track_title}{' '}\n        </Link>\n      </Table.Cell>\n      <Table.Cell>\n        {track.track_no} / {track.disc_no}\n      </Table.Cell>\n      <Table.Cell>{track.isrc}</Table.Cell>\n      <Table.Cell>{track.report_occurrence}</Table.Cell>\n      <Table.Cell>\n        <AddTrackToCurrentReport\n          track_title={track.track_title}\n          track_id={track.track_id}\n          length={track.length}\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default TracksInAnAlbumItem;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport TracksInAnAlbumItem from './TracksInAnAlbumItem';\n\nimport { TracklistItem } from '../../store/album/types';\n\ninterface Props {\n  tracklist: Array<TracklistItem>;\n}\n\nconst TracksInAnAlbum: React.FC<Props> = ({ tracklist }) => {\n  if (tracklist === null) {\n    return <span>loading</span>;\n  }\n  return (\n    <React.Fragment>\n      <h4>Tracks</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Track ID#</Table.Cell>\n            <Table.Cell>ARTIST - Track</Table.Cell>\n            <Table.Cell>Track# / Disc#</Table.Cell>\n            <Table.Cell>ISRC</Table.Cell>\n            <Table.Cell>Report occurrence</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {tracklist.map((track) => (\n            <TracksInAnAlbumItem key={track.track_id} track={track} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default TracksInAnAlbum;\n","import axios from 'axios';\nimport {\n  AddTrackToDbType,\n  AddTrackToDbAndReportType,\n  ChangeAlbumParams,\n  ChangeArtistParams,\n  UpdateTrackType,\n  // UpdateTrackFormValuesType,\n} from './types';\nconst baseUrl = '/api/tracks';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// add new track and save it to a report\nconst addNewTrack = async (trackToAdd: AddTrackToDbAndReportType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(\n    `${baseUrl}/addandreport`,\n    trackToAdd,\n    config\n  );\n  return response.data;\n};\n\n// add new track without saving to report\nconst addTrackToDb = async (trackToAdd: AddTrackToDbType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(`${baseUrl}/addtodb`, trackToAdd, config);\n  return response.data;\n};\n\n// add track to album without saving to a report\nconst addTrackToAlbum = async (trackToAdd: AddTrackToDbType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(\n    `${baseUrl}/addtracktoalbum`,\n    trackToAdd,\n    config\n  );\n  return response.data;\n};\n\nconst updateTrack = async (trackToUpdate: UpdateTrackType) => {\n  console.log('track to update at service', trackToUpdate);\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(baseUrl, trackToUpdate, config);\n  return response.data;\n};\n\nconst updateAlbumId = async (albumToUpdate: ChangeAlbumParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/tracks/updatealbum',\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst updateArtistId = async (artistToUpdate: ChangeArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/tracks/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst getOneTrack = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getOneTrackHistory = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/history/${id}`, config);\n  return response.data;\n};\n\nexport default {\n  setToken,\n  addNewTrack,\n  addTrackToAlbum,\n  updateTrack,\n  getOneTrack,\n  getOneTrackHistory,\n  updateAlbumId,\n  updateArtistId,\n  addTrackToDb,\n};\n","import { Dispatch } from 'redux';\nimport {\n  ADD_NEW_TRACK,\n  ADD_TRACK_TO_ALBUM,\n  ADD_TRACK_TO_REPORT,\n  UPDATE_TRACK,\n  SET_LOADING,\n  GET_ONE_TRACK,\n  GET_ONE_TRACK_HISTORY,\n  CLEAR_CURRENT_TRACK,\n  REMOVE_CURRENT_TRACK,\n  CHANGE_ALBUM,\n  CHANGE_ARTIST,\n  MERGE_TRACKS,\n  AddTrackToDbAndReportType,\n  AddTrackToDbType,\n  UpdateTrackType,\n  MergeTrackParamsType,\n  ChangeAlbumParams,\n  ChangeArtistParams,\n  // UpdateTrackFormValuesType,\n  // ADD_TRACK_TO_REPORT\n} from './types';\n\nimport trackService from './services';\nimport searchService from '../search/services';\nimport reportService from '../report/services';\n\n// add a new track and save it to current report\nexport const addNewTrack = (trackToAdd: AddTrackToDbAndReportType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const track = await trackService.addNewTrack(trackToAdd);\n    dispatch({\n      type: ADD_NEW_TRACK,\n      data: track,\n    });\n  } catch (error) {\n    console.log('trackActions addNewTrack error:', error);\n  }\n};\n\n// add a new track to db - not in a report\nexport const addTrackToDb = (trackToAdd: AddTrackToDbType) => async () => {\n  try {\n    await trackService.addTrackToDb(trackToAdd);\n  } catch (error) {\n    console.log('trackActions addTrackToDb error: ', error);\n  }\n};\n\nexport const addTrackToAlbum = (trackToAdd: AddTrackToDbType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    const track = await trackService.addTrackToAlbum(trackToAdd);\n    dispatch({\n      type: ADD_TRACK_TO_ALBUM,\n      data: track,\n    });\n  } catch (error) {\n    console.log('trackactions addTrackToAlbum error: ', error);\n  }\n};\n\nexport const addTrackToAlbumAndReport = (\n  trackToAdd: AddTrackToDbAndReportType\n) => async (dispatch: Dispatch) => {\n  try {\n    const track = await trackService.addTrackToAlbum(trackToAdd);\n    const trackToReport = {\n      track_id: track.track_id,\n      report_id: trackToAdd.report_id,\n      length: trackToAdd.length,\n      sortable_rank: trackToAdd.sortable_rank,\n    };\n    const report = await reportService.addTrackToReport(trackToReport);\n    const trackToReducer = {\n      ...report,\n      ...track,\n    };\n    dispatch({\n      type: ADD_TRACK_TO_ALBUM,\n      data: track,\n    });\n    dispatch({\n      type: ADD_TRACK_TO_REPORT,\n      data: trackToReducer,\n    });\n  } catch (error) {\n    console.log('trackActions addTrackToAlbumAndReport error: ', error);\n  }\n};\n\nexport const updateTrack = (trackToUpdate: UpdateTrackType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    console.log('track to update at action', trackToUpdate);\n    await trackService.updateTrack(trackToUpdate);\n    dispatch({\n      type: UPDATE_TRACK,\n      data: trackToUpdate,\n    });\n  } catch (error) {\n    console.log('trackActions updateTrack error: ', error);\n  }\n};\n\nexport const getOneTrack = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const track = await trackService.getOneTrack(id);\n    dispatch({\n      type: GET_ONE_TRACK,\n      data: track,\n    });\n  } catch (error) {\n    console.log('trackActions getoneTrack error: ', error);\n  }\n};\n\nexport const getOneTrackHistory = (id: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_TRACK,\n    });\n    dispatch({\n      type: SET_LOADING,\n    });\n    const history = await trackService.getOneTrackHistory(id);\n    dispatch({\n      type: GET_ONE_TRACK_HISTORY,\n      data: history,\n    });\n  } catch (error) {\n    console.log('trackActions getOneTrackHistory error: ', error);\n  }\n};\n\nexport const removeCurrentTrack = () => async (dispatch: Dispatch) => {\n  dispatch({\n    type: REMOVE_CURRENT_TRACK,\n  });\n};\n\nexport const mergeTrackFunction = (mergeParams: MergeTrackParamsType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const mergeAction = await searchService.merge(mergeParams);\n    console.log(mergeAction);\n    const track = await trackService.getOneTrack(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_TRACK,\n      data: track,\n    });\n    const history = await trackService.getOneTrackHistory(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_TRACK_HISTORY,\n      data: history,\n    });\n  } catch (error) {\n    console.log('trackActions mergeTracksFunction error:', error);\n  }\n};\n\nexport const changeAlbumId = (albumToUpdate: ChangeAlbumParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const updateAlbum = await trackService.updateAlbumId(albumToUpdate);\n    console.log(updateAlbum);\n    dispatch({\n      type: CHANGE_ALBUM,\n      data: albumToUpdate,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const changeArtistId = (artistToUpdate: ChangeArtistParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const updateArtist = await trackService.updateArtistId(artistToUpdate);\n    console.log(updateArtist);\n    dispatch({\n      type: CHANGE_ARTIST,\n      data: artistToUpdate,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateTrackState = (mergeParams: MergeTrackParamsType) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: MERGE_TRACKS,\n    data: mergeParams,\n  });\n};\n","export const GET_ONE_TRACK = 'GET_ONE_TRACK';\nexport const GET_ONE_TRACK_HISTORY = 'GET_ONE_TRACK_HISTORY';\nexport const CLEAR_CURRENT_TRACK = 'CLEAR_CURRENT_TRACK';\nexport const SET_LOADING = 'SET_LOADING';\nexport const CHANGE_ALBUM = 'CHANGE_ALBUM';\nexport const CHANGE_ARTIST = 'CHANGE_ARTIST';\nexport const ADD_NEW_TRACK = 'ADD_NEW_TRACK';\nexport const ADD_TRACK_TO_ALBUM = 'ADD_TRACK_TO_ALBUM';\nexport const UPDATE_TRACK = 'UPDATE_TRACK';\nexport const REMOVE_CURRENT_TRACK = 'REMOVE_CURRENT_TRACK';\nexport const MERGE_TRACKS = 'MERGE_TRACKS';\nexport const ADD_TRACK_TO_REPORT = 'ADD_TRACK_TO_REPORT';\n\nexport interface Track {\n  track_title: string;\n  artist: string;\n  album: string;\n  track_id: number;\n  album_id: number;\n  artist_id: number;\n  label: string | null;\n  cat_id: string | null;\n  length: number;\n  disc_no: number | null;\n  track_no: number | null;\n  people: string | null;\n  isrc: string | null;\n  year: string | null;\n  comment: string | null;\n  record_country: string | null;\n  country: number;\n}\n\nexport interface AddTrackToDbType {\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | number | null;\n  disc_no: number;\n  track_no: number;\n  length: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n}\n\nexport interface AddTrackToDbAndReportType {\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | number | null;\n  disc_no: number;\n  track_no: number;\n  length: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n  report_id: number | undefined;\n  sortable_rank: number;\n}\n\nexport interface UpdateTrackType {\n  artist_name: string;\n  album_name: string;\n  track_title: string;\n  track_id: number;\n  length: number;\n  country: number;\n  record_country: string | null;\n  people: string | null;\n  disc_no: number | null;\n  track_no: number | null;\n  year: string | number | null | undefined;\n  label: string | null;\n  cat_id: string | null;\n  isrc: string | null;\n  comment: string | null;\n  user_id: number | null | undefined;\n  artist_id: number;\n  album_id: number;\n  sortable_rank: number | null;\n  report_track_id: number | null;\n}\n\nexport interface UpdateTrackFormValuesType {\n  track_title: string;\n  artist: string;\n  album: string;\n  track_id: number;\n  album_id: number;\n  artist_id: number;\n  label: string | null;\n  cat_id: string | null;\n  length: number;\n  minutes: number;\n  seconds: number;\n  disc_no: number | null;\n  track_no: number | null;\n  people: string | null;\n  isrc: string | null;\n  year: string | number | null | undefined;\n  comment: string | null;\n  record_country: string | null;\n  country: number;\n  user_id: number | null | undefined;\n  sortable_rank: number | null;\n  report_track_id: number | null;\n}\n\nexport interface UpdateReportTrackFormValuesType {\n  track_title: string;\n  artist: string;\n  album: string;\n  track_id: number;\n  album_id: number;\n  artist_id: number;\n  label: string | null;\n  cat_id: string | null;\n  length: number;\n  minutes: number;\n  seconds: number;\n  disc_no: number | null;\n  track_no: number | null;\n  people: string | null;\n  isrc: string | null;\n  year: string | number | null | undefined;\n  record_country: string | null;\n  country: number;\n  sortable_rank: number | null;\n  report_track_id: number | null;\n}\n\nexport interface AddNewTrackFormValuesType {\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string;\n  cat_id: string;\n  year: string | number;\n  disc_no: number;\n  track_no: number;\n  minutes: number;\n  seconds: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n}\n\nexport interface AddNewTrackToAlbumFormValuesType {\n  track_title: string;\n  disc_no: number;\n  track_no: number;\n  minutes: number;\n  seconds: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n}\n\nexport interface ChangeAlbumParams {\n  track_id: number;\n  album_id: number;\n  album_name: string;\n}\n\nexport interface ChangeArtistParams {\n  track_id: number;\n  artist_id: number;\n  artist_name: string;\n}\n\nexport interface PlayHistoryEntry {\n  program_name: string;\n  program_id: number;\n  report_id: number;\n  program_date: string;\n  track_id: number;\n  result?: string | null | undefined;\n}\n\nexport interface ChangeArtist {\n  artist_id: number;\n  artist: string;\n}\n\nexport interface ChangeAlbum {\n  album_id: number;\n  album_name: string;\n}\n\nexport interface MergeTrackParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n  newName: string;\n}\n\nexport interface TrackState {\n  currentTrack: Track | null;\n  playHistory: Array<PlayHistoryEntry>;\n  loading: boolean;\n}\n\n// track action types\ninterface GetOneTrackAction {\n  type: typeof GET_ONE_TRACK;\n  data: Track;\n}\n\ninterface UpdateTrackAction {\n  type: typeof UPDATE_TRACK;\n  data: Track;\n}\n\ninterface GetOneTrackHistoryAction {\n  type: typeof GET_ONE_TRACK_HISTORY;\n  data: Array<PlayHistoryEntry>;\n}\n\ninterface ClearCurrentTrackAction {\n  type: typeof CLEAR_CURRENT_TRACK;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface ChangeAlbumAction {\n  type: typeof CHANGE_ALBUM;\n  data: ChangeAlbum;\n}\n\ninterface ChangeArtistAction {\n  type: typeof CHANGE_ARTIST;\n  data: ChangeArtist;\n}\n\nexport type TrackActionTypes =\n  | GetOneTrackAction\n  | GetOneTrackHistoryAction\n  | ClearCurrentTrackAction\n  | SetLoadingAction\n  | ChangeAlbumAction\n  | ChangeArtistAction\n  | UpdateTrackAction;\n","export const INIT_USER_LIST = 'INIT_USER_LIST';\nexport const CREATE_USER = 'CREATE_USER';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USER = 'DELETE_USER';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface User {\n  id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  address?: string;\n  zip?: string;\n  city?: string;\n  country?: string;\n  phone?: string;\n  status: number | null;\n  level: number;\n  last_seen?: string;\n  reset_key?: string;\n  old_id?: number;\n  created_at?: Date;\n  updated_at?: Date;\n}\nexport type Users = Array<User>;\n\nexport interface UserToAdd {\n  username: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport enum UserLevel {\n  'DJ' = 1,\n  'Staff' = 2,\n  'Admin' = 3,\n}\n\nexport type UserLevelOptions = {\n  value: UserLevel;\n  label: string;\n};\n\nexport interface AddUserFormValues {\n  username: string;\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport interface EditUserFormValues {\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  level: number;\n  status: number | null;\n}\n\nexport interface CurrentUserFormValues {\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport interface UserToUpdate {\n  id: number;\n  password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  level: number;\n  status: number | null;\n}\n\nexport interface UserState {\n  users: Users;\n  loading: boolean;\n}\n\n// user action types\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface InitUserListAction {\n  type: typeof INIT_USER_LIST;\n  data: Users;\n}\n\ninterface CreateUser {\n  type: typeof CREATE_USER;\n  data: User;\n}\n\ninterface UpdateUser {\n  type: typeof UPDATE_USER;\n  data: Users;\n}\n\ninterface DeleteUser {\n  type: typeof DELETE_USER;\n  data: number;\n}\n\nexport type UserActionTypes =\n  | SetLoadingAction\n  | InitUserListAction\n  | CreateUser\n  | UpdateUser\n  | DeleteUser;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  TextField,\n  NumberField,\n  SelectField,\n  TextAreaField,\n} from '../../layout/forms/FormFields';\nimport { countryOptions, recordCountryOptions } from '../../../constants';\n\nimport { AddNewTrackToAlbumFormValuesType } from '../../../store/track/types';\nimport { Album } from '../../../store/album/types';\nimport { ReportDetails } from '../../../store/report/types';\n\ninterface Props {\n  onSubmit: (values: AddNewTrackToAlbumFormValuesType) => void;\n  addToAlbumAndReport: (values: AddNewTrackToAlbumFormValuesType) => void;\n  onClose: () => void;\n  currentAlbum: Album;\n  reportDetails: ReportDetails | null;\n}\n\nconst AddTrackToAlbumForm: React.FC<Props> = ({\n  reportDetails,\n  addToAlbumAndReport,\n  onSubmit,\n  onClose,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        track_title: '',\n        disc_no: 1,\n        track_no: 1,\n        minutes: 0,\n        seconds: 0,\n        country: 1,\n        record_country: '',\n        people: '',\n        comment: '',\n        isrc: '',\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isValid, dirty }) => {\n        let saveButton;\n        if (reportDetails !== null) {\n          saveButton = (\n            <React.Fragment>\n              <Grid.Column width={6}>\n                <Button\n                  disabled={!isValid || !dirty}\n                  color='green'\n                  onClick={() => addToAlbumAndReport}\n                >\n                  {`Add track to album and report ${reportDetails.program_name} ${reportDetails.program_date}`}\n                </Button>\n              </Grid.Column>\n              <Grid.Column width={6}>\n                <Button\n                  disabled={!isValid || !dirty}\n                  type='submit'\n                  color='blue'\n                >\n                  Add track to album\n                </Button>\n              </Grid.Column>\n            </React.Fragment>\n          );\n        } else {\n          saveButton = (\n            <Grid.Column width={6}>\n              <Button disabled={!isValid || !dirty} color='blue' type='submit'>\n                Add track to album\n              </Button>\n            </Grid.Column>\n          );\n        }\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Track title'\n              placeholder='Track title...'\n              name='track_title'\n              component={TextField}\n            />\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - minutes'\n                  name='minutes'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - seconds'\n                  name='seconds'\n                  component={NumberField}\n                  min={0}\n                  max={59}\n                />\n              </Grid.Column>\n            </Grid>\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Track #'\n                  name='track_no'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Disc #'\n                  name='disc_no'\n                  component={NumberField}\n                  min={0}\n                  max={99}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Country'\n                  name='country'\n                  options={countryOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Recorded in'\n                  name='record_country'\n                  options={recordCountryOptions}\n                />\n              </Grid.Column>\n            </Grid>\n            <Field\n              label='Composers - one per line'\n              placeholder='LAST NAME FIRST NAME'\n              name='people'\n              component={TextAreaField}\n            />\n            <Field\n              label='Comment'\n              placeholder='Any additional information'\n              name='comment'\n              component={TextField}\n            />\n            <Grid>\n              {saveButton}\n              <Grid.Column floated='right' width={6}>\n                <Button\n                  floated='right'\n                  type='button'\n                  onClick={onClose}\n                  color='red'\n                >\n                  Cancel\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddTrackToAlbumForm;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Header, Button, Icon } from 'semantic-ui-react';\nimport {\n  addTrackToAlbum,\n  addTrackToAlbumAndReport,\n} from '../../../store/track/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { AddNewTrackToAlbumFormValuesType } from '../../../store/track/types';\nimport { Album } from '../../../store/album/types';\nimport { ReportState } from '../../../store/report/types';\n\nimport AddTrackToAlbumForm from './AddTrackToAlbumForm';\n\ninterface Props {\n  currentAlbum: Album;\n  report: ReportState;\n}\n\nconst AddTrackToAlbum: React.FC<Props> = ({ currentAlbum, report }) => {\n  const dispatch = useDispatch();\n  console.log('album at album details', currentAlbum);\n  console.log('report at album details', report);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const handleAddToAlbumClick = (values: AddNewTrackToAlbumFormValuesType) => {\n    const length = Number(values.minutes) * 60 + Number(values.seconds);\n    let regexPeople;\n    if (values.people) {\n      regexPeople = `| ${values.people.replace(/\\n/g, ' | ')} |`;\n    } else {\n      regexPeople = null;\n    }\n    console.log(values);\n    const trackToAdd = {\n      track_title: values.track_title,\n      artist_name: currentAlbum.artist_name,\n      album_name: currentAlbum.album_name,\n      album_id: currentAlbum.album_id,\n      artist_id: currentAlbum.artist_id,\n      length,\n      country: values.country,\n      cat_id: currentAlbum.cat_id,\n      label: currentAlbum.label,\n      year: currentAlbum.year,\n      record_country: values.record_country,\n      people: regexPeople,\n      disc_no: Number(values.disc_no),\n      track_no: Number(values.track_no),\n      isrc: values.isrc,\n      comment: values.comment,\n    };\n    console.log(trackToAdd);\n    dispatch(addTrackToAlbum(trackToAdd));\n    dispatch(\n      setNotification(\n        `${values.track_title} added to ${currentAlbum.album_name}`,\n        'success'\n      )\n    );\n    handleClose();\n  };\n\n  const handleAddToAlbumAndReportClick = (\n    values: AddNewTrackToAlbumFormValuesType\n  ) => {\n    const length = Number(values.minutes) * 60 + Number(values.seconds);\n    let regexPeople;\n    if (values.people) {\n      regexPeople = `| ${values.people.replace(/\\n/g, ' | ')} |`;\n    } else {\n      regexPeople = null;\n    }\n    console.log(values);\n    const trackToAdd = {\n      track_title: values.track_title,\n      artist_name: currentAlbum.artist_name,\n      album_name: currentAlbum.album_name,\n      album_id: currentAlbum.album_id,\n      artist_id: currentAlbum.artist_id,\n      length,\n      country: values.country,\n      cat_id: currentAlbum.cat_id,\n      label: currentAlbum.label,\n      year: currentAlbum.year,\n      record_country: values.record_country,\n      people: regexPeople,\n      disc_no: Number(values.disc_no),\n      track_no: Number(values.track_no),\n      isrc: values.isrc,\n      comment: values.comment,\n      report_id: report.reportDetails?.id,\n      sortable_rank: report.report.length + 1,\n    };\n    console.log('add to album and', trackToAdd);\n    dispatch(addTrackToAlbumAndReport(trackToAdd));\n    dispatch(\n      setNotification(\n        `${values.track_title} added to ${currentAlbum.album_name} and to ${report.reportDetails?.program_name} ${report.reportDetails?.program_date}`,\n        'success'\n      )\n    );\n    handleClose();\n  };\n  return (\n    <Modal\n      trigger={\n        <Button\n          style={{ marginBottom: '0.5rem' }}\n          onClick={handleOpen}\n          floated='right'\n          color='green'\n        >\n          <Icon name='add' />\n          Add a track to the album\n        </Button>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Modal.Content>\n        <Header content={`Add a track to album ${currentAlbum.album_name}`} />\n        <AddTrackToAlbumForm\n          onClose={handleClose}\n          onSubmit={handleAddToAlbumClick}\n          reportDetails={report.reportDetails}\n          currentAlbum={currentAlbum}\n          addToAlbumAndReport={handleAddToAlbumAndReportClick}\n        />\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default AddTrackToAlbum;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport { getOneAlbum, updateAlbum } from '../../store/album/actions';\nimport { setNotification } from '../../store/notification/actions';\nimport AlbumDetailsForm from './AlbumDetailsForm';\nimport TracksInAnAlbum from './TracksInAnAlbum';\nimport AddTrackToAlbum from './AddTrackToAlbum';\nimport { ApplicationState } from '../../store/types';\nimport { UpdateAlbumParams } from '../../store/album/types';\n\ninterface Props {\n  id: number;\n}\n\nconst Album: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  const album = useSelector((state: ApplicationState) => state.album);\n  const report = useSelector((state: ApplicationState) => state.report);\n\n  useEffect(() => {\n    dispatch(getOneAlbum(id));\n    // eslint-disable-next-line\n  }, [id]);\n\n  if (album.currentAlbum === null) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  const updateAlbumDetails = (values: UpdateAlbumParams) => {\n    const albumToUpdate = {\n      ...values,\n      year: values.year.toString(),\n    };\n    dispatch(updateAlbum(albumToUpdate));\n    dispatch(setNotification(`Artist ${values.name} updated!`, 'success'));\n  };\n\n  return (\n    <Container>\n      <AddTrackToAlbum currentAlbum={album.currentAlbum} report={report} />\n      <AlbumDetailsForm\n        onSubmit={updateAlbumDetails}\n        currentAlbum={album.currentAlbum}\n      />\n      <TracksInAnAlbum tracklist={album.tracklist} />\n    </Container>\n  );\n};\n\nexport default Album;\n","import { Dispatch } from 'redux';\nimport {\n  GET_ONE_ALBUM,\n  GET_TRACKLIST_OF_ALBUM,\n  CLEAR_CURRENT_ALBUM,\n  MERGE_ALBUMS,\n  CHANGE_ARTIST_OF_ALBUM,\n  SET_LOADING,\n  UpdateAlbumParams,\n  MergeAlbumsParams,\n  ChangeArtistParams,\n} from './types';\nimport albumService from './services';\nimport searchService from '../search/services';\n\nexport const getOneAlbum = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_ALBUM,\n    });\n    dispatch({\n      type: SET_LOADING,\n    });\n    const album = await albumService.getOneAlbum(id);\n    console.log('albumactions getonealbum', album);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: album,\n    });\n    const tracklist = await albumService.getTracklistOfAlbum(id);\n    dispatch({\n      type: GET_TRACKLIST_OF_ALBUM,\n      data: tracklist,\n    });\n  } catch (error) {\n    console.log('albumActions getOneAlbum error:', error);\n  }\n};\n\nexport const updateAlbum = (albumToUpdate: UpdateAlbumParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await albumService.updateAlbum(albumToUpdate);\n    const updatedAlbum = await albumService.getOneAlbum(albumToUpdate.id);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: updatedAlbum,\n    });\n  } catch (error) {\n    console.log('albumActions updateAlbum error:', error);\n  }\n};\n\nexport const mergeAlbumFunction = (mergeParams: MergeAlbumsParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await searchService.merge(mergeParams);\n    const album = await albumService.getOneAlbum(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: album,\n    });\n    const tracklist = await albumService.getTracklistOfAlbum(\n      mergeParams.mergeTo\n    );\n    dispatch({\n      type: GET_TRACKLIST_OF_ALBUM,\n      data: tracklist,\n    });\n  } catch (error) {\n    console.log('albumActions mergeAlbumsFunction error:', error);\n  }\n};\n\nexport const updateAlbumState = (mergeParams: MergeAlbumsParams) => (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: MERGE_ALBUMS,\n    data: mergeParams,\n  });\n};\n\nexport const updateArtistId = (artistToUpdate: ChangeArtistParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await albumService.changeArtistId(artistToUpdate);\n    dispatch({\n      type: CHANGE_ARTIST_OF_ALBUM,\n      data: artistToUpdate,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export const GET_ONE_ALBUM = 'GET_ONE_ALBUM';\nexport const ADD_TRACK_TO_ALBUM = 'ADD_TRACK_TO_ALBUM';\nexport const GET_TRACKLIST_OF_ALBUM = 'GET_TRACKLIST_OF_ALBUM';\nexport const CLEAR_CURRENT_ALBUM = 'CLEAR_CURRENT_ALBUM';\nexport const SET_LOADING = 'SET_LOADING';\nexport const CHANGE_ARTIST_OF_ALBUM = 'CHANGE_ARTIST_OF_ALBUM';\nexport const MERGE_ALBUMS = 'MERGE_ALBUMS';\n\nexport interface Album {\n  album_name: string;\n  album_id: number;\n  label: string | null;\n  cat_id: string | null;\n  spotify_id: string | null;\n  year: string | null;\n  artist_name: string;\n  artist_id: number;\n}\n\nexport interface TracklistItem {\n  track_id: number;\n  isrc: string | null;\n  disc_no: number | null;\n  track_no: number | null;\n  track_title: string;\n  artist_name: string;\n  report_occurrence: number;\n  length: number;\n}\n\nexport interface AlbumState {\n  currentAlbum: Album | null;\n  tracklist: Array<TracklistItem>;\n  loading: boolean;\n}\n\nexport interface MergeAlbumsParams {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface UpdateAlbumParams {\n  id: number;\n  name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | number;\n  spotify_id: string | null;\n}\n\nexport interface ChangeArtistParams {\n  album_id: number;\n  artist_id: number;\n  artist_name: string;\n}\n\n// album action types\ninterface GetOneAlbumAction {\n  type: typeof GET_ONE_ALBUM;\n  data: Album;\n}\n\ninterface GetTracklistAction {\n  type: typeof GET_TRACKLIST_OF_ALBUM;\n  data: Array<TracklistItem>;\n}\n\ninterface AddTrackToAlbumAction {\n  type: typeof ADD_TRACK_TO_ALBUM;\n  data: TracklistItem;\n}\n\ninterface ClearCurrentAlbumAction {\n  type: typeof CLEAR_CURRENT_ALBUM;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface ChangeArtistOfAlbumAction {\n  type: typeof CHANGE_ARTIST_OF_ALBUM;\n  data: ChangeArtistParams;\n}\n\nexport type AlbumActionTypes =\n  | GetOneAlbumAction\n  | GetTracklistAction\n  | AddTrackToAlbumAction\n  | ClearCurrentAlbumAction\n  | SetLoadingAction\n  | ChangeArtistOfAlbumAction;\n","import axios from 'axios';\nimport { UpdateArtistParams } from './types';\n\nconst baseUrl = '/api/artists';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get artist details\nconst getOneArtist = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getAlbumsByArtist = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/albumsby/${id}`, config);\n  return response.data;\n};\n\nconst updateArtist = async (artistToUpdate: UpdateArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/details/${artistToUpdate.id}`,\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateArtist,\n  getOneArtist,\n  getAlbumsByArtist,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\n// import MergeAlbumsModal from './MergeAlbumsModal';\n\nimport { AlbumListItem } from '../../store/artist/types';\n\ninterface Props {\n  album: AlbumListItem;\n}\n\nconst AlbumsByArtistItem: React.FC<Props> = ({ album }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>\n        {/* <MergeAlbumsModal album_name={album.name} album_id={album.album_id} /> */}\n        merge albums modal here\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`/album/${album.album_id}`}>{album.name}</Link>\n      </Table.Cell>\n      <Table.Cell>{album.identifier}</Table.Cell>\n      <Table.Cell>{album.track_count}</Table.Cell>\n      <Table.Cell>{album.report_occurrence}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default AlbumsByArtistItem;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport AlbumsByArtistItem from './AlbumsByArtistItem';\nimport { AlbumListItem } from '../../store/artist/types';\n\ninterface Props {\n  albumList: Array<AlbumListItem>;\n}\n\nconst AlbumsByArtist: React.FC<Props> = ({ albumList }) => {\n  if (albumList === null) {\n    return <span>loading</span>;\n  }\n  return (\n    <React.Fragment>\n      <h4>Albums</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>ID#</Table.Cell>\n            <Table.Cell>Album name</Table.Cell>\n            <Table.Cell>Catalog ID</Table.Cell>\n            <Table.Cell>Tracks</Table.Cell>\n            <Table.Cell>Report occurrence</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {albumList.map((album) => (\n            <AlbumsByArtistItem key={album.album_id} album={album} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default AlbumsByArtist;\n","import React from 'react';\nimport { Button, Grid, Dimmer, Loader, Header } from 'semantic-ui-react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from '../layout/forms/FormFields';\nimport { Artist, UpdateArtistParams } from '../../store/artist/types';\n\ninterface Props {\n  currentArtist: Artist;\n  onSubmit: (values: UpdateArtistParams) => void;\n}\n\nconst ArtistDetailsForm: React.FC<Props> = ({ currentArtist, onSubmit }) => {\n  if (currentArtist === null) {\n    return (\n      <Dimmer>\n        <Loader>Loading artist...</Loader>\n      </Dimmer>\n    );\n  }\n\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Header>Artist info</Header>\n        <Formik\n          initialValues={{\n            id: currentArtist.id,\n            name: currentArtist.name,\n            spotify_id: currentArtist.spotify_id || '',\n          }}\n          onSubmit={onSubmit}\n          validate={(values) => {\n            const requiredError = 'Artist name is required';\n            const errors: { [field: string]: string } = {};\n            if (!values.name) {\n              errors.name = requiredError;\n            }\n            return errors;\n          }}\n        >\n          {({ isValid }) => {\n            return (\n              <Form className='form ui'>\n                <Field\n                  label='Artist name'\n                  placeholder='Name'\n                  name='name'\n                  component={TextField}\n                />\n                <Field\n                  label='Spotify id'\n                  placeholder='Spotify id'\n                  name='spotify_id'\n                  component={TextField}\n                />\n                <Button\n                  type='submit'\n                  floated='left'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update artist\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ArtistDetailsForm;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport { getOneArtist } from '../../store/artist/actions';\nimport { updateArtist } from '../../store/artist/actions';\nimport { setNotification } from '../../store/notification/actions';\nimport AlbumsByArtist from './AlbumsByArtist';\nimport ArtistDetailsForm from './ArtistDetailsForm';\n\nimport { ApplicationState } from '../../store/types';\nimport { UpdateArtistParams } from '../../store/artist/types';\n\ninterface Props {\n  id: number;\n}\n\nconst Artist: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  const artist = useSelector((state: ApplicationState) => state.artist);\n\n  useEffect(() => {\n    dispatch(getOneArtist(id));\n    // eslint-disable-next-line\n  }, [id]);\n\n  const updateArtistDetails = (values: UpdateArtistParams) => {\n    dispatch(updateArtist(values));\n    dispatch(setNotification(`Artist ${values.name} updated!`, 'success'));\n  };\n\n  if (artist.currentArtist === null) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <ArtistDetailsForm\n        currentArtist={artist.currentArtist}\n        onSubmit={updateArtistDetails}\n      />\n      <AlbumsByArtist albumList={artist.albumList} />\n    </Container>\n  );\n};\n\nexport default Artist;\n","import { Dispatch } from 'redux';\nimport {\n  GET_ONE_ARTIST,\n  SET_LOADING,\n  GET_ALBUM_LIST_BY_ARTIST,\n  CLEAR_CURRENT_ARTIST,\n  MERGE_ARTISTS,\n  UpdateArtistParams,\n  MergeArtistsParams,\n} from './types';\nimport artistService from './services';\nimport searchService from '../search/services';\n\nexport const getOneArtist = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_ARTIST,\n    });\n    dispatch({\n      type: SET_LOADING,\n    });\n    const artist = await artistService.getOneArtist(id);\n    dispatch({\n      type: GET_ONE_ARTIST,\n      data: artist,\n    });\n    const albumList = await artistService.getAlbumsByArtist(id);\n    dispatch({\n      type: GET_ALBUM_LIST_BY_ARTIST,\n      data: albumList,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateArtist = (artistToUpdate: UpdateArtistParams) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: SET_LOADING,\n  });\n  await artistService.updateArtist(artistToUpdate);\n  const updatedArtist = await artistService.getOneArtist(artistToUpdate.id);\n  dispatch({\n    type: GET_ONE_ARTIST,\n    data: updatedArtist,\n  });\n};\n\nexport const mergeArtistFunction = (mergeParams: MergeArtistsParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await searchService.merge(mergeParams);\n    const artist = await artistService.getOneArtist(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_ARTIST,\n      data: artist,\n    });\n    const albumList = await artistService.getAlbumsByArtist(\n      mergeParams.mergeTo\n    );\n    dispatch({\n      type: GET_ALBUM_LIST_BY_ARTIST,\n      data: albumList,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateArtistState = (mergeParams: MergeArtistsParams) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: MERGE_ARTISTS,\n    data: mergeParams,\n  });\n};\n","export const GET_ONE_ARTIST = 'GET_ONE_ARTIST';\nexport const GET_ALBUM_LIST_BY_ARTIST = 'GET_ALBUM_LIST_BY_ARTIST';\nexport const CLEAR_CURRENT_ARTIST = 'CLEAR_CURRENT_ARTIST';\nexport const MERGE_ARTISTS = 'MERGE_ARTISTS';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Artist {\n  id: number;\n  name: string;\n  spotify_id: string | null;\n  old_id: number | null;\n  user_id: number | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AlbumListItem {\n  album_id: number;\n  artist_id: number;\n  name: string;\n  identifier: string | null;\n  artist_name: string;\n  artist_spotify_id: string | null;\n  track_count: number;\n  report_occurrence: number;\n}\n\nexport interface UpdateArtistParams {\n  id: number;\n  name: string;\n  spotify_id: string | null;\n}\n\nexport interface MergeArtistsParams {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface ArtistState {\n  currentArtist: Artist | null;\n  albumList: Array<AlbumListItem>;\n  loading: boolean;\n}\n\n// artist action types\ninterface GetOneArtistAction {\n  type: typeof GET_ONE_ARTIST;\n  data: Artist;\n}\n\ninterface GetAlbumListByArtistAction {\n  type: typeof GET_ALBUM_LIST_BY_ARTIST;\n  data: Array<AlbumListItem>;\n}\n\ninterface ClearCurrentArtistAction {\n  type: typeof CLEAR_CURRENT_ARTIST;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ArtistActionTypes =\n  | GetOneArtistAction\n  | GetAlbumListByArtistAction\n  | ClearCurrentArtistAction\n  | SetLoadingAction;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div\n      style={{ marginTop: '5rem', marginBottom: '2rem', textAlign: 'center' }}\n    >\n      <br />\n      <em>\n        {' '}\n        &copy; {new Date().getFullYear()}{' '}\n        <a\n          href='https://www.teemukostamo.com'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          {' '}\n          Teemu Kostamo{' '}\n        </a>{' '}\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field } from 'formik';\nimport { Datepicker } from 'react-formik-ui';\nimport { Button, Grid, Popup, Icon } from 'semantic-ui-react';\nimport {\n  SelectField,\n  TextField,\n  NumberField,\n  SelectFieldOptions,\n} from '../../layout/forms/FormFields';\nimport { startTimeOptions, endTimeOptions } from '../../../constants';\nimport { CreateNewReportFormTypes } from '../../../store/report/types';\nimport { CurrentUser } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: CreateNewReportFormTypes) => void;\n  currentUser: CurrentUser | null;\n  programOptions: Array<SelectFieldOptions>;\n}\n\nconst CreateNewReportForm: React.FC<Props> = ({\n  onSubmit,\n  currentUser,\n  programOptions,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        program_name: '',\n        program_no: 0,\n        program_dj: `${currentUser?.first_name} ${currentUser?.last_name}`,\n        program_date: moment(new Date()).format('YYYY-MM-DD'),\n        program_start_time: '',\n        program_end_time: '',\n        program_id: 0,\n        rerun: null,\n        status: 0,\n        user_id: currentUser?.id || 0,\n        username: currentUser?.username || '',\n        first_name: currentUser?.first_name || '',\n        last_name: currentUser?.last_name || '',\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        console.log(values);\n        const requiredError = 'Field is required';\n        const invalidTimeError = 'Check start and end times!';\n        const errors: { [field: string]: string } = {};\n        if (!values.program_dj) {\n          errors.program_dj = requiredError;\n        }\n        if (values.program_start_time === '') {\n          errors.program_start_time = requiredError;\n        }\n        if (values.program_end_time === '') {\n          errors.program_end_time = requiredError;\n        }\n\n        if (\n          parseInt(values.program_end_time) <=\n            parseInt(values.program_start_time) &&\n          values.program_end_time !== '23:59'\n        ) {\n          errors.program_end_time = invalidTimeError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <label style={{ fontWeight: 'bold' }}>\n              Program{' '}\n              <Popup\n                trigger={\n                  <Icon style={{ display: 'inline' }} name='question circle' />\n                }\n                content='Select your program from the list. Contact staff if your program is not on the list'\n                style={labelStyle}\n                inverted\n              />\n            </label>\n            <SelectField label='' name='program_id' options={programOptions} />\n            <label style={{ fontWeight: 'bold' }}>\n              Program number{' '}\n              <Popup\n                trigger={\n                  <Icon style={{ display: 'inline' }} name='question circle' />\n                }\n                content='Three digit number can be found on the weekly programming schedule. Insert zero if you do not know the number  '\n                style={labelStyle}\n                inverted\n              />\n            </label>\n            <Field\n              label=''\n              name='program_no'\n              component={NumberField}\n              min={0}\n              max={999}\n            />\n            <Field\n              label='DJ'\n              placeholder='DJ'\n              name='program_dj'\n              component={TextField}\n            />\n            <Grid>\n              <Grid.Column width={5} style={{ marginTop: '0.3rem' }}>\n                <label style={{ fontWeight: 'bold' }}>Program date</label>\n                <Datepicker\n                  name='program_date'\n                  dateFormat='dd.MM.yyyy'\n                  placeholder='dd.mm.yyyy'\n                />{' '}\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <SelectField\n                  label='Start time'\n                  name='program_start_time'\n                  options={startTimeOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <SelectField\n                  label='End time'\n                  name='program_end_time'\n                  options={endTimeOptions}\n                />\n              </Grid.Column>\n            </Grid>\n            <Button\n              style={{ marginTop: '1rem' }}\n              type='submit'\n              floated='left'\n              color='green'\n              disabled={!isValid || !dirty}\n            >\n              Create report\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nconst labelStyle = {\n  borderRadius: 0,\n  display: 'block',\n  opacity: 0.9,\n  padding: '2em',\n};\n\nexport default CreateNewReportForm;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Header, Container, Grid } from 'semantic-ui-react';\nimport CreateNewReportForm from './CreateNewReportForm';\nimport { createReport } from '../../../store/report/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { ApplicationState } from '../../../store/types';\nimport { CreateNewReportFormTypes } from '../../../store/report/types';\n\nconst CreateNewReport: React.FC = () => {\n  const [redirect, setRedirect] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const program = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const report = useSelector((state: ApplicationState) => state.report);\n\n  const programOptions = program.activePrograms.map((program) => ({\n    key: program.id,\n    label: program.name,\n    value: program.id,\n  }));\n\n  const submitNewReport = (values: CreateNewReportFormTypes) => {\n    console.log('submit new report values', values);\n    const reportToCreate = {\n      ...values,\n      program_id: Number(values.program_id),\n      program_name: program.activePrograms.find(\n        (pgm) => pgm.id === Number(values.program_id)\n      )?.name,\n    };\n    console.log('report to create values', reportToCreate);\n    dispatch(\n      setNotification(\n        `Created new report for the program ${reportToCreate.program_name} `,\n        'success'\n      )\n    );\n    setRedirect(true);\n    dispatch(createReport(reportToCreate));\n  };\n\n  if (redirect && report.newReport !== null) {\n    return <Redirect to={`reports/${report.newReport.id}`} />;\n  }\n\n  return (\n    <Grid.Column>\n      <Container>\n        <Header>Create a new report</Header>\n        <CreateNewReportForm\n          onSubmit={submitNewReport}\n          currentUser={login.currentUser}\n          programOptions={programOptions}\n        />\n      </Container>\n    </Grid.Column>\n  );\n};\n\nexport default CreateNewReport;\n","import axios from 'axios';\nimport download from 'downloadjs';\nimport { ReportTransferParams } from './types';\n\nconst baseUrl = '/api/reportslist';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get a list of reports by date\nconst getAllByDate = async (date: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/date/${date}`, config);\n  return request.data;\n};\n\n// get all by month and by user\nconst getAllByDateByUser = async (date: string, user: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `${baseUrl}/all?date=${date}&user=${user}`,\n    config\n  );\n  return request.data;\n};\n\n// get all in progress reports of one user\nconst getAllInProgress = async (id: number | undefined) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/user/${id}`, config);\n  return request.data;\n};\n\nconst getAllTransfers = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get('/api/reporttransfer', config);\n  return request.data;\n};\n\nconst deleteReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/${id}`, {}, config);\n  return request.data;\n};\n\n// generate text file for download\nconst generateReportDownload = async (params: ReportTransferParams) => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' },\n    };\n    const request = await axios.post('/api/reporttransfer', params, config);\n    return request.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// download report\nexport const downloadReport = async (filename: string) => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' },\n    };\n    const response = await axios.get(`/api/reporttransfer/${filename}`, config);\n    download(response.data, filename);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default {\n  setToken,\n  deleteReport,\n  getAllByDate,\n  getAllByDateByUser,\n  getAllInProgress,\n  getAllTransfers,\n  generateReportDownload,\n  downloadReport,\n};\n","import { Dispatch } from 'redux';\nimport {\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  SET_LOADING,\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  CLEAR_CURRENT_REPORT,\n  DELETE_REPORT,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT,\n  ReportTransferParams,\n  DeleteInProgressReportParams,\n} from './types';\n\nimport reportListService from './services';\n\n// get a list of report transfers by date\nexport const getAllTransfers = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const reports = await reportListService.getAllTransfers();\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllTransfers error', error);\n  }\n};\n\nexport const generateReportTransfer = (params: ReportTransferParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const transferredReport = await reportListService.generateReportDownload(\n      params\n    );\n    const reports = await reportListService.getAllTransfers();\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports,\n    });\n    dispatch({\n      type: GENERATE_REPORT_TRANSFER,\n      data: transferredReport,\n    });\n  } catch (error) {\n    console.log('reportListActions generateReportTransferError', error);\n  }\n};\n\n// get a list of reports by date\nexport const getAllReportsByDate = (date: string) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllByDate(date);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllReportsByDate error', error);\n  }\n};\n\n// get a list of reports by date by user\nexport const getAllReportsByDateByUser = (date: string, user: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllByDateByUser(date, user);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllReportsByDateByUser error', error);\n  }\n};\n\n// get all in progress by current user for front page\nexport const getAllInProgress = (id: number | undefined) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllInProgress(id);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllInProgressReports error', error);\n  }\n};\n\nexport const deleteInProgressReport = (\n  params: DeleteInProgressReportParams\n) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportListService.deleteReport(params.report_id);\n    const reports = await reportListService.getAllInProgress(params.user_id);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteReport = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportListService.deleteReport(id);\n    dispatch({\n      type: DELETE_REPORT,\n      data: id,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const filterByUserId = (id: number | null) => (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_USER_ID,\n    data: id,\n  });\n};\n\nexport const filterByStatus = (status: number | null) => (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: FILTER_BY_STATUS,\n    data: status,\n  });\n};\n\nexport const filterByText = (text: string) => async (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_TEXT,\n    data: text,\n  });\n};\n","export const GET_ALL_REPORTS_BY_DATE = 'GET_ALL_REPORTS_BY_DATE';\nexport const GET_ALL_IN_PROGRESS = 'GET_ALL_IN_PROGRESS';\nexport const GET_ALL_REPORT_TRANSFERS = 'GET_ALL_REPORT_TRANSFERS';\nexport const GENERATE_REPORT_TRANSFER = 'GENERATE_REPORT_TRANSFER';\nexport const FILTER_BY_USER_ID = 'FILTER_BY_USER_ID';\nexport const FILTER_BY_STATUS = 'FILTER_BY_STATUS';\nexport const FILTER_BY_TEXT = 'FILTER_BY_TEXT';\nexport const DELETE_REPORT = 'DELETE_REPORT';\nexport const CLEAR_CURRENT_REPORT = 'CLEAR_CURRENT_REPORT';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Report {\n  program_no: number | null;\n  name: string;\n  program_date: string;\n  program_start_time: string;\n  program_end_time: string;\n  status: number;\n  rerun: number | null;\n  program_dj: string;\n  id: number;\n  user_id: number;\n}\n\nexport interface ReportTransfer {\n  id: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n  status: number;\n  filename: string;\n  period: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ReportListState {\n  inProgress: Array<Report>;\n  reportList: Array<Report>;\n  reportListDate: string | null;\n  reportTransferList: Array<ReportTransfer>;\n  lastTransfer: ReportTransfer | null;\n  filterStatusValue: number | null;\n  filterUserValue: number | null;\n  filterByText: string;\n  error: string | null;\n  loading: boolean;\n}\n\nexport interface ReportTransferParams {\n  user_id: number;\n  status: number;\n  period: string;\n  filename: string;\n}\n\nexport interface DeleteInProgressReportParams {\n  report_id: number;\n  user_id: number | undefined;\n}\n\n// reportlist action types\ninterface GetAllReportsByDateAction {\n  type: typeof GET_ALL_REPORTS_BY_DATE;\n  data: Array<Report>;\n  date: string;\n}\n\ninterface GetAllInProgressAction {\n  type: typeof GET_ALL_IN_PROGRESS;\n  data: Array<Report>;\n}\n\ninterface GetAllReportTransfersAction {\n  type: typeof GET_ALL_REPORT_TRANSFERS;\n  data: Array<ReportTransfer>;\n}\n\ninterface GenerateReportTransferAction {\n  type: typeof GENERATE_REPORT_TRANSFER;\n  data: ReportTransfer;\n}\n\ninterface FilterByUserIdAction {\n  type: typeof FILTER_BY_USER_ID;\n  data: number;\n}\n\ninterface FilterByStatusAction {\n  type: typeof FILTER_BY_STATUS;\n  data: number;\n}\n\ninterface FilterByTextAction {\n  type: typeof FILTER_BY_TEXT;\n  data: string;\n}\n\ninterface DeleteReportAction {\n  type: typeof DELETE_REPORT;\n  data: number;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ReportListActionTypes =\n  | GetAllReportsByDateAction\n  | GetAllInProgressAction\n  | GetAllReportTransfersAction\n  | GenerateReportTransferAction\n  | FilterByUserIdAction\n  | FilterByStatusAction\n  | FilterByTextAction\n  | DeleteReportAction\n  | SetLoadingAction;\n\nexport interface ReportListSelectionDate {\n  reportYear: string;\n  reportMonth: string;\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { Table, Icon, Confirm } from 'semantic-ui-react';\nimport { deleteInProgressReport } from '../../store/reportList/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nimport { Report } from '../../store/reportList/types';\nimport { ApplicationState } from '../../store/types';\n\ninterface Props {\n  report: Report;\n}\n\nconst InProgressReportListItem: React.FC<Props> = ({ report }) => {\n  const dispatch = useDispatch();\n  const login = useSelector((state: ApplicationState) => state.login);\n  const [open, setOpen] = useState(false);\n\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n\n  const confirmDelete = () => {\n    setOpen(false);\n    const params = {\n      report_id: report.id,\n      user_id: login.currentUser?.id,\n    };\n    dispatch(deleteInProgressReport(params));\n    dispatch(\n      setNotification(\n        `${report.name} ${report.program_date} poistettu!`,\n        'success'\n      )\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Table.Row>\n        <Table.Cell>\n          <Link to={`reports/${report.id}`}>{report.name}</Link>\n        </Table.Cell>\n        <Table.Cell>\n          {moment(report.program_date).format('DD.MM.YYYY')}\n        </Table.Cell>\n        <Table.Cell>{report.program_no}</Table.Cell>\n        <Table.Cell>\n          {' '}\n          <Icon color='red' onClick={() => setOpen(true)} name='delete' />\n          <Confirm\n            content={`Are you sure you wish to delete ${report.name} ${report.program_date}`}\n            open={open}\n            onCancel={cancelDelete}\n            onConfirm={confirmDelete}\n            cancelButton='Nope'\n            confirmButton='Sure'\n          />\n        </Table.Cell>\n      </Table.Row>\n    </React.Fragment>\n  );\n};\n\nexport default InProgressReportListItem;\n","import React from 'react';\nimport { Table, Grid, Container, Header } from 'semantic-ui-react';\nimport InProgressReportListItem from './InProgressReportListItem';\nimport { Report } from '../../store/reportList/types';\n\ninterface Props {\n  inProgress: Array<Report>;\n}\n\nconst InProgressReportList: React.FC<Props> = ({ inProgress }) => {\n  if (inProgress === null) {\n    return null;\n  }\n\n  if (inProgress.length === 0) {\n    return (\n      <Grid.Column>\n        <Container>\n          <h3>Reports in progress</h3>\n          no reports in progress\n        </Container>\n      </Grid.Column>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Grid.Column>\n        <Container>\n          <Header>Reports in progress</Header>\n          <Table striped>\n            <Table.Header>\n              <Table.Row>\n                <Table.Cell>Program name</Table.Cell>\n                <Table.Cell>Date</Table.Cell>\n                <Table.Cell>Number</Table.Cell>\n                <Table.Cell></Table.Cell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {inProgress.map((r) => (\n                <InProgressReportListItem key={r.id} report={r} />\n              ))}\n            </Table.Body>\n          </Table>\n        </Container>\n      </Grid.Column>\n    </React.Fragment>\n  );\n};\n\nexport default InProgressReportList;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Grid, Dimmer, Loader } from 'semantic-ui-react';\nimport CreateNewReport from '../../report/CreateNewReport';\nimport InProgressReportsList from '../../reportList/InProgressReportList';\nimport { getAllInProgress } from '../../../store/reportList/actions';\n\nimport { ApplicationState } from '../../../store/types';\n\nconst Home: React.FC = () => {\n  const dispatch = useDispatch();\n  const reportList = useSelector((state: ApplicationState) => state.reportList);\n  const program = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n\n  useEffect(() => {\n    dispatch(getAllInProgress(login.currentUser?.id));\n    // eslint-disable-next-line\n  }, [login.currentUser]);\n\n  if (program.activePrograms === null) {\n    return (\n      <Container>\n        <Dimmer active>\n          <Loader>Loading active programs...</Loader>\n        </Dimmer>{' '}\n      </Container>\n    );\n  }\n  return (\n    <Container>\n      <Grid divided='vertically'>\n        <Grid.Row columns={2}>\n          <CreateNewReport />\n          <InProgressReportsList inProgress={reportList.inProgress} />\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst baseUrl = '/api/login';\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nconst login = async (credentials: LoginCredentials) => {\n  const res = await axios.post(baseUrl, credentials);\n  return res.data;\n};\n\nexport default { login };\n","import axios from 'axios';\nimport { MergeProgramParams, NewProgramType, UpdateProgramType } from './types';\n\nconst baseUrl = '/api/programs';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAllActive = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(`${baseUrl}/active`, config);\n  return req.data;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(`${baseUrl}/all`, config);\n  return req.data;\n};\n\nconst getOne = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/getone/${id}`, config);\n  return request.data;\n};\n\nconst createProgram = async (newProgram: NewProgramType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(baseUrl, newProgram, config);\n  return request.data;\n};\n\nconst updateProgram = async (updatedProgram: UpdateProgramType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/update`, updatedProgram, config);\n  return request.data;\n};\n\nconst mergePrograms = async (mergeParams: MergeProgramParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/merge`, mergeParams, config);\n  return request.data;\n};\n\nexport default {\n  getAllActive,\n  getAll,\n  getOne,\n  createProgram,\n  updateProgram,\n  mergePrograms,\n  setToken,\n};\n","import axios from 'axios';\nimport { UserToAdd, UserToUpdate } from './types';\n\nconst baseUrl = '/api/users';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(baseUrl, config);\n  return req.data;\n};\n\nconst createUser = async (userToAdd: UserToAdd) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(baseUrl, userToAdd, config);\n  return request.data;\n};\n\nconst updateUser = async (userToUpdate: UserToUpdate) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/${userToUpdate.id}`,\n    userToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst deleteUser = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.delete(`${baseUrl}/${id}`, config);\n  return response.data;\n};\n\nexport default { getAll, setToken, createUser, updateUser, deleteUser };\n","import loginService from './services';\nimport {\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  SET_LOADING,\n  UPDATE_CURRENT_USER,\n  CurrentUser,\n} from './types';\nimport { Dispatch } from 'redux';\n\nimport albumService from '../album/services';\nimport artistService from '../artist/services';\nimport programService from '../program/services';\nimport reportService from '../report/services';\nimport reportListService from '../reportList/services';\nimport searchService from '../search/services';\nimport trackService from '../track/services';\nimport userService from '../user/services';\n\ninterface NewLogin {\n  username: string;\n  password: string;\n}\n\nexport const initializeUser = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      // set token for logged in user\n      userService.setToken(user.token);\n      reportService.setToken(user.token);\n      reportListService.setToken(user.token);\n      programService.setToken(user.token);\n      searchService.setToken(user.token);\n      trackService.setToken(user.token);\n      artistService.setToken(user.token);\n      albumService.setToken(user.token);\n      dispatch({\n        type: INIT_USER,\n        data: user,\n      });\n    }\n  } catch (err) {\n    // dispatch({\n    //   type: LOGIN_ERROR,\n    //   payload: err.response.statusText,\n    // });\n    console.log('error initializing user', err);\n  }\n};\n\nexport const newLogin = (user: NewLogin) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const newUser = await loginService.login(user);\n    window.localStorage.setItem('loggedUser', JSON.stringify(newUser));\n    dispatch({\n      type: LOGIN,\n      data: newUser,\n      loading: false,\n    });\n  } catch (error) {\n    console.log(error);\n    const content = {\n      message: 'wrong username or password',\n      type: 'fail',\n    };\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content,\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION',\n      });\n    }, 3000);\n  }\n};\n\nexport const logout = () => async (dispatch: Dispatch) => {\n  window.localStorage.removeItem('loggedUser');\n  dispatch({\n    type: LOGOUT,\n  });\n};\n\nexport const updateCurrentUser = (updatedCurrentUser: CurrentUser) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: UPDATE_CURRENT_USER,\n    data: updatedCurrentUser,\n  });\n};\n","export const INIT_USER = 'INIT_USER';\nexport const UPDATE_CURRENT_USER = 'UPDATE_CURRENT_USER';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface CurrentUser {\n  token: string;\n  username: string;\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  level: number;\n  status: number;\n}\n\nexport interface LoginState {\n  loading: boolean;\n  currentUser: CurrentUser | null;\n}\n\ninterface NewLoginAction {\n  type: typeof LOGIN;\n  data: CurrentUser;\n}\n\ninterface InitUserAction {\n  type: typeof INIT_USER;\n  data: CurrentUser;\n}\n\ninterface LogoutAction {\n  type: typeof LOGOUT;\n}\n\ninterface UpdateCurrentUserAction {\n  type: typeof UPDATE_CURRENT_USER;\n  data: CurrentUser;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type LoginActionTypes =\n  | SetLoadingAction\n  | NewLoginAction\n  | InitUserAction\n  | LogoutAction\n  | UpdateCurrentUserAction;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Button, Input } from 'semantic-ui-react';\nimport { newLogin } from '../../store/login/actions';\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n    const user = {\n      username,\n      password,\n    };\n    dispatch(newLogin(user));\n  };\n\n  return (\n    <div>\n      <h1>RADIO TRACKLIST REPORTING</h1>\n      <h3>Log in</h3>\n      <Form onSubmit={handleLogin}>\n        <Form.Field\n          id='login-username'\n          label='username'\n          control={Input}\n          type='text'\n          placeholder='Username...'\n          onChange={(e: { target: { value: string } }) =>\n            setUsername(e.target.value.trim())\n          }\n        />\n        <Form.Field\n          id='login-password'\n          label='password'\n          control={Input}\n          type='password'\n          placeholder='Password...'\n          onChange={(e: { target: { value: string } }) =>\n            setPassword(e.target.value.trim())\n          }\n        />\n        <Button id='login-button' color='green' type='submit'>\n          Log in\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\nimport { TextField, PasswordField } from '../../layout/forms/FormFields';\n\nimport { CurrentUserFormValues, User } from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: CurrentUserFormValues) => void;\n  onCancel: () => void;\n  user: User;\n}\n\nconst CurrentUserForm: React.FC<Props> = ({ onSubmit, onCancel, user }) => {\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        confirm_password: '',\n        first_name: user.first_name,\n        last_name: user.last_name,\n        email: user.email,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Password - fill out field only if you wish to change the password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={TextField}\n              required\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={TextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={TextField}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default CurrentUserForm;\n","import { Dispatch } from 'redux';\nimport userService from './services';\nimport {\n  SET_LOADING,\n  INIT_USER_LIST,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER,\n  UserToAdd,\n  UserToUpdate,\n} from './types';\n\nexport const initializeUsers = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const users = await userService.getAll();\n    dispatch({\n      type: INIT_USER_LIST,\n      data: users,\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createUser = (userToAdd: UserToAdd) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const newUser = await userService.createUser(userToAdd);\n    dispatch({\n      type: CREATE_USER,\n      data: newUser,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateUser = (userToUpdate: UserToUpdate) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await userService.updateUser(userToUpdate);\n    const users = await userService.getAll();\n    dispatch({\n      type: UPDATE_USER,\n      data: users,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteUser = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: DELETE_USER,\n      data: id,\n    });\n    await userService.deleteUser(id);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Header } from 'semantic-ui-react';\nimport CurrentUserForm from './CurrentUserForm';\nimport { CurrentUser } from '../../../store/login/types';\nimport { CurrentUserFormValues } from '../../../store/user/types';\n\nimport { updateUser } from '../../../store/user/actions';\nimport { updateCurrentUser } from '../../../store/login/actions';\nimport { setNotification } from '../../../store/notification/actions';\n\ninterface Props {\n  currentUser: CurrentUser;\n}\n\nconst CurrentUserModal: React.FC<Props> = ({ currentUser }) => {\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState(false);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const submitUpdatedUser = (values: CurrentUserFormValues) => {\n    try {\n      const userToUpdate = {\n        ...values,\n        id: currentUser.id,\n        status: currentUser.status,\n        level: currentUser.level,\n      };\n      const currentUserToUpdate = {\n        ...values,\n        token: currentUser.token,\n        username: currentUser.username,\n        id: currentUser.id,\n        level: currentUser.level,\n        status: currentUser.status,\n      };\n      dispatch(updateUser(userToUpdate));\n      dispatch(updateCurrentUser(currentUserToUpdate));\n      dispatch(\n        setNotification(\n          `${userToUpdate.first_name} ${userToUpdate.last_name} updated!`,\n          'success'\n        )\n      );\n      console.log('updating user', userToUpdate);\n      handleClose();\n    } catch (e) {\n      console.error(e.response.data);\n      // setError(e.response.data.error);\n    }\n  };\n  return (\n    <Modal\n      trigger={\n        <span role='menuitem' tabIndex={-8} onClick={handleOpen}>\n          Edit user info\n        </span>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Header content='Edit current user info' />\n      <Modal.Content>\n        <CurrentUserForm\n          user={currentUser}\n          onCancel={handleClose}\n          onSubmit={submitUpdatedUser}\n        />\n        {/* <Form onSubmit={updateUserClick}>\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Salasana...'\n            onChange={e => setPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana - syötä vaihtaaksesi</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Vahvista salasana...'\n            onChange={e => setConfirmPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana uudelleen</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={firstName}\n            type='text'\n            placeholder='Etunimi...'\n            onChange={e => setFirstName(e.target.value)}\n            label='Etunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={lastName}\n            type='text'\n            placeholder='Sukunimi...'\n            onChange={e => setLastName(e.target.value)}\n            label='Sukunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={email}\n            type='email'\n            placeholder='Email...'\n            onChange={e => setEmail(e.target.value)}\n            label='Email'\n          />\n          <Button\n            color='green'\n            type='submit'\n            disabled={!email || !firstName || !lastName}\n          >\n            Tallenna\n          </Button>\n          <ModalNotification />\n        </Form> */}\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default CurrentUserModal;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nimport { ReportDetails } from '../../../store/report/types';\n\ninterface Props {\n  reportDetails: ReportDetails | null;\n}\n\nconst CurrentReport: React.FC<Props> = ({ reportDetails }) => {\n  if (!reportDetails) {\n    return null;\n  }\n  return (\n    <div\n      style={{\n        display: 'inline',\n        color: 'white',\n        float: 'right',\n        marginTop: 'auto',\n        marginRight: '0.6rem',\n        marginBottom: '0.7rem',\n      }}\n    >\n      <Link to={`/reports/${reportDetails.id}`}>\n        {reportDetails.program_name} <br />\n        {moment(reportDetails.program_date).format('DD.MM.YYYY')}{' '}\n        {reportDetails.program_start_time.slice(0, -3)} -{' '}\n        {reportDetails.program_end_time.slice(0, -3)}\n      </Link>\n    </div>\n  );\n};\n\nexport default CurrentReport;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image, Dropdown, Icon } from 'semantic-ui-react';\nimport logo from '../../../img/logo.png';\nimport { logout } from '../../../store/login/actions';\nimport { useDispatch } from 'react-redux';\n\nimport CurrentUserModal from '../../users/CurrentUserModal/CurrentUserModal';\nimport CurrentReport from './CurrentReport';\n\nimport { CurrentUser } from '../../../store/login/types';\nimport { ReportDetails } from '../../../store/report/types';\n\ninterface Props {\n  currentUser: CurrentUser;\n  reportDetails: ReportDetails | null;\n}\n\nconst AdminNavbar: React.FC<Props> = ({ currentUser, reportDetails }) => {\n  const dispatch = useDispatch();\n  const getLoggedInUserInfo = () => {\n    return <CurrentUserModal currentUser={currentUser} />;\n  };\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n  const trigger = (\n    <span>\n      <Icon color='pink' name='user' size='large' /> {currentUser.first_name}{' '}\n      {currentUser.last_name}\n    </span>\n  );\n\n  const options = [\n    {\n      key: 'user',\n      text: <CurrentUserModal currentUser={currentUser} />,\n      icon: 'user',\n      onClick: getLoggedInUserInfo,\n    },\n    {\n      key: 'sign-out',\n      text: 'Log out',\n      icon: 'sign out',\n      onClick: handleLogoutClick,\n    },\n  ];\n  return (\n    <div style={{ marginBottom: '1.5rem' }}>\n      <Menu pointing stackable inverted>\n        <Menu.Item link>\n          <Link to='/'>\n            <Image alt='logo' src={logo} size='mini' />\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/reports'>\n            <h4>REPORTS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/top100'>\n            <h4>TOP 100</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/search'>\n            <h4>SEARCH</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/transfer'>\n            <h4>TRANSFER FILES</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/programs'>\n            <h4>PROGRAMS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/users'>\n            <h4>USERS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Dropdown\n            trigger={trigger}\n            options={options}\n            pointing='top left'\n            icon={null}\n          />\n        </Menu.Item>\n        <Menu.Item>\n          <CurrentReport reportDetails={reportDetails} />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default AdminNavbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image, Dropdown, Icon } from 'semantic-ui-react';\nimport logo from '../../../img/logo.png';\nimport { logout } from '../../../store/login/actions';\nimport { useDispatch } from 'react-redux';\n\nimport CurrentUserModal from '../../users/CurrentUserModal/CurrentUserModal';\nimport CurrentReport from './CurrentReport';\n\nimport { CurrentUser } from '../../../store/login/types';\nimport { ReportDetails } from '../../../store/report/types';\n\ninterface Props {\n  currentUser: CurrentUser;\n  reportDetails: ReportDetails | null;\n}\n\nconst StaffNavbar: React.FC<Props> = ({ currentUser, reportDetails }) => {\n  const dispatch = useDispatch();\n  const getLoggedInUserInfo = () => {\n    return <CurrentUserModal currentUser={currentUser} />;\n  };\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n  const trigger = (\n    <span>\n      <Icon color='pink' name='user' size='large' /> {currentUser.first_name}{' '}\n      {currentUser.last_name}\n    </span>\n  );\n\n  const options = [\n    {\n      key: 'user',\n      text: <CurrentUserModal currentUser={currentUser} />,\n      icon: 'user',\n      onClick: getLoggedInUserInfo,\n    },\n    {\n      key: 'sign-out',\n      text: 'Log out',\n      icon: 'sign out',\n      onClick: handleLogoutClick,\n    },\n  ];\n  return (\n    <div style={{ marginBottom: '1.5rem' }}>\n      <Menu pointing stackable inverted>\n        <Menu.Item link>\n          <Link to='/'>\n            <Image alt='logo' src={logo} size='mini' />\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/reports'>\n            <h4>REPORTS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/top100'>\n            <h4>TOP 100</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/search'>\n            <h4>SEARCH</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/transfer'>\n            <h4>TRANSFER FILES</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/programs'>\n            <h4>PROGRAMS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Dropdown\n            trigger={trigger}\n            options={options}\n            pointing='top left'\n            icon={null}\n          />\n        </Menu.Item>\n        <Menu.Item>\n          <CurrentReport reportDetails={reportDetails} />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default StaffNavbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image, Dropdown, Icon } from 'semantic-ui-react';\nimport logo from '../../../img/logo.png';\nimport { logout } from '../../../store/login/actions';\nimport { useDispatch } from 'react-redux';\n\nimport CurrentUserModal from '../../users/CurrentUserModal/CurrentUserModal';\nimport CurrentReport from './CurrentReport';\n\nimport { CurrentUser } from '../../../store/login/types';\nimport { ReportDetails } from '../../../store/report/types';\n\ninterface Props {\n  currentUser: CurrentUser;\n  reportDetails: ReportDetails | null;\n}\n\nconst BasicNavbar: React.FC<Props> = ({ currentUser, reportDetails }) => {\n  const dispatch = useDispatch();\n  const getLoggedInUserInfo = () => {\n    return <CurrentUserModal currentUser={currentUser} />;\n  };\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n  const trigger = (\n    <span>\n      <Icon color='pink' name='user' size='large' /> {currentUser.first_name}{' '}\n      {currentUser.last_name}\n    </span>\n  );\n\n  const options = [\n    {\n      key: 'user',\n      text: <CurrentUserModal currentUser={currentUser} />,\n      icon: 'user',\n      onClick: getLoggedInUserInfo,\n    },\n    {\n      key: 'sign-out',\n      text: 'Log out',\n      icon: 'sign out',\n      onClick: handleLogoutClick,\n    },\n  ];\n  return (\n    <div style={{ marginBottom: '1.5rem' }}>\n      <Menu pointing stackable inverted>\n        <Menu.Item link>\n          <Link to='/'>\n            <Image alt='logo' src={logo} size='mini' />\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/reports'>\n            <h4>REPORTS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/top100'>\n            <h4>TOP 100</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/search'>\n            <h4>SEARCH</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Dropdown\n            trigger={trigger}\n            options={options}\n            pointing='top left'\n            icon={null}\n          />\n        </Menu.Item>\n        <Menu.Item>\n          <CurrentReport reportDetails={reportDetails} />\n        </Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default BasicNavbar;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport AdminNavbar from './AdminNavbar';\nimport StaffNavbar from './StaffNavbar';\nimport BasicNavbar from './BasicNavbar';\n\nimport { ApplicationState } from '../../../store/types';\n\nconst Navbar: React.FC = () => {\n  const login = useSelector((state: ApplicationState) => state.login);\n  const report = useSelector((state: ApplicationState) => state.report);\n\n  switch (login.currentUser?.level) {\n    case 1:\n      return (\n        <BasicNavbar\n          reportDetails={report.reportDetails}\n          currentUser={login.currentUser}\n        />\n      );\n    case 2:\n      return (\n        <StaffNavbar\n          reportDetails={report.reportDetails}\n          currentUser={login.currentUser}\n        />\n      );\n    case 3:\n      return (\n        <AdminNavbar\n          reportDetails={report.reportDetails}\n          currentUser={login.currentUser}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport { NotificationState } from '../../../store/notification/types';\n\ninterface Props {\n  notification: NotificationState;\n}\n\nconst Notification: React.FC<Props> = ({ notification }) => {\n  if (notification.type === 'success') {\n    return (\n      <div className='fixedTop'>\n        <Message floating success header={notification.message} />\n      </div>\n    );\n  }\n\n  if (notification.type === 'fail') {\n    return (\n      <div className='fixedTop'>\n        <Message floating negative header={notification.message} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Notification;\n","import { Dispatch } from 'redux';\nimport programService from './services';\nimport {\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  GET_ONE_PROGRAM,\n  CREATE_NEW_PROGRAM,\n  UPDATE_PROGRAM,\n  SET_LOADING,\n  MergeProgramParams,\n  NewProgramType,\n  UpdateProgramType,\n} from './types';\n\nexport const getAllPrograms = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs,\n    });\n  } catch (err) {\n    console.log(\n      'error getting all programs programActions.getAllPrograms',\n      err\n    );\n  }\n};\n\n// get all active programs\nexport const initializePrograms = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const programs = await programService.getAllActive();\n    dispatch({\n      type: GET_ALL_ACTIVE_PROGRAMS,\n      data: programs,\n    });\n  } catch (err) {\n    console.log(\n      'error getting all active programs programActions.initializePrograms',\n      err\n    );\n  }\n};\n\nexport const getOneProgram = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const program = await programService.getOne(id);\n    dispatch({\n      type: GET_ONE_PROGRAM,\n      data: program,\n      id,\n    });\n  } catch (err) {\n    console.log('error getting one program programActions.getOneProgram', err);\n  }\n};\n\nexport const createNewProgram = (programToAdd: NewProgramType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const program = await programService.createProgram(programToAdd);\n    dispatch({\n      type: CREATE_NEW_PROGRAM,\n      data: program,\n    });\n  } catch (err) {\n    console.log('error creating new program', err);\n  }\n};\n\nexport const updateProgram = (updatedProgram: UpdateProgramType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await programService.updateProgram(updatedProgram);\n    dispatch({\n      type: UPDATE_PROGRAM,\n      data: updatedProgram,\n    });\n  } catch (error) {\n    console.log('error updating program', error);\n  }\n};\n\nexport const mergePrograms = (mergeParams: MergeProgramParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await programService.mergePrograms(mergeParams);\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs,\n    });\n  } catch (error) {\n    console.log(\n      'error merging two programs programActions.mergePrograms',\n      error\n    );\n  }\n};\n","export const GET_ONE_PROGRAM = 'GET_ONE_PROGRAM';\nexport const GET_ALL_PROGRAMS = 'GET_ALL_PROGRAMS';\nexport const GET_ALL_ACTIVE_PROGRAMS = 'GET_ALL_ACTIVE_PROGRAMS';\nexport const CREATE_NEW_PROGRAM = 'CREATE_NEW_PROGRAM';\nexport const CREATE_NEW_PROGRAM_ON_NEW_REPORT =\n  'CREATE_NEW_PROGRAM_ON_NEW_REPORT';\nexport const UPDATE_PROGRAM = 'UPDATE_PROGRAM';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Program {\n  id: number;\n  user_id: number;\n  name: string;\n  identifier?: string;\n  display?: number;\n  site?: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface ProgramState {\n  allPrograms: Array<Program>;\n  activePrograms: Array<Program>;\n  program: Program | null;\n  loading: boolean;\n}\n\nexport interface NewProgramType {\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface AddProgramFormValues {\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface EditProgramFormValues {\n  id: number;\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface UpdateProgramType {\n  id: number;\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface MergeProgramParams {\n  type: string;\n  merge: number;\n  mergeTo: number;\n}\n\n// program action types\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface GetOneProgram {\n  type: typeof GET_ONE_PROGRAM;\n  data: Program;\n}\n\ninterface GetAllPrograms {\n  type: typeof GET_ALL_PROGRAMS;\n  data: Array<Program>;\n}\n\ninterface GetAllActivePrograms {\n  type: typeof GET_ALL_ACTIVE_PROGRAMS;\n  data: Array<Program>;\n}\n\ninterface CreateNewProgram {\n  type: typeof CREATE_NEW_PROGRAM;\n  data: Program;\n}\n\ninterface CreateNewProgramOnNewReport {\n  type: typeof CREATE_NEW_PROGRAM_ON_NEW_REPORT;\n  data: Program;\n}\n\ninterface UpdateProgram {\n  type: typeof UPDATE_PROGRAM;\n  data: Program;\n}\n\nexport type ProgramActionTypes =\n  | SetLoadingAction\n  | GetOneProgram\n  | GetAllPrograms\n  | GetAllActivePrograms\n  | CreateNewProgram\n  | CreateNewProgramOnNewReport\n  | UpdateProgram;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { SelectField, TextField } from '../../layout/forms/FormFields';\n\nimport { EditProgramFormValues, Program } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: EditProgramFormValues) => void;\n  onCancel: () => void;\n  login: LoginState;\n  program: Program;\n}\n\nconst displayOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst siteOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst EditProgramForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  login,\n  program,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        id: program.id,\n        name: program.name,\n        identifier: program.identifier,\n        display: program.display || 1,\n        site: program.site || 1,\n        user_id: login.currentUser?.id,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        console.log(values.display);\n        console.log(values.site);\n\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Name'\n              placeholder='Name'\n              name='name'\n              component={TextField}\n            />\n            <Field\n              label='Identifier'\n              placeholder='Identifier'\n              name='identifier'\n              type='password'\n              component={TextField}\n            />\n            <SelectField\n              label='Display'\n              name='display'\n              options={displayOptions}\n            />\n            <SelectField\n              label='Display on site'\n              name='site'\n              options={siteOptions}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Save changes\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditProgramForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport EditProgramForm from './EditProgramForm';\nimport { EditProgramFormValues, Program } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EditProgramFormValues) => void;\n  error?: string;\n  program: Program;\n  login: LoginState;\n}\n\nconst EditUserModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  program,\n  login,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Edit info of program {program.name}</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <EditProgramForm\n        program={program}\n        login={login}\n        onSubmit={onSubmit}\n        onCancel={onClose}\n      />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default EditUserModal;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\n\nimport { SelectField } from '../../layout/forms/FormFields';\n\ninterface MergeValues {\n  programToMerge: number;\n}\n\ninterface SelectFieldType {\n  key: number;\n  value: number;\n  label: string;\n}\n\ninterface Props {\n  onSubmit: (values: MergeValues) => void;\n  onCancel: () => void;\n  selectOptions: Array<SelectFieldType>;\n}\n\nconst MergeProgramForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  selectOptions,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        programToMerge: selectOptions[0].value,\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ dirty }) => {\n        return (\n          <Form className='form ui'>\n            <span style={{ color: 'red' }}>\n              <SelectField\n                label=''\n                name='programToMerge'\n                options={selectOptions}\n              />\n            </span>\n            <Grid>\n              <Grid.Column\n                style={{ marginTop: '1rem' }}\n                floated='left'\n                width={5}\n              >\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty}\n                >\n                  Merge\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default MergeProgramForm;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Modal, Header } from 'semantic-ui-react';\nimport { mergePrograms } from '../../../store/program/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { ApplicationState } from '../../../store/types';\n\nimport MergeProgramForm from './MergeProgramForm';\n\ninterface Props {\n  program_id: number;\n  program_name: string;\n}\n\nconst MergePrograms: React.FC<Props> = ({ program_id, program_name }) => {\n  const dispatch = useDispatch();\n  const programs = useSelector((state: ApplicationState) => state.program);\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {program_id}\n      </button>\n    );\n  }\n\n  interface MergeValues {\n    programToMerge: number;\n  }\n  const submitMergePrograms = (values: MergeValues) => {\n    console.log(Number(values.programToMerge));\n    const mergeParams = {\n      type: 'program',\n      merge: Number(values.programToMerge),\n      mergeTo: program_id,\n    };\n    console.log(mergeParams);\n    dispatch(mergePrograms(mergeParams));\n    dispatch(\n      setNotification(`Ohjelma #${mergeParams.merge} yhdistetty!`, 'success')\n    );\n    handleClose();\n  };\n  const mergeOptions = programs.allPrograms.map((program) => ({\n    key: program.id,\n    label: `${program.id} - ${program.name}`,\n    value: program.id,\n  }));\n\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {program_id}\n        </button>\n      }\n    >\n      <Header>\n        Merge {program_id} - {program_name} with:\n      </Header>\n      <Modal.Content>\n        {/* <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getProgramToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>{' '} */}\n        <MergeProgramForm\n          onSubmit={submitMergePrograms}\n          onCancel={handleClose}\n          selectOptions={mergeOptions}\n        />\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default MergePrograms;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table } from 'semantic-ui-react';\n\nimport EditProgramModal from './EditProgramModal';\nimport MergePrograms from './MergePrograms';\n\nimport { Program, EditProgramFormValues } from '../../store/program/types';\nimport { ApplicationState } from '../../store/types';\n\nimport { updateProgram } from '../../store/program/actions';\nimport { setNotification } from '../../store/notification/actions';\n\ninterface Props {\n  program: Program;\n}\n\nconst ProgramListItem: React.FC<Props> = ({ program }) => {\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  let className;\n  if (program.display === 1) {\n    className = 'active-program';\n  }\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitUpdatedProgram = (values: EditProgramFormValues) => {\n    try {\n      dispatch(updateProgram(values));\n      dispatch(setNotification(`${values.name} updated!`, 'success'));\n      closeModal();\n    } catch (e) {\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <Table.Row className={className}>\n      <Table.Cell>\n        <MergePrograms program_id={program.id} program_name={program.name} />\n      </Table.Cell>\n      <Table.Cell>\n        <EditProgramModal\n          program={program}\n          login={login}\n          modalOpen={modalOpen}\n          onSubmit={submitUpdatedProgram}\n          error={error}\n          onClose={closeModal}\n        />\n        <button\n          style={{ border: 'none', cursor: 'pointer', color: 'teal' }}\n          onClick={openModal}\n        >\n          {program.name}\n        </button>\n      </Table.Cell>\n      <Table.Cell>{program.identifier}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default ProgramListItem;\n","import React from 'react';\nimport { Container, Dimmer, Loader, Table } from 'semantic-ui-react';\nimport { LoginState } from '../../store/login/types';\nimport { ProgramState, Program } from '../../store/program/types';\n\nimport ProgramListItem from './ProgramListItem';\n\ninterface Props {\n  login: LoginState;\n  program: ProgramState;\n}\n\nconst ProgramList: React.FC<Props> = ({ login, program }) => {\n  if (program.allPrograms === null || program.loading === true) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Loading programs...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n  if (login.currentUser?.level === 2 || login.currentUser?.level === 3) {\n    return (\n      <Container>\n        <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n          <h3 style={{ display: 'inline' }}>Programs</h3>\n        </div>\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>ID</Table.Cell>\n              <Table.Cell>Program name</Table.Cell>\n              <Table.Cell>Additional info</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {program.allPrograms.map((program: Program) => (\n              <ProgramListItem program={program} key={program.id} />\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default ProgramList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  SelectField,\n  TextField,\n} from '../../layout/forms/FormFields';\n\nimport { AddProgramFormValues } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: AddProgramFormValues) => void;\n  onCancel: () => void;\n  login: LoginState;\n}\n\nconst displayOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst siteOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst AddProgramForm: React.FC<Props> = ({ onSubmit, onCancel, login }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        identifier: '',\n        display: 1,\n        site: 1,\n        user_id: login.currentUser?.id,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        console.log(values.display);\n        console.log(values.site);\n\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Name'\n              placeholder='Name'\n              name='name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Identifier'\n              placeholder='Identifier'\n              name='identifier'\n              type='password'\n              component={TextField}\n            />\n            <SelectField\n              label='Display'\n              name='display'\n              options={displayOptions}\n            />\n            <SelectField\n              label='Display on site'\n              name='site'\n              options={siteOptions}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddProgramForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddProgramForm from './AddProgramForm';\nimport { AddProgramFormValues } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: AddProgramFormValues) => void;\n  error?: string;\n  login: LoginState;\n}\nconst AddProgramModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  login,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new program</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <AddProgramForm onSubmit={onSubmit} onCancel={onClose} login={login} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddProgramModal;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ApplicationState } from '../../store/types';\nimport { AddProgramFormValues } from '../../store/program/types';\nimport { Button, Icon, Container } from 'semantic-ui-react';\nimport { getAllPrograms, createNewProgram } from '../../store/program/actions';\nimport ProgramList from './ProgramList';\nimport AddProgramModal from './AddProgramModal';\n\nconst Programs: React.FC = () => {\n  const programs = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllPrograms());\n    // eslint-disable-next-line\n  }, []);\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewProgram = (values: AddProgramFormValues) => {\n    try {\n      const programToAdd = {\n        ...values,\n        display: Number(values.display),\n        site: Number(values.site),\n      };\n      console.log(programToAdd);\n      dispatch(createNewProgram(programToAdd));\n      // dispatch(setNotification(`User ${values.username} created!`, 'success'));\n      console.log('adding program', programToAdd);\n      closeModal();\n    } catch (e) {\n      // dispatch(setNotification('Failed to create user!', 'fail'));\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <Container>\n      <Button\n        floated='right'\n        color='green'\n        style={{ marginBottom: '0.5rem' }}\n        onClick={() => openModal()}\n      >\n        <Icon name='add' />\n        Create a new program\n      </Button>\n      <AddProgramModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewProgram}\n        error={error}\n        onClose={closeModal}\n        login={login}\n      />\n      <ProgramList program={programs} login={login} />\n    </Container>\n  );\n};\n\nexport default Programs;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\nimport { SelectField } from '../layout/forms/FormFields';\nimport { ReportListSelectionDate } from '../../store/reportList/types';\nimport { reportMonthOptions, reportYearOptions } from '../../constants';\n\ninterface Props {\n  onSubmit: (values: ReportListSelectionDate) => void;\n}\n\nconst ReportPeriodSelectionForm: React.FC<Props> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        reportYear: '',\n        reportMonth: '',\n      }}\n      onSubmit={onSubmit}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            <Grid>\n              <Grid.Column width={4}>\n                <SelectField\n                  label='Select month'\n                  name='reportMonth'\n                  options={reportMonthOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={4}>\n                <SelectField\n                  label='Select year'\n                  name='reportYear'\n                  options={reportYearOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={4}>\n                <Button\n                  type='submit'\n                  color='green'\n                  style={{ marginTop: '1.6rem' }}\n                >\n                  Get reports\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ReportPeriodSelectionForm;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Table, Icon, Confirm, Responsive } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { deleteReport } from '../../store/reportList/actions';\nimport { setNotification } from '../../store/notification/actions';\nimport { Report } from '../../store/reportList/types';\n\ninterface Props {\n  loginLevel: number | undefined;\n  report: Report;\n}\n\nconst ReportListItem: React.FC<Props> = ({ loginLevel, report }) => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n  const confirmDelete = () => {\n    setOpen(false);\n    dispatch(deleteReport(report.id));\n    dispatch(\n      setNotification(\n        `${report.name} ${report.program_date} poistettu!`,\n        'success'\n      )\n    );\n  };\n  let reportStatusOutPrint;\n  let className;\n\n  if (report.status === 1) {\n    reportStatusOutPrint = 'Ready';\n  } else if (report.status === 0) {\n    reportStatusOutPrint = 'In progress';\n  } else if (report.status === 9) {\n    reportStatusOutPrint = 'Deleted';\n    return null;\n  }\n  if (report.rerun === 1) {\n    className = 'rerun';\n  }\n\n  if (loginLevel === 1 && report.rerun === 1) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <Table.Row className={className}>\n        <Responsive as={Table.Cell} minWidth={768}>\n          {report.program_no}\n        </Responsive>\n        <Table.Cell>\n          <Link className={className} to={`reports/${report.id}`}>\n            {report.name}\n          </Link>\n        </Table.Cell>\n        <Table.Cell>\n          {moment(report.program_date).format('DD.MM.YYYY')}\n        </Table.Cell>\n        <Table.Cell>\n          {report.program_start_time.slice(0, -3)} -{' '}\n          {report.program_end_time.slice(0, -3)}\n        </Table.Cell>\n        <Table.Cell>{reportStatusOutPrint}</Table.Cell>\n        <Table.Cell>\n          <Icon\n            style={{ color: 'red' }}\n            name='delete'\n            onClick={() => setOpen(true)}\n          />\n          <Confirm\n            content={`Haluatko varmasti poistaa raportin ${report.name} ${report.program_date}`}\n            open={open}\n            onCancel={cancelDelete}\n            onConfirm={confirmDelete}\n          />\n        </Table.Cell>\n      </Table.Row>\n    </React.Fragment>\n  );\n};\n\nexport default ReportListItem;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { Grid } from 'semantic-ui-react';\nimport { SelectField, TextField } from '../../layout/forms/FormFields';\nimport {\n  filterByUserId,\n  filterByStatus,\n  filterByText,\n} from '../../../store/reportList/actions';\n\nimport { UserState } from '../../../store/user/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  user: UserState;\n  login: LoginState;\n}\n\ninterface FilterUser {\n  userId: number | null | undefined;\n}\n\ninterface FilterText {\n  filterText: string;\n}\n\nconst FilterReportList: React.FC<Props> = ({ user, login }) => {\n  const dispatch = useDispatch();\n  const [userId, setUserId] = useState<number | null>(null);\n  const [status, setStatus] = useState<number | null>(null);\n  const [filterText, setFilterText] = useState('');\n\n  useEffect(() => {\n    dispatch(filterByUserId(userId));\n    dispatch(filterByStatus(status));\n    dispatch(filterByText(filterText));\n    // eslint-disable-next-line\n  }, [userId, status, filterText]);\n\n  const userOptions = user.users.map((user) => ({\n    key: user.id,\n    label: `${user.first_name} ${user.last_name}`,\n    value: user.id,\n  }));\n\n  const addAllToUserOptions = [\n    {\n      key: 0,\n      label: 'All users',\n      value: 0,\n    },\n    ...userOptions,\n  ];\n\n  const statusOptions = [\n    {\n      key: '2',\n      label: 'All',\n      value: null,\n    },\n    {\n      key: '0',\n      label: 'In Progress',\n      value: 0,\n    },\n    {\n      key: '1',\n      label: 'Finished',\n      value: 1,\n    },\n  ];\n\n  const onUserChange = (values: FilterUser) => {\n    console.log(values.userId);\n    setUserId(Number(values.userId));\n  };\n\n  const onTextChange = (values: FilterText) => {\n    console.log(values.filterText);\n    setFilterText(values.filterText);\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={4}>\n        <Formik\n          initialValues={{\n            userId: undefined,\n          }}\n          onSubmit={onUserChange}\n          validate={(values) => {\n            console.log(values);\n            setUserId(Number(values.userId));\n          }}\n        >\n          {() => {\n            return (\n              <Form className='form ui'>\n                <SelectField\n                  label='Filter by user'\n                  name='userId'\n                  options={addAllToUserOptions}\n                />\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n      <Grid.Column width={4}>\n        <Formik\n          initialValues={{\n            filterText: '',\n          }}\n          onSubmit={onTextChange}\n          validate={(values) => {\n            setFilterText(values.filterText);\n          }}\n        >\n          {() => {\n            return (\n              <Form className='form ui'>\n                <Field\n                  label='Filter text'\n                  placeholder='Program name...'\n                  name='filterText'\n                  component={TextField}\n                />\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default FilterReportList;\n","/* eslint-disable indent */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Container,\n  Table,\n  Dimmer,\n  Header,\n  Loader,\n  Responsive,\n} from 'semantic-ui-react';\nimport moment from 'moment';\n\nimport ReportPeriodSelectionForm from './ReportPeriodSelectionForm';\nimport ReportListItem from './ReportListItem';\nimport FilterReportList from './FilterReportList';\n\nimport {\n  getAllReportsByDate,\n  getAllReportsByDateByUser,\n} from '../../store/reportList/actions';\n\nimport { ApplicationState } from '../../store/types';\nimport { ReportListSelectionDate } from '../../store/reportList/types';\n\nconst ReportList = () => {\n  const dispatch = useDispatch();\n  const login = useSelector((state: ApplicationState) => state.login);\n  const user = useSelector((state: ApplicationState) => state.user);\n  const reportList = useSelector((state: ApplicationState) => state.reportList);\n\n  // initial reports list\n  useEffect(() => {\n    if (login.currentUser?.level === 1) {\n      if (reportList.reportListDate === null) {\n        dispatch(\n          getAllReportsByDateByUser(\n            moment().format('YYYY-MM'),\n            login.currentUser.id\n          )\n        );\n      } else {\n        dispatch(\n          getAllReportsByDateByUser(\n            reportList.reportListDate,\n            login.currentUser.id\n          )\n        );\n      }\n    } else if (reportList.reportListDate === null) {\n      dispatch(getAllReportsByDate(moment().format('YYYY-MM')));\n    } else {\n      dispatch(getAllReportsByDate(reportList.reportListDate));\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const onSubmit = (values: ReportListSelectionDate) => {\n    console.log(values);\n    const date = `${values.reportYear}-${values.reportMonth}`;\n\n    if (login.currentUser?.level === 1) {\n      dispatch(getAllReportsByDateByUser(date, login.currentUser.id));\n    } else {\n      dispatch(getAllReportsByDate(date));\n    }\n  };\n\n  if (reportList.reportList === null || reportList.loading) {\n    return (\n      <Dimmer active>\n        <Loader content='Loading...' />\n      </Dimmer>\n    );\n  }\n\n  if (reportList.reportList.length === 0) {\n    return (\n      <Container>\n        <ReportPeriodSelectionForm onSubmit={onSubmit} />\n        <Header>No reports in the selected time period.</Header>\n      </Container>\n    );\n  }\n\n  let reportListTimeDate;\n  if (reportList.reportListDate === null) {\n    reportListTimeDate = moment().format('MMMM YYYY');\n  } else {\n    reportListTimeDate = moment(reportList.reportListDate).format('MMMM YYYY');\n  }\n\n  let reportsToShow = reportList.reportList;\n\n  reportsToShow =\n    Number(reportList.filterByText) === 0\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter((report) =>\n          report.name\n            .toLowerCase()\n            .includes(reportList.filterByText.toLowerCase())\n        ));\n  reportsToShow =\n    reportList.filterUserValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          (report) => report.user_id === reportList.filterUserValue\n        ));\n  reportsToShow =\n    reportList.filterStatusValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          (report) => report.status === reportList.filterStatusValue\n        ));\n\n  return (\n    <Container>\n      <Header>Get reports by month</Header>\n      <ReportPeriodSelectionForm onSubmit={onSubmit} />\n      <h4>Reports from {reportListTimeDate}</h4>\n      <FilterReportList user={user} login={login} />\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Responsive as={Table.Cell} minWidth={768}>\n              Program number\n            </Responsive>\n            <Table.Cell>Program name</Table.Cell>\n            <Table.Cell>Date</Table.Cell>\n            <Table.Cell>Time</Table.Cell>\n            <Table.Cell>Status</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {reportsToShow.map((r) => (\n            <ReportListItem\n              key={r.id}\n              report={r}\n              loginLevel={login.currentUser?.level}\n            />\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  );\n};\n\nexport default ReportList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  SelectField,\n  TextField,\n  NumberField,\n  TextAreaField,\n} from '../../../layout/forms/FormFields';\nimport { countryOptions, recordCountryOptions } from '../../../../constants';\n\nimport { ReportItem, ReportState } from '../../../../store/report/types';\nimport { UpdateReportTrackFormValuesType } from '../../../../store/track/types';\n\ninterface Props {\n  onCancel: () => void;\n  onSubmit: (values: UpdateReportTrackFormValuesType) => void;\n  track: ReportItem;\n  error?: string;\n}\n\nconst EditTrackModalForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  track,\n  error,\n}) => {\n  console.log('track at form', track);\n  let initialPeople = '';\n  if (track.people) {\n    initialPeople = track.people\n      .replace(/\\| /, '')\n      .replace(/\\| /g, '\\n')\n      .replace(/ \\|/, '');\n  }\n  return (\n    <Formik\n      initialValues={{\n        track_title: track.track_title,\n        artist: track.artist_name,\n        album: track.album_name,\n        track_id: track.track_id,\n        album_id: track.album_id,\n        artist_id: track.artist_id,\n        label: track.label,\n        cat_id: track.cat_id,\n        length: track.length,\n        minutes: Math.floor(track.length / 60),\n        seconds: track.length % 60,\n        disc_no: track.disc_no || 1,\n        track_no: track.track_no || 1,\n        people: initialPeople || '',\n        isrc: track.isrc || '',\n        year: Number(track.year?.substring(0, 4)) || '',\n        record_country: track.record_country || '',\n        country: track.country || 0,\n        sortable_rank: track.sortable_rank,\n        report_track_id: track.report_track_id,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.track_title || values.track_title === '') {\n          errors.track_title = requiredError;\n        }\n        if (!values.album || values.album === '') {\n          errors.album_name = requiredError;\n        }\n        if (!values.artist || values.artist === '') {\n          errors.artist_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Artist'\n              placeholder='Artist'\n              name='artist'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Album'\n              placeholder='Album'\n              name='album'\n              component={RequiredTextField}\n            />\n\n            <Field\n              label='Track title'\n              placeholder='Track title...'\n              name='track_title'\n              component={RequiredTextField}\n            />\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - minutes'\n                  name='minutes'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - seconds'\n                  name='seconds'\n                  component={NumberField}\n                  min={0}\n                  max={59}\n                />\n              </Grid.Column>\n            </Grid>\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Track #'\n                  name='track_no'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Disc #'\n                  name='disc_no'\n                  component={NumberField}\n                  min={0}\n                  max={99}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Country'\n                  name='country'\n                  options={countryOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Recorded in'\n                  name='record_country'\n                  options={recordCountryOptions}\n                />\n              </Grid.Column>\n            </Grid>\n            <Field\n              label='Composers - one per line'\n              placeholder='LAST NAME FIRST NAME'\n              name='people'\n              component={TextAreaField}\n            />\n            <Field\n              label='Year'\n              name='year'\n              component={NumberField}\n              min={1900}\n              max={2900}\n            />\n            <Button\n              type='submit'\n              floated='left'\n              color='green'\n              disabled={!isValid || !dirty}\n            >\n              Update track info\n            </Button>\n            <Button\n              floated='right'\n              style={{ marginBottom: '1rem' }}\n              type='button'\n              onClick={onCancel}\n              color='red'\n            >\n              Cancel\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditTrackModalForm;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Segment, Icon } from 'semantic-ui-react';\nimport EditTrackModalForm from './EditTrackModalForm';\nimport { setNotification } from '../../../../store/notification/actions';\nimport { updateTrack } from '../../../../store/track/actions';\n\nimport { ReportItem } from '../../../../store/report/types';\nimport { UpdateReportTrackFormValuesType } from '../../../../store/track/types';\n\ninterface Props {\n  track: ReportItem;\n}\n\nconst EditTrackModal: React.FC<Props> = ({ track }) => {\n  console.log(track);\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n  const submitUpdatedTrack = (values: UpdateReportTrackFormValuesType) => {\n    const length = Number(values.minutes) * 60 + Number(values.seconds);\n    let regexPeople;\n    if (values.people) {\n      regexPeople = `| ${values.people.replace(/\\n/g, ' | ')} |`;\n    } else {\n      regexPeople = null;\n    }\n    console.log(values);\n    const trackToUpdate = {\n      artist_name: values.artist,\n      album_name: values.album,\n      track_title: values.track_title,\n      track_id: Number(values.track_id),\n      length,\n      country: Number(values.country),\n      record_country: values.record_country,\n      people: regexPeople,\n      disc_no: Number(values.disc_no),\n      track_no: Number(values.track_no),\n      year: values.year?.toString(),\n      label: values.label,\n      cat_id: values.cat_id,\n      isrc: values.isrc,\n      comment: null,\n      user_id: null,\n      artist_id: Number(values.artist_id),\n      album_id: Number(values.album_id),\n      sortable_rank: Number(values.sortable_rank),\n      report_track_id: Number(values.report_track_id),\n    };\n    dispatch(updateTrack(trackToUpdate));\n    dispatch(\n      setNotification(\n        `${trackToUpdate.track_title} by ${trackToUpdate.artist_name} has been updated!`,\n        'success'\n      )\n    );\n    setModalOpen(false);\n  };\n  return (\n    <React.Fragment>\n      <Icon\n        style={{ cursor: 'pointer' }}\n        color='blue'\n        onClick={() => openModal()}\n        name='edit'\n      />\n      <Modal open={modalOpen} onClose={closeModal} centered={false} closeIcon>\n        <Modal.Header>Edit track info</Modal.Header>\n        <Modal.Content>\n          {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n          <EditTrackModalForm\n            onSubmit={submitUpdatedTrack}\n            onCancel={closeModal}\n            track={track}\n          />\n        </Modal.Content>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default EditTrackModal;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Table, Icon, Checkbox } from 'semantic-ui-react';\nimport EditTrackModal from './EditTrackModal';\nimport {\n  deleteTrackFromReport,\n  checkForDelete,\n  unCheckForDelete,\n} from '../../../store/report/actions';\nimport { ReportItem, ReportState } from '../../../store/report/types';\n\ninterface Props {\n  track: ReportItem;\n  report: ReportState;\n}\n\nconst ReportTrackListItem: React.FC<Props> = ({ track, report }) => {\n  const [checked, setChecked] = useState(false);\n  const dispatch = useDispatch();\n  let minutes: any;\n  let seconds: number | string;\n  minutes = Math.floor(track.length / 60);\n  minutes = minutes.toString();\n  seconds = track.length - minutes * 60;\n\n  if (seconds.toString().length === 1) {\n    seconds = `0${seconds.toString()}`;\n  }\n  seconds = seconds.toString();\n\n  const onDeleteClick = () => {\n    const remainingTracks = report.report.filter(\n      (t) => t.report_track_id !== track.report_track_id\n    );\n    const params = {\n      report_track_id: track.report_track_id,\n      report_id: report.reportDetails?.id || 0,\n      remainingTracks,\n    };\n    dispatch(deleteTrackFromReport(params));\n  };\n\n  const checkedClick = () => {\n    setChecked(!checked);\n    if (checked === true) {\n      dispatch(unCheckForDelete(track.report_track_id));\n    } else {\n      dispatch(checkForDelete(track.report_track_id));\n    }\n  };\n\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <Checkbox onChange={checkedClick} checked={checked} />\n        <Icon\n          style={{ marginLeft: '1.5rem', cursor: 'pointer' }}\n          name='arrows alternate'\n        />\n      </Table.Cell>\n      <Table.Cell>{track.sortable_rank}</Table.Cell>\n      <Table.Cell>{track.artist_name}</Table.Cell>\n      <Table.Cell>{track.track_title}</Table.Cell>\n      <Table.Cell>\n        {minutes}:{seconds}\n      </Table.Cell>\n      <Table.Cell>\n        <Icon\n          style={{ cursor: 'pointer' }}\n          color='red'\n          onClick={onDeleteClick}\n          name='delete'\n        />\n      </Table.Cell>\n      <Table.Cell>\n        <EditTrackModal track={track} />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default ReportTrackListItem;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport ReportTrackListItem from './ReportTrackListItem';\nimport { ReportState } from '../../../store/report/types';\n\ninterface Props {\n  report: ReportState;\n}\n\nconst ReportTrackList: React.FC<Props> = ({ report }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell></Table.Cell>\n          <Table.Cell>#</Table.Cell>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Track Title</Table.Cell>\n          <Table.Cell>Length</Table.Cell>\n          <Table.Cell></Table.Cell>\n          <Table.Cell></Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {report.report.map((track) => (\n          <ReportTrackListItem\n            key={track.report_track_id}\n            track={track}\n            report={report}\n          />\n        ))}\n      </Table.Body>\n      <Table.Footer>\n        <Table.Row></Table.Row>\n      </Table.Footer>\n    </Table>\n  );\n};\n\nexport default ReportTrackList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  SelectField,\n  TextField,\n  NumberField,\n  TextAreaField,\n} from '../../../layout/forms/FormFields';\nimport { countryOptions, recordCountryOptions } from '../../../../constants';\n\nimport { AddNewTrackFormValuesType } from '../../../../store/track/types';\n\ninterface Props {\n  onCancel: () => void;\n  onSubmit: (values: AddNewTrackFormValuesType) => void;\n  error?: string;\n}\n\nconst AddAndReportNewTrackForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  error,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        track_title: '',\n        artist_name: '',\n        album_name: '',\n        label: '',\n        cat_id: '',\n        year: '',\n        disc_no: 1,\n        track_no: 1,\n        minutes: 0,\n        seconds: 0,\n        country: 0,\n        record_country: '',\n        people: '',\n        comment: '',\n        isrc: '',\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.track_title || values.track_title === '') {\n          errors.track_title = requiredError;\n        }\n        if (!values.album_name || values.album_name === '') {\n          errors.album_name = requiredError;\n        }\n        if (!values.artist_name || values.artist_name === '') {\n          errors.artist_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Artist'\n              placeholder='Artist'\n              name='artist_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Album'\n              placeholder='Album'\n              name='album_name'\n              component={RequiredTextField}\n            />\n\n            <Field\n              label='Track title'\n              placeholder='Track title...'\n              name='track_title'\n              component={RequiredTextField}\n            />\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - minutes'\n                  name='minutes'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - seconds'\n                  name='seconds'\n                  component={NumberField}\n                  min={0}\n                  max={59}\n                />\n              </Grid.Column>\n            </Grid>\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Track #'\n                  name='track_no'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Disc #'\n                  name='disc_no'\n                  component={NumberField}\n                  min={0}\n                  max={99}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Country'\n                  name='country'\n                  options={countryOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Recorded in'\n                  name='record_country'\n                  options={recordCountryOptions}\n                />\n              </Grid.Column>\n            </Grid>\n            <Field\n              label='Composers - one per line'\n              placeholder='LAST NAME FIRST NAME'\n              name='people'\n              component={TextAreaField}\n            />\n            <Field\n              label='Year'\n              name='year'\n              component={NumberField}\n              min={1900}\n              max={2900}\n            />\n            <Field\n              label='Spotify id'\n              placeholder='Spotify id'\n              name='spotify_id'\n              component={TextField}\n            />\n            <Field\n              label='Comment'\n              placeholder='Any additional information'\n              name='comment'\n              component={TextField}\n            />\n            <Button\n              type='submit'\n              floated='left'\n              color='green'\n              disabled={!isValid || !dirty}\n            >\n              Add\n            </Button>\n            <Button\n              floated='right'\n              style={{ marginBottom: '1rem' }}\n              type='button'\n              onClick={onCancel}\n              color='red'\n            >\n              Cancel\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddAndReportNewTrackForm;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Segment, Button } from 'semantic-ui-react';\nimport AddAndReportNewTrackForm from './AddAndReportNewTrackForm';\nimport { setNotification } from '../../../../store/notification/actions';\nimport { addNewTrack } from '../../../../store/track/actions';\nimport { AddNewTrackFormValuesType } from '../../../../store/track/types';\n\ninterface Props {\n  report_id: number | undefined;\n  sortable_rank: number;\n}\n\nconst AddAndReportNewTrack: React.FC<Props> = ({\n  report_id,\n  sortable_rank,\n}) => {\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n  const submitNewTrack = (values: AddNewTrackFormValuesType) => {\n    const length = Number(values.minutes) * 60 + Number(values.seconds);\n    const trackToSave = {\n      ...values,\n      length,\n      report_id,\n      sortable_rank,\n    };\n    dispatch(addNewTrack(trackToSave));\n    dispatch(\n      setNotification(\n        `${trackToSave.track_title} by ${trackToSave.artist_name} has been added to database!`,\n        'success'\n      )\n    );\n    setModalOpen(false);\n  };\n  return (\n    <React.Fragment>\n      <Button\n        color='blue'\n        style={{ marginBottom: '0.5rem' }}\n        onClick={() => openModal()}\n      >\n        Add new track\n      </Button>\n      <Modal open={modalOpen} onClose={closeModal} centered={false} closeIcon>\n        <Modal.Header>Add a new track</Modal.Header>\n        <Modal.Content>\n          {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n          <AddAndReportNewTrackForm\n            onSubmit={submitNewTrack}\n            onCancel={closeModal}\n          />\n        </Modal.Content>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default AddAndReportNewTrack;\n","import React, { useState, MouseEvent } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { addTrackToReport } from '../../../store/report/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { Form, Search, Button, Header } from 'semantic-ui-react';\n\nimport AddAndReportNewTrack from './AddAndReportNewTrack';\nimport { useSearchTracksHook } from '../../../hooks/searchTracksHook';\n\nimport { ApplicationState } from '../../../store/types';\nimport { AutocompleteResultType } from '../../../store/report/types';\n\ninterface NewTrackToReportType {\n  track_id: number;\n  report_id?: number;\n  length: number;\n  sortable_rank: number;\n}\n\ninterface ResultDisplay {\n  track_id: number;\n  track_title: string;\n  artist: string;\n  album: string;\n  length: number;\n}\n\nconst AutocompleteSearch: React.FC = () => {\n  const [trackToSave, setTrackToSave] = useState<NewTrackToReportType | null>(\n    null\n  );\n  const [redirect, setRedirect] = useState(false);\n  const { setInputText, search } = useSearchTracksHook();\n\n  const report = useSelector((state: ApplicationState) => state.report);\n  const dispatch = useDispatch();\n\n  const handleResultSelect = (\n    _e: MouseEvent,\n    { result }: AutocompleteResultType\n  ) => {\n    const newTrackToReport = {\n      track_id: result.value,\n      report_id: report.reportDetails?.id,\n      length: result.length,\n      sortable_rank: report.report.length + 1,\n    };\n    setTrackToSave(newTrackToReport);\n  };\n\n  const saveClick = () => {\n    if (!trackToSave) {\n      dispatch(setNotification('Please select a track to add!', 'fail'));\n    } else {\n      dispatch(addTrackToReport(trackToSave));\n      setTrackToSave(null);\n    }\n  };\n\n  let results;\n  if (search.result === undefined) {\n    results = [];\n  } else {\n    results = search.result.map((result: ResultDisplay) => ({\n      key: result.track_id,\n      title: result.track_title,\n      description: `${result.artist}:\n                    ${result.album}`,\n      length: result.length,\n      value: result.track_id,\n    }));\n  }\n\n  const goToAdvancedSearch = () => {\n    setRedirect(true);\n  };\n\n  if (redirect) {\n    return <Redirect to='/search' />;\n  }\n  return (\n    <div style={{ marginLeft: '1rem', marginBottom: '1rem' }}>\n      <Form>\n        <Header>Search</Header>\n        <Form.Group>\n          <Form.Field width={8}>\n            <Search\n              loading={search.loading}\n              onResultSelect={handleResultSelect}\n              onSearchChange={(e) =>\n                setInputText((e.target as HTMLInputElement).value)\n              }\n              onSelectionChange={handleResultSelect}\n              results={results}\n              style={{ cursor: 'pointer' }}\n            />\n          </Form.Field>\n          <Form.Field width={8}>\n            <Button color='green' onClick={saveClick}>\n              Add to report\n            </Button>\n          </Form.Field>\n        </Form.Group>\n        <Form.Group>\n          <Form.Field width={8}>\n            {' '}\n            <Button onClick={goToAdvancedSearch} color='blue'>\n              Advanced search\n            </Button>\n          </Form.Field>\n          <Form.Field width={6}>\n            {' '}\n            <AddAndReportNewTrack\n              report_id={report.reportDetails?.id}\n              sortable_rank={report.report.length + 1}\n            />\n          </Form.Field>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n};\n\nexport default AutocompleteSearch;\n","import { useState } from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport useConstant from 'use-constant';\nimport { useAsync } from 'react-async-hook';\nimport searchService from '../store/search/services';\n\nexport const useSearchTracksHook = () => {\n  const [inputText, setInputText] = useState('');\n\n  // Debounce the original search async function\n  const debouncedSearchTrack = useConstant(() =>\n    AwesomeDebouncePromise(searchService.getTracksForAutocompleteSearch, 400)\n  );\n  const search = useAsync(\n    async () => {\n      if (inputText.length === 0) {\n        return [];\n      } else {\n        return debouncedSearchTrack(inputText);\n      }\n    },\n    // Ensure a new request is made everytime the text changes (even if it's debounced)\n    [inputText]\n  );\n  return {\n    inputText,\n    setInputText,\n    search,\n  };\n};\n","import React from 'react';\nimport moment from 'moment';\nimport { Formik, Form } from 'formik';\nimport { Datepicker } from 'react-formik-ui';\nimport { Button, Grid } from 'semantic-ui-react';\nimport { SelectField } from '../../layout/forms/FormFields';\nimport { startTimeOptions, endTimeOptions } from '../../../constants';\n\nimport { ReportDetails } from '../../../store/report/types';\nimport { PlaylogParams } from '../../../store/report/types';\n\ninterface Props {\n  reportDetails: ReportDetails | null;\n  onSubmit: (values: PlaylogParams) => void;\n  sortable_rank_start: number;\n}\n\nconst GetPlaylogForm: React.FC<Props> = ({\n  reportDetails,\n  onSubmit,\n  sortable_rank_start,\n}) => {\n  const studioOptions = [\n    {\n      key: '928',\n      label: 'Studio 1',\n      value: '928',\n    },\n    {\n      key: '1047',\n      label: 'Studio 2',\n      value: '1047',\n    },\n  ];\n\n  return (\n    <Formik\n      initialValues={{\n        studioId: '928',\n        date: moment(reportDetails?.program_date).format('YYYY-MM-DD'),\n        startTime: reportDetails?.program_start_time.slice(0, 2) || '',\n        endTime: reportDetails?.program_end_time.slice(0, 2) || '',\n        report_id: reportDetails?.id || 0,\n        sortable_rank_start: sortable_rank_start,\n      }}\n      onSubmit={onSubmit}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            <Grid>\n              <Grid.Column width={8}>\n                <label>Select date</label>\n                <Datepicker\n                  name='date'\n                  dateFormat='dd.MM.yyyy'\n                  placeholder='dd.mm.yyyy'\n                />{' '}\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Studio'\n                  name='studioId'\n                  options={studioOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Starting'\n                  name='startTime'\n                  options={startTimeOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Ending'\n                  name='endTime'\n                  options={endTimeOptions}\n                />\n              </Grid.Column>\n            </Grid>\n\n            <Button style={{ marginTop: '1rem' }} type='submit' color='green'>\n              Get Tracks\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default GetPlaylogForm;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment';\nimport { Header } from 'semantic-ui-react';\nimport { getPlaylogTracks } from '../../../store/report/actions';\nimport { ApplicationState } from '../../../store/types';\nimport { PlaylogParams } from '../../../store/report/types';\n\nimport GetPlaylogForm from './GetPlaylogForm';\n\nconst GetPlaylogTracks: React.FC = () => {\n  const dispatch = useDispatch();\n  const report = useSelector((state: ApplicationState) => state.report);\n\n  const submitGetplaylogTracks = (values: PlaylogParams) => {\n    const searchParams = {\n      studioId: values.studioId,\n      date: moment(values.date).format('YYYY-MM-DD'),\n      startTime: values.startTime,\n      endTime: values.endTime,\n      report_id: report.reportDetails?.id || 0,\n      sortable_rank_start: report.report.length,\n    };\n    console.log('get playlog params', searchParams);\n    dispatch(getPlaylogTracks(searchParams));\n  };\n\n  return (\n    <React.Fragment>\n      <Header>Get tracks from playlog</Header>\n      <div style={{ color: 'red', marginBottom: '2rem' }}>\n        In the demo app playlog data is only available on dates between\n        2020-03-01 - 2020-03-31\n      </div>\n      <GetPlaylogForm\n        onSubmit={submitGetplaylogTracks}\n        reportDetails={report.reportDetails}\n        sortable_rank_start={report.report.length}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default GetPlaylogTracks;\n","import React from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\nimport AutocompleteSearch from '../AutocompleteSearch';\nimport GetPlaylogTracks from '../GetPlaylogTracks';\n\nconst AddTracksToReport: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Header>Add a track to the report:</Header>\n      <Segment.Group horizontal>\n        <Segment>\n          <AutocompleteSearch />\n        </Segment>\n        <Segment>\n          <GetPlaylogTracks />\n        </Segment>\n      </Segment.Group>\n    </React.Fragment>\n  );\n};\n\nexport default AddTracksToReport;\n","import React from 'react';\nimport moment from 'moment';\nimport { Formik, Field } from 'formik';\nimport { Datepicker, Checkbox, Form } from 'react-formik-ui';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport {\n  SelectField,\n  TextField,\n  NumberField,\n  SelectFieldOptions,\n} from '../../layout/forms/FormFields';\nimport {\n  startTimeOptions,\n  endTimeOptions,\n  reportStatusOptions,\n} from '../../../constants';\nimport { ReportDetails } from '../../../store/report/types';\nimport { CurrentUser } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: ReportDetails) => void;\n  programOptions: Array<SelectFieldOptions>;\n  userOptions: Array<SelectFieldOptions>;\n  reportDetails: ReportDetails;\n  onRerunChange: () => void;\n  rerun: number | null | undefined;\n  duplicateReportClick: (values: ReportDetails) => void;\n  currentUser: CurrentUser | null;\n}\n\nconst ReportDetailsForm: React.FC<Props> = ({\n  onSubmit,\n  duplicateReportClick,\n  onRerunChange,\n  programOptions,\n  userOptions,\n  reportDetails,\n  rerun,\n  currentUser,\n}) => {\n  let userField: JSX.Element | null;\n  if (currentUser?.level === 1) {\n    userField = null;\n  } else {\n    userField = (\n      <SelectField label='User' name='user_id' options={userOptions} />\n    );\n  }\n  return (\n    <Grid divided='vertically'>\n      <Grid.Row columns={2}>\n        <Grid.Column>\n          <Header>Report details:</Header>\n          <Formik\n            initialValues={{\n              id: reportDetails.id,\n              program_name: reportDetails.program_name,\n              program_no: reportDetails.program_no,\n              program_dj: reportDetails.program_dj,\n              program_date: moment(reportDetails.program_date).format(\n                'YYYY-MM-DD'\n              ),\n              program_start_time: reportDetails.program_start_time,\n              program_end_time: reportDetails.program_end_time,\n              program_id: reportDetails.program_id,\n              rerun: reportDetails.rerun,\n              status: reportDetails.status,\n              user_id: reportDetails.user_id,\n              username: reportDetails.username,\n              first_name: reportDetails.first_name,\n              last_name: reportDetails.last_name,\n            }}\n            onSubmit={onSubmit}\n            validate={(values) => {\n              console.log(values);\n              const requiredError = 'Field is required';\n              const invalidTimeError = 'Check start and end times!';\n              const errors: { [field: string]: string } = {};\n              if (!values.program_dj) {\n                errors.name = requiredError;\n              }\n              if (values.program_start_time === undefined) {\n                errors.name = requiredError;\n              }\n              if (values.program_end_time === undefined) {\n                errors.name = requiredError;\n              }\n              if (\n                parseInt(values.program_end_time) <=\n                  parseInt(values.program_start_time) &&\n                values.program_end_time !== '23:59'\n              ) {\n                errors.program_end_time = invalidTimeError;\n              }\n              return errors;\n            }}\n          >\n            {({ isValid, values }) => {\n              return (\n                <React.Fragment>\n                  <Form className='form ui'>\n                    <SelectField\n                      label='Program'\n                      name='program_id'\n                      options={programOptions}\n                    />\n                    <Field\n                      label='Program number'\n                      name='program_no'\n                      component={NumberField}\n                      min={0}\n                      max={999}\n                    />\n                    <Field\n                      label='DJ'\n                      placeholder='DJ'\n                      name='program_dj'\n                      component={TextField}\n                    />\n                    <Grid style={{ marginBottom: '0.5rem' }}>\n                      <Grid.Column width={5} style={{ marginTop: '0.3rem' }}>\n                        <label style={{ fontWeight: 'bold' }}>\n                          Program date\n                        </label>\n                        <Datepicker\n                          name='program_date'\n                          dateFormat='dd.MM.yyyy'\n                          placeholder='dd.mm.yyyy'\n                        />{' '}\n                      </Grid.Column>\n                      <Grid.Column width={5}>\n                        <SelectField\n                          label='Start time'\n                          name='program_start_time'\n                          options={startTimeOptions}\n                        />\n                      </Grid.Column>\n                      <Grid.Column width={5}>\n                        <SelectField\n                          label='End time'\n                          name='program_end_time'\n                          options={endTimeOptions}\n                        />\n                      </Grid.Column>\n                    </Grid>\n                    <SelectField\n                      label='Report status'\n                      name='status'\n                      options={reportStatusOptions}\n                    />\n                    {userField}\n                    <label style={{ fontWeight: 'bold' }}>Rerun</label>\n                    <Checkbox\n                      name='rerun'\n                      label=''\n                      onChange={onRerunChange}\n                      checked={!!rerun}\n                      style={{ marginTop: '0.2rem' }}\n                    />\n                    <Button\n                      style={{ marginTop: '1rem' }}\n                      type='submit'\n                      floated='left'\n                      color='green'\n                      disabled={!isValid}\n                    >\n                      Save changes\n                    </Button>\n                  </Form>\n                  <Button\n                    style={{ marginTop: '1rem' }}\n                    onClick={() => duplicateReportClick(values)}\n                  >\n                    Duplicate report\n                  </Button>\n                </React.Fragment>\n              );\n            }}\n          </Formik>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nexport default ReportDetailsForm;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Segment } from 'semantic-ui-react';\nimport ReportDetailsForm from './ReportDetailsForm';\nimport { updateReport, copyReport } from '../../../store/report/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { ReportDetails } from '../../../store/report/types';\nimport { ApplicationState } from '../../../store/types';\n\nconst ReportDetailsIndex: React.FC = () => {\n  const dispatch = useDispatch();\n  const report = useSelector((state: ApplicationState) => state.report);\n  const user = useSelector((state: ApplicationState) => state.user);\n  const program = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const [rerun, setRerun] = useState<number | null | undefined>(\n    report.reportDetails?.rerun\n  );\n  const [redirect, setRedirect] = useState<boolean>(false);\n\n  const getRerun = () => {\n    if (!rerun) {\n      setRerun(1);\n    } else {\n      setRerun(null);\n    }\n  };\n\n  if (\n    report.reportDetails === null ||\n    user.users === null ||\n    program.allPrograms === null\n  ) {\n    return (\n      <Segment>\n        <div>loading...</div>\n      </Segment>\n    );\n  }\n\n  const programOptions = program.allPrograms.map((program) => ({\n    key: program.id,\n    label: program.name,\n    value: program.id,\n  }));\n  const userOptions = user.users.map((user) => ({\n    key: user.id,\n    label: `${user.first_name} ${user.last_name}`,\n    value: user.id,\n  }));\n\n  const saveChanges = (values: ReportDetails) => {\n    const reportToUpdate = {\n      ...values,\n      rerun,\n    };\n    dispatch(updateReport(reportToUpdate));\n    dispatch(setNotification('Report details updated', 'success'));\n  };\n\n  const duplicateReportClick = (values: ReportDetails) => {\n    const reportToDuplicate = {\n      program_name: values.program_name,\n      program_no: values.program_no,\n      program_dj: values.program_dj,\n      program_date: values.program_date,\n      program_start_time: values.program_start_time,\n      program_end_time: values.program_end_time,\n      program_id: values.program_id,\n      rerun,\n      status: values.status,\n      user_id: values.user_id,\n      username: values.username,\n      first_name: values.first_name,\n      last_name: values.last_name,\n    };\n    dispatch(copyReport(reportToDuplicate, report.report));\n    dispatch(setNotification('Report duplicated!', 'success'));\n    setRedirect(true);\n    setTimeout(() => {\n      setRedirect(false);\n    }, 300);\n  };\n\n  if (redirect && report.newReport !== null) {\n    return <Redirect to={`../reports/${report.newReport.id}`} />;\n  }\n\n  return (\n    <div>\n      <ReportDetailsForm\n        reportDetails={report.reportDetails}\n        onSubmit={saveChanges}\n        programOptions={programOptions}\n        userOptions={userOptions}\n        onRerunChange={getRerun}\n        rerun={rerun}\n        duplicateReportClick={duplicateReportClick}\n        currentUser={login.currentUser}\n      />\n    </div>\n  );\n};\n\nexport default ReportDetailsIndex;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ReactDragListView from 'react-drag-listview';\nimport { Header, Container, Button } from 'semantic-ui-react';\nimport {\n  getOneReport,\n  getReportDetails,\n  deleteChecked,\n  updateSortableRank,\n} from '../../store/report/actions';\n\nimport ReportTrackList from './ReportWithTracks/ReportTrackList';\nimport AddTracksToReport from './AddTracksToReport';\nimport ReportDetailsIndex from './ReportDetails';\n\nimport { ApplicationState } from '../../store/types';\nimport { ReportItem } from '../../store/report/types';\n\ninterface Props {\n  id: number;\n}\n\nconst ReportTrackIndex: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  const report = useSelector((state: ApplicationState) => state.report);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const [dragState, setDragState] = useState<Array<ReportItem>>(report.report);\n\n  useEffect(() => {\n    dispatch(getReportDetails(id));\n    dispatch(getOneReport(id));\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    let timer1 = setTimeout(() => {\n      dispatch(getOneReport(id));\n    }, 1000);\n    return () => {\n      clearTimeout(timer1);\n    };\n    // eslint-disable-next-line\n  }, [report.playlog]);\n\n  // fetch tracks after sorting changes\n  useEffect(() => {\n    dispatch(updateSortableRank(dragState));\n    // eslint-disable-next-line\n  }, [dragState]);\n\n  const clickDeleteChecked = () => {\n    const remainingTracks = report.report.filter((item) => {\n      return !report.checkedForDelete.includes(item.report_track_id);\n    });\n    dispatch(deleteChecked(report.checkedForDelete, id, remainingTracks));\n  };\n\n  const deleteCheckedButton = (\n    <Button\n      color='red'\n      onClick={clickDeleteChecked}\n      style={{\n        marginLeft: '1rem',\n        marginBottom: '1rem',\n        marginTop: '1rem',\n      }}\n    >\n      Delete Selected\n    </Button>\n  );\n  const array = report.report;\n  const dragProps = {\n    onDragEnd(fromIndex: number, toIndex: number) {\n      const item = array.splice(fromIndex, 1)[0];\n      array.splice(toIndex, 0, item);\n      setDragState(array);\n    },\n    nodeSelector: 'tr',\n    handleSelector: 'i.arrows',\n  };\n\n  if (\n    login.currentUser?.level === 1 &&\n    login.currentUser.id !== report.reportDetails?.user_id\n  ) {\n    return null;\n  }\n\n  if (report.report.length === 0) {\n    return (\n      <Container>\n        <Header>Report</Header>\n        <div>No tracks added. Please add tracks from below</div>\n        <AddTracksToReport />\n        <ReportDetailsIndex />\n      </Container>\n    );\n  }\n  return (\n    <Container>\n      <Header>Report</Header>\n      <ReactDragListView {...dragProps}>\n        <ReportTrackList report={report} />\n      </ReactDragListView>\n      {deleteCheckedButton}\n      <AddTracksToReport />\n      <ReportDetailsIndex />\n    </Container>\n  );\n};\n\nexport default ReportTrackIndex;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { downloadReport } from '../../store/reportList/services';\nimport { ReportTransfer } from '../../store/reportList/types';\n\ninterface Props {\n  item: ReportTransfer;\n}\n\nconst RepotTransferListItem: React.FC<Props> = ({ item }) => {\n  const downloadTransfer = (filename: string) => {\n    downloadReport(filename);\n  };\n\n  return (\n    <Table.Row>\n      <Table.Cell>{item.created_at}</Table.Cell>\n      <Table.Cell>\n        {item.first_name} {item.last_name}\n      </Table.Cell>\n      <Table.Cell>{moment(item.period).format('MM/YYYY')}</Table.Cell>\n      <Table.Cell>\n        <button\n          type='button'\n          className='link-btn'\n          onClick={() => downloadTransfer(item.filename)}\n        >\n          {item.filename}\n        </button>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default RepotTransferListItem;\n","import React from 'react';\nimport { Container, Table, Dimmer, Loader } from 'semantic-ui-react';\nimport ReportTransferListItem from './ReportTransferListItem';\n\nimport { ReportTransfer } from '../../store/reportList/types';\nimport { CurrentUser } from '../../store/login/types';\n\ninterface Props {\n  reportTransferList: Array<ReportTransfer>;\n  currentUser: CurrentUser;\n}\n\nconst ReportTransferList: React.FC<Props> = ({\n  reportTransferList,\n  currentUser,\n}) => {\n  if (reportTransferList === null) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Loading...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n  if (currentUser.level === 3 || currentUser.level === 2) {\n    return (\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Date created</Table.Cell>\n            <Table.Cell>Created by</Table.Cell>\n            <Table.Cell>Transfer file period</Table.Cell>\n            <Table.Cell>Transfer file</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {reportTransferList.map((item) => (\n            <ReportTransferListItem key={item.id} item={item} />\n          ))}\n        </Table.Body>\n      </Table>\n    );\n  }\n  return null;\n};\n\nexport default ReportTransferList;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport { Datepicker } from 'react-formik-ui';\nimport { Button, Container, Dimmer, Loader } from 'semantic-ui-react';\nimport moment from 'moment';\nimport {\n  getAllReportsByDate,\n  generateReportTransfer,\n} from '../../store/reportList/actions';\n\nimport { ReportListState } from '../../store/reportList/types';\nimport { CurrentUser } from '../../store/login/types';\n\ninterface Props {\n  reportList: ReportListState;\n  currentUser: CurrentUser;\n}\n\nconst ReportTransferGenerator: React.FC<Props> = ({\n  reportList,\n  currentUser,\n}) => {\n  const dispatch = useDispatch();\n  const [pickerDate, setPickerDate] = useState(\n    moment(new Date()).format('YYYY-MM')\n  );\n\n  useEffect(() => {\n    dispatch(getAllReportsByDate(moment(pickerDate).format('YYYY-MM')));\n    // eslint-disable-next-line\n  }, [pickerDate]);\n\n  const getTransferFile = () => {\n    const params = {\n      user_id: currentUser.id,\n      status: 1,\n      period: moment(pickerDate).format('YYYY-MM'),\n      filename: `${moment(new Date()).format('YYYYMMDDhhmmss')}.txt`,\n    };\n    dispatch(generateReportTransfer(params));\n  };\n\n  if (reportList.reportList === null) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Loading...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  if (reportList.loading === true) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Loading...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n  return (\n    <Formik\n      initialValues={{\n        pickerDate: '',\n      }}\n      onSubmit={getTransferFile}\n      validate={(values) => {\n        setPickerDate(moment(values.pickerDate).format('YYYY-MM'));\n      }}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            <label style={{ fontWeight: 'bold' }}>\n              Select month to create transfer from\n            </label>\n            <Datepicker\n              name='pickerDate'\n              dateFormat='MMMM yyyy'\n              placeholder='Select month...'\n            />\n\n            <Button style={{ marginTop: '1rem' }} type='submit' color='green'>\n              Submit\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ReportTransferGenerator;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Header } from 'semantic-ui-react';\n\nimport ReportTransferList from './ReportTransferList';\nimport ReportTransferFileGenerator from './ReportTransferGenerator';\n\nimport { getAllTransfers } from '../../store/reportList/actions';\nimport { ApplicationState } from '../../store/types';\n\nconst ReportTransfer: React.FC = () => {\n  const dispatch = useDispatch();\n  const reportList = useSelector((state: ApplicationState) => state.reportList);\n  const login = useSelector((state: ApplicationState) => state.login);\n\n  useEffect(() => {\n    dispatch(getAllTransfers());\n    // eslint-disable-next-line\n  }, [reportList.lastTransfer]);\n  if (login.currentUser?.level === 3 || login.currentUser?.level === 2) {\n    return (\n      <Container>\n        <Header>Transfer files</Header>\n        <ReportTransferFileGenerator\n          reportList={reportList}\n          currentUser={login.currentUser}\n        />\n        <ReportTransferList\n          reportTransferList={reportList.reportTransferList}\n          currentUser={login.currentUser}\n        />\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default ReportTransfer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { SelectField, TextField } from '../layout/forms/FormFields';\nimport { Button, Grid } from 'semantic-ui-react';\nimport { advancedSearch } from '../../store/search/actions';\nimport { AdvancedSearchParamsType } from '../../store/search/types';\n\nconst SearchForm = () => {\n  const dispatch = useDispatch();\n\n  const searchTargetOptions = [\n    {\n      key: 1,\n      label: 'Tracks',\n      value: 'tr',\n    },\n    {\n      key: 2,\n      label: 'Artists',\n      value: 'ar',\n    },\n    {\n      key: 3,\n      label: 'Albums',\n      value: 'al',\n    },\n  ];\n\n  const handleSearch = (values: AdvancedSearchParamsType) => {\n    dispatch(advancedSearch(values));\n  };\n  return (\n    <Formik\n      initialValues={{\n        query: '',\n        kind: 'ar',\n      }}\n      onSubmit={handleSearch}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            <Grid>\n              <Grid.Column width={6}>\n                <Field\n                  label='Search query'\n                  placeholder='Artist, album, track...'\n                  name='query'\n                  component={TextField}\n                />\n              </Grid.Column>\n              <Grid.Column width={6}>\n                <SelectField\n                  label='Search for'\n                  name='kind'\n                  options={searchTargetOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={6}>\n                <Button color='green' type='submit'>\n                  Search\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default SearchForm;\n","import { Dispatch } from 'redux';\nimport searchService from './services';\nimport {\n  AUTOCOMPLETE_RESULTS,\n  SET_SEARCH_LOADING,\n  TOP_100,\n  GET_DISCOGS_DATA,\n  CLEAR_DISCOGS_DATA,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_CHANGE_ALBUM_OPTIONS,\n  GET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ALBUM_OPTIONS,\n  AdvancedSearchQueryType,\n  DiscogsQueryType,\n  DiscogsDataType,\n  Top100QueryType,\n} from './types';\n\nexport const getAutocompleteResults = (query: string) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.getTracksForAutocompleteSearch(query);\n    dispatch({\n      type: AUTOCOMPLETE_RESULTS,\n      data: results,\n    });\n  } catch (error) {\n    console.log('searchActions error getting autocomplete results', error);\n  }\n};\n\nexport const advancedSearch = (searchParams: AdvancedSearchQueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.advancedSearch(searchParams);\n    dispatch({\n      type: ADVANCED_RESULTS,\n      data: results,\n    });\n  } catch (error) {\n    console.log('searchActions error getting advanced results', error);\n  }\n};\n\nexport const sortAdvancedResults = (sortBy: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SORT_ADVANCED_RESULTS,\n      data: sortBy,\n    });\n  } catch (error) {\n    console.log('searchActions error sorting advanced results', error);\n  }\n};\n\nexport const getCatIdFromDiscogs = (query: DiscogsQueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    let catId: string = '';\n    let year: string = '';\n    let label: string = '';\n    const results = await searchService.getDiscogsData(query);\n\n    console.log(results.results.length);\n    if (results.results.length === 0) {\n      catId = 'EI ILMOITETTU';\n    } else if (results.results[0].catno !== 'none') {\n      console.log(results.results[0]);\n\n      catId = results.results[0].catno;\n    } else if (results.results[1].catno !== 'none') {\n      console.log(results.results[1]);\n\n      catId = results.results[1].catno;\n    } else if (results.results[2].catno !== 'none') {\n      console.log(results.results[2]);\n\n      catId = results.results[2].catno;\n    } else if (results.results[3].catno !== 'none') {\n      console.log(results.results[3]);\n\n      catId = results.results[3].catno;\n    } else if (results.results[4].catno !== 'none') {\n      console.log(results.results[4]);\n\n      catId = results.results[4].catno;\n    } else {\n      catId = 'EI ILMOITETTU';\n    }\n    const discogsData: DiscogsDataType = {\n      cat_id: catId,\n      year,\n      label,\n    };\n    console.log(catId);\n    dispatch({\n      type: GET_DISCOGS_DATA,\n      data: discogsData,\n    });\n  } catch (error) {\n    console.log('searchActions error getting discogs data', error);\n  }\n};\n\nexport const clearDiscogsCatId = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CLEAR_DISCOGS_DATA,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getTop100 = (query: Top100QueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.getTop100(query);\n    dispatch({\n      type: TOP_100,\n      data: results,\n      query,\n    });\n  } catch (error) {\n    console.log('searchActions error getting top100 results', error);\n  }\n};\n","export const AUTOCOMPLETE_RESULTS = 'AUTOCOMPLETE_RESULTS';\nexport const ADVANCED_RESULTS = 'ADVANCED_RESULTS';\nexport const SORT_ADVANCED_RESULTS = 'SORT_ADVANCED_RESULTS';\nexport const GET_DISCOGS_DATA = 'GET_DISCOGS_DATA';\nexport const CLEAR_DISCOGS_DATA = 'CLEAR_DISCOGS_DATA';\nexport const TOP_100 = 'TOP_100';\nexport const SET_SEARCH_LOADING = 'SET_SEARCH_LOADING';\nexport const GET_CHANGE_ALBUM_OPTIONS = 'GET_CHANGE_ALBUM_OPTIONS';\nexport const GET_CHANGE_ARTIST_OPTIONS = 'GET_CHANGE_ARTIST_OPTIONS';\nexport const RESET_CHANGE_ALBUM_OPTIONS = 'RESET_CHANGE_ALBUM_OPTIONS';\nexport const RESET_CHANGE_ARTIST_OPTIONS = 'RESET_CHANGE_ARTIST_OPTIONS';\nexport const MERGE_ALBUMS = 'MERGE_ALBUMS';\nexport const MERGE_ARTISTS = 'MERGE_ARTISTS';\nexport const MERGE_TRACKS = 'MERGE_TRACKS';\n\nexport interface AdvancedResultsType {\n  artist_name: string;\n  artist_id: number;\n  album_name: string;\n  album_id: number;\n  track_title: string;\n  track_id: number;\n  length: number;\n  program_date: string;\n  report_id: number;\n}\n\nexport interface AdvancedSearchQueryType {\n  kind: string;\n  query: string;\n}\n\nexport interface Top100Type {\n  count: number;\n  track_id: number;\n  track_title: string;\n  album: string;\n  artist: string;\n  album_id: number;\n  artist_id: number;\n  length: number;\n}\n\nexport interface Top100QueryType {\n  list: string;\n  start_date: string;\n  end_date: string;\n}\n\nexport type SortAdvancedResultsType = number | null;\n\nexport interface DiscogsDataType {\n  year: string;\n  cat_id: string;\n  label: string;\n}\n\nexport interface DiscogsQueryType {\n  album: string;\n  artist: string;\n}\n\nexport interface MergeParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n}\n\nexport interface MergeTrackParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n  newName: string;\n}\n\nexport interface MergeArtistsParamsType {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface AdvancedSearchParamsType {\n  query: string;\n  kind: string;\n}\n\nexport interface SearchState {\n  top100: Array<Top100Type>;\n  top100Query: Top100QueryType | null;\n  advancedResults: Array<AdvancedResultsType>;\n  sortAdvancedResults: number | null;\n  loading: boolean;\n  discogsData: DiscogsDataType | null;\n}\n\n// search action types\ninterface AdvancedResultsAction {\n  type: typeof ADVANCED_RESULTS;\n  data: Array<AdvancedResultsType>;\n}\n\ninterface Top100Action {\n  type: typeof TOP_100;\n  data: Array<Top100Type>;\n  query: Top100QueryType;\n}\n\ninterface SortAdvancedResultsAction {\n  type: typeof SORT_ADVANCED_RESULTS;\n  data: SortAdvancedResultsType;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_SEARCH_LOADING;\n}\n\ninterface GetDiscogsDataAction {\n  type: typeof GET_DISCOGS_DATA;\n  data: DiscogsDataType;\n}\n\ninterface ClearDiscogsDataAction {\n  type: typeof CLEAR_DISCOGS_DATA;\n}\n\ninterface MergeTracksAction {\n  type: typeof MERGE_TRACKS;\n  data: MergeTrackParamsType;\n}\n\ninterface MergeArtistsAction {\n  type: typeof MERGE_ARTISTS;\n  data: MergeArtistsParamsType;\n}\n\nexport type SearchActionTypes =\n  | AdvancedResultsAction\n  | Top100Action\n  | SortAdvancedResultsAction\n  | SetLoadingAction\n  | GetDiscogsDataAction\n  | ClearDiscogsDataAction\n  | MergeTracksAction\n  | MergeArtistsAction;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n// import MergeArtists from './MergeArtists';\n// import MergeAlbums from './MergeAlbums';\n// import MergeTracks from './MergeTracks';\nimport AddTrackToCurrentReport from '../track/AddTrackToCurrentReport';\nimport { AdvancedResultsType } from '../../store/search/types';\n\ninterface Props {\n  result: AdvancedResultsType;\n}\n\nconst SearchResultItem: React.FC<Props> = ({ result }) => {\n  if (result === null) {\n    return null;\n  }\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <Link to={`../artist/${result.artist_id}`}>{result.artist_name}</Link>\n        {/* <MergeArtists\n          artist_id={result.artist_id}\n          artist_name={result.artist_name}\n        /> */}\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../album/${result.album_id}`}>{result.album_name}</Link>\n        {/* <MergeAlbums\n          album_id={result.album_id}\n          album_name={result.album_name}\n        /> */}\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../track/${result.track_id}`}>{result.track_title}</Link>\n        {/* <MergeTracks\n          track_id={result.track_id}\n          track_title={result.track_title}\n        /> */}\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../reports/${result.report_id}`}>{result.program_date}</Link>\n      </Table.Cell>\n      <Table.Cell>\n        <AddTrackToCurrentReport\n          track_title={result.track_title}\n          track_id={result.track_id}\n          length={result.length}\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default SearchResultItem;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport { SelectField } from '../layout/forms/FormFields';\nimport { Grid } from 'semantic-ui-react';\nimport { sortAdvancedResults } from '../../store/search/actions';\n\ninterface SortByType {\n  sortBy: number;\n}\n\nconst SortResults = () => {\n  const dispatch = useDispatch();\n  const [sortBy, setSortBy] = useState(1);\n\n  useEffect(() => {\n    dispatch(sortAdvancedResults(sortBy));\n    // eslint-disable-next-line\n  }, [sortBy]);\n\n  const onChange = (values: SortByType) => {\n    setSortBy(values.sortBy);\n  };\n\n  const sortOptions = [\n    {\n      key: 1,\n      label: 'Track title',\n      value: 1,\n    },\n    {\n      key: 2,\n      label: 'Artist name',\n      value: 2,\n    },\n  ];\n\n  return (\n    <Grid columns={4}>\n      <Grid.Column>\n        <Formik\n          initialValues={{\n            sortBy: 1,\n          }}\n          onSubmit={onChange}\n          validate={(values) => {\n            setSortBy(Number(values.sortBy));\n          }}\n        >\n          {() => {\n            return (\n              <Form className='form ui'>\n                <SelectField\n                  label='Sort by'\n                  name='sortBy'\n                  options={sortOptions}\n                />\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SortResults;\n","/* eslint-disable indent */\n/* eslint-disable no-nested-ternary */\nimport React from 'react';\nimport { Table, Loader, Dimmer } from 'semantic-ui-react';\nimport SearchResultItem from './SearchResultItem';\nimport SortResults from './SortResults';\n\nimport { SearchState } from '../../store/search/types';\n\ninterface Props {\n  search: SearchState;\n}\n\nconst SearchResults: React.FC<Props> = ({ search }) => {\n  if (search.advancedResults.length === 0) {\n    return (\n      <div style={{ textAlign: 'center', marginTop: '5rem' }}>\n        No results. Please enter a query\n      </div>\n    );\n  }\n  if (search.loading === true) {\n    return (\n      <Dimmer active>\n        <Loader>Loading results...</Loader>\n      </Dimmer>\n    );\n  }\n  let resultsToShow = search.advancedResults;\n\n  resultsToShow =\n    search.sortAdvancedResults === 2\n      ? resultsToShow\n      : resultsToShow.sort((a, b) =>\n          a.track_title > b.track_title\n            ? 1\n            : b.track_title > a.track_title\n            ? -1\n            : 0\n        );\n\n  resultsToShow =\n    search.sortAdvancedResults === 1\n      ? resultsToShow\n      : resultsToShow.sort((a, b) =>\n          a.artist_name > b.artist_name\n            ? 1\n            : b.artist_name > a.artist_name\n            ? -1\n            : 0\n        );\n\n  return (\n    <div style={{ marginTop: '2rem' }}>\n      <SortResults />\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Artist</Table.Cell>\n            <Table.Cell>Album</Table.Cell>\n            <Table.Cell>Track</Table.Cell>\n            <Table.Cell>Latest play on</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {resultsToShow.map((result) => (\n            <SearchResultItem key={result.track_id} result={result} />\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nexport default SearchResults;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  SelectField,\n  TextField,\n  NumberField,\n  TextAreaField,\n} from '../../layout/forms/FormFields';\nimport { countryOptions, recordCountryOptions } from '../../../constants';\n\nimport { AddNewTrackFormValuesType } from '../../../store/track/types';\n\ninterface Props {\n  onCancel: () => void;\n  onSubmit: (values: AddNewTrackFormValuesType) => void;\n  error?: string;\n}\n\nconst AddTrackForm: React.FC<Props> = ({ onSubmit, onCancel, error }) => {\n  return (\n    <Formik\n      initialValues={{\n        track_title: '',\n        artist_name: '',\n        album_name: '',\n        label: '',\n        cat_id: '',\n        year: '',\n        disc_no: 1,\n        track_no: 1,\n        minutes: 0,\n        seconds: 0,\n        country: 0,\n        record_country: '',\n        people: '',\n        comment: '',\n        isrc: '',\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.track_title || values.track_title === '') {\n          errors.track_title = requiredError;\n        }\n        if (!values.album_name || values.album_name === '') {\n          errors.album_name = requiredError;\n        }\n        if (!values.artist_name || values.artist_name === '') {\n          errors.artist_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Artist'\n              placeholder='Artist'\n              name='artist_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Album'\n              placeholder='Album'\n              name='album_name'\n              component={RequiredTextField}\n            />\n\n            <Field\n              label='Track title'\n              placeholder='Track title...'\n              name='track_title'\n              component={RequiredTextField}\n            />\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - minutes'\n                  name='minutes'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Length - seconds'\n                  name='seconds'\n                  component={NumberField}\n                  min={0}\n                  max={59}\n                />\n              </Grid.Column>\n            </Grid>\n            <Grid>\n              <Grid.Column width={8}>\n                <Field\n                  label='Track #'\n                  name='track_no'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <Field\n                  label='Disc #'\n                  name='disc_no'\n                  component={NumberField}\n                  min={0}\n                  max={99}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Country'\n                  name='country'\n                  options={countryOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={8}>\n                <SelectField\n                  label='Recorded in'\n                  name='record_country'\n                  options={recordCountryOptions}\n                />\n              </Grid.Column>\n            </Grid>\n            <Field\n              label='Composers - one per line'\n              placeholder='LAST NAME FIRST NAME'\n              name='people'\n              component={TextAreaField}\n            />\n            <Field\n              label='Year'\n              name='year'\n              component={NumberField}\n              min={1900}\n              max={2900}\n            />\n            <Field\n              label='Spotify id'\n              placeholder='Spotify id'\n              name='spotify_id'\n              component={TextField}\n            />\n            <Field\n              label='Comment'\n              placeholder='Any additional information'\n              name='comment'\n              component={TextField}\n            />\n            <Button\n              type='submit'\n              floated='left'\n              color='green'\n              disabled={!isValid || !dirty}\n            >\n              Add\n            </Button>\n            <Button\n              floated='right'\n              style={{ marginBottom: '1rem' }}\n              type='button'\n              onClick={onCancel}\n              color='red'\n            >\n              Cancel\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddTrackForm;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Segment, Button, Icon } from 'semantic-ui-react';\nimport AddTrackForm from './AddTrackForm';\nimport { setNotification } from '../../../store/notification/actions';\nimport { addTrackToDb } from '../../../store/track/actions';\nimport { AddNewTrackFormValuesType } from '../../../store/track/types';\n\nconst AddTrackModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n  const submitNewTrack = (values: AddNewTrackFormValuesType) => {\n    const length = Number(values.minutes) * 60 + Number(values.seconds);\n    const trackToSave = {\n      ...values,\n      length,\n    };\n    dispatch(addTrackToDb(trackToSave));\n    dispatch(\n      setNotification(\n        `${trackToSave.track_title} by ${trackToSave.artist_name} has been added to database!`,\n        'success'\n      )\n    );\n    setModalOpen(false);\n  };\n  return (\n    <React.Fragment>\n      <Button\n        floated='right'\n        color='green'\n        style={{ marginBottom: '0.5rem' }}\n        onClick={() => openModal()}\n      >\n        <Icon name='add' />\n        Add a new track\n      </Button>\n      <Modal open={modalOpen} onClose={closeModal} centered={false} closeIcon>\n        <Modal.Header>Add a new track</Modal.Header>\n        <Modal.Content>\n          {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n          <AddTrackForm onSubmit={submitNewTrack} onCancel={closeModal} />\n        </Modal.Content>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default AddTrackModal;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Container, Header } from 'semantic-ui-react';\nimport SearchForm from './SearchForm';\nimport SearchResults from './SearchResults';\nimport AddTrackModal from './AddTrackModal';\n\nimport { ApplicationState } from '../../store/types';\n\nconst Search: React.FC = () => {\n  const search = useSelector((state: ApplicationState) => state.search);\n\n  return (\n    <Container>\n      <AddTrackModal />\n      <Header>Search for tracks / artists / albums</Header>\n      <SearchForm />\n      <SearchResults search={search} />\n    </Container>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { Button, Grid } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\nimport { Datepicker } from 'react-formik-ui';\nimport { SelectField } from '../layout/forms/FormFields';\nimport { Top100QueryType } from '../../store/search/types';\nimport moment from 'moment';\n\nconst listOptions = [\n  {\n    key: 1,\n    value: 'artist_id',\n    label: 'Artists',\n  },\n  {\n    key: 2,\n    value: 'track_id',\n    label: 'Tracks',\n  },\n  {\n    key: 3,\n    value: 'album_id',\n    label: 'Albums',\n  },\n];\n\ninterface Props {\n  onSubmit: (values: Top100QueryType) => void;\n}\n\nconst Top100SearchForm: React.FC<Props> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        list: 'artist_id',\n        start_date: moment(Date.now() - 7 * 24 * 3600 * 1000).format(\n          'YYYY-MM-DD'\n        ),\n        end_date: moment(new Date()).format('YYYY-MM-DD'),\n      }}\n      onSubmit={onSubmit}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            <Grid>\n              <Grid.Column width={4}>\n                <SelectField\n                  label='Get Top100'\n                  name='list'\n                  options={listOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={4} style={{ marginTop: '0.2rem' }}>\n                <label style={{ fontWeight: 'bold' }}>Starting</label>\n                <Datepicker\n                  name='start_date'\n                  dateFormat='dd.MM.yyyy'\n                  placeholder='dd.mm.yyyy'\n                />\n              </Grid.Column>\n              <Grid.Column width={4} style={{ marginTop: '0.2rem' }}>\n                <label style={{ fontWeight: 'bold' }}>Ending</label>\n                <Datepicker\n                  name='end_date'\n                  dateFormat='dd.MM.yyyy'\n                  placeholder='dd.mm.yyyy'\n                />{' '}\n              </Grid.Column>\n            </Grid>\n            <Button style={{ marginTop: '1rem' }} type='submit' color='green'>\n              Submit\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Top100SearchForm;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Album</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport AddTrackToCurrentReport from '../track/AddTrackToCurrentReport';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Album</Table.Cell>\n          <Table.Cell>Track</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n          <Table.Cell></Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/track/${t.track_id}`}>{t.track_title}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n            <Table.Cell>\n              <AddTrackToCurrentReport\n                track_title={t.track_title}\n                track_id={t.track_id}\n                length={t.length}\n              />\n            </Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Header } from 'semantic-ui-react';\nimport { ApplicationState } from '../../store/types';\nimport { Top100QueryType } from '../../store/search/types';\nimport { getTop100 } from '../../store/search/actions';\nimport moment from 'moment';\n\nimport Top100SearchForm from './Top100SearchForm';\nimport Top100ArtistList from './Top100ArtistList';\nimport Top100AlbumList from './Top100AlbumList';\nimport Top100TrackList from './Top100TrackList';\n\nconst Top100: React.FC = () => {\n  const dispatch = useDispatch();\n  const search = useSelector((state: ApplicationState) => state.search);\n\n  const getTop100Results = (values: Top100QueryType) => {\n    const top100Values = {\n      ...values,\n      end_date: moment(new Date()).format('YYYY-MM-DD'),\n    };\n    dispatch(getTop100(top100Values));\n  };\n  if (search.top100Query === null) {\n    return (\n      <Container>\n        <Header style={{ display: 'inline' }}>Top 100</Header>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n      </Container>\n    );\n  }\n  if (search.loading) {\n    return (\n      <Container>\n        <Header>Top 100</Header>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <div>Loading...</div>\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'artist_id') {\n    return (\n      <Container>\n        <Header style={{ display: 'inline' }}>Top 100</Header>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100ArtistList top100={search.top100} />\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'album_id') {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100AlbumList top100={search.top100} />\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'track_id') {\n    return (\n      <Container>\n        <Header style={{ display: 'inline' }}>Top 100</Header>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100TrackList top100={search.top100} />\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default Top100;\n","import React from 'react';\nimport { Button, Grid, Dimmer, Loader, Header } from 'semantic-ui-react';\nimport { Formik, Form, Field } from 'formik';\nimport {\n  TextField,\n  DisabledTextField,\n  NumberField,\n  SelectField,\n  TextAreaField,\n} from '../layout/forms/FormFields';\nimport { Track, UpdateTrackFormValuesType } from '../../store/track/types';\nimport { countryOptions, recordCountryOptions } from '../../constants';\n\ninterface Props {\n  currentTrack: Track;\n  onSubmit: (values: UpdateTrackFormValuesType) => void;\n}\n\nconst TrackDetailsForm: React.FC<Props> = ({ currentTrack, onSubmit }) => {\n  if (currentTrack === null) {\n    return (\n      <Dimmer>\n        <Loader>Loading track details...</Loader>\n      </Dimmer>\n    );\n  }\n  let initialPeople = '';\n  if (currentTrack.people) {\n    initialPeople = currentTrack.people\n      .replace(/\\| /, '')\n      .replace(/\\| /g, '\\n')\n      .replace(/ \\|/, '');\n  }\n  console.log('current track at track details form', currentTrack);\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Header>Track details</Header>\n        <Formik\n          initialValues={{\n            artist: currentTrack.artist,\n            album: currentTrack.album,\n            track_title: currentTrack.track_title,\n            track_id: currentTrack.track_id,\n            length: currentTrack.length,\n            minutes: Math.floor(currentTrack.length / 60),\n            seconds: currentTrack.length % 60,\n            country: currentTrack.country || 0,\n            record_country: currentTrack.record_country,\n            people: initialPeople || '',\n            disc_no: currentTrack.disc_no || 1,\n            track_no: currentTrack.track_no,\n            year: Number(currentTrack.year?.substring(0, 4)) || '',\n            label: currentTrack.label,\n            cat_id: currentTrack.cat_id,\n            isrc: currentTrack.isrc,\n            comment: currentTrack.comment || '',\n            user_id: null,\n            artist_id: currentTrack.artist_id,\n            album_id: currentTrack.album_id,\n            sortable_rank: null,\n            report_track_id: null,\n          }}\n          onSubmit={onSubmit}\n          validate={(values) => {\n            console.log(values);\n            const requiredError = 'Album name is required';\n            const errors: { [field: string]: string } = {};\n            if (!values.track_title) {\n              errors.name = requiredError;\n            }\n            return errors;\n          }}\n        >\n          {({ isValid }) => {\n            return (\n              <Form className='form ui'>\n                <Field\n                  label='Artist'\n                  placeholder='Artist'\n                  name='artist'\n                  component={DisabledTextField}\n                />\n                <Field\n                  label='Album'\n                  placeholder='Album'\n                  name='album'\n                  component={DisabledTextField}\n                />\n\n                <Field\n                  label='Track title'\n                  placeholder='Track title...'\n                  name='track_title'\n                  component={TextField}\n                />\n                <Grid>\n                  <Grid.Column width={8}>\n                    <Field\n                      label='Length - minutes'\n                      name='minutes'\n                      component={NumberField}\n                      min={0}\n                      max={999}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Field\n                      label='Length - seconds'\n                      name='seconds'\n                      component={NumberField}\n                      min={0}\n                      max={59}\n                    />\n                  </Grid.Column>\n                </Grid>\n                <Grid>\n                  <Grid.Column width={8}>\n                    <Field\n                      label='Track #'\n                      name='track_no'\n                      component={NumberField}\n                      min={0}\n                      max={999}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Field\n                      label='Disc #'\n                      name='disc_no'\n                      component={NumberField}\n                      min={0}\n                      max={99}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <SelectField\n                      label='Country'\n                      name='country'\n                      options={countryOptions}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <SelectField\n                      label='Recorded in'\n                      name='record_country'\n                      options={recordCountryOptions}\n                    />\n                  </Grid.Column>\n                </Grid>\n                <Field\n                  label='Composers - one per line'\n                  placeholder='LAST NAME FIRST NAME'\n                  name='people'\n                  component={TextAreaField}\n                />\n                <Field\n                  label='Year'\n                  name='year'\n                  component={NumberField}\n                  min={1900}\n                  max={2900}\n                />\n                <Field\n                  label='Spotify id'\n                  placeholder='Spotify id'\n                  name='spotify_id'\n                  component={TextField}\n                />\n                <Field\n                  label='Comment'\n                  placeholder='Any additional information'\n                  name='comment'\n                  component={TextField}\n                />\n                <Button\n                  type='submit'\n                  floated='left'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update track\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default TrackDetailsForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\n\nimport { PlayHistoryEntry } from '../../store/track/types';\n\ninterface Props {\n  pgm: PlayHistoryEntry;\n}\n\nconst PlayHistoryItem: React.FC<Props> = ({ pgm }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>{pgm.program_date}</Table.Cell>\n      <Table.Cell>\n        <Link to={`/reports/${pgm.report_id}`}>{pgm.program_name}</Link>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default PlayHistoryItem;\n","import React from 'react';\nimport { Table, Dimmer, Loader } from 'semantic-ui-react';\nimport PlayHistoryItem from './PlayHistoryItem';\nimport { PlayHistoryEntry } from '../../store/track/types';\n\ninterface Props {\n  playHistory: Array<PlayHistoryEntry>;\n}\n\nconst PlayHistory: React.FC<Props> = ({ playHistory }) => {\n  if (playHistory.length === 0) {\n    return (\n      <Dimmer>\n        <Loader>Ladataan...</Loader>\n      </Dimmer>\n    );\n  }\n  if (playHistory[0].result === 'No plays yet') {\n    return (\n      <React.Fragment>\n        <h4>Soittohistoria</h4>\n        <p>Ei soittoja</p>\n      </React.Fragment>\n    );\n  }\n  return (\n    <React.Fragment>\n      <h4>Play history</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Date</Table.Cell>\n            <Table.Cell>Program</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {playHistory.map((pgm) => (\n            <PlayHistoryItem key={pgm.report_id} pgm={pgm} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default PlayHistory;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport {\n  getOneTrack,\n  getOneTrackHistory,\n  updateTrack,\n} from '../../store/track/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nimport TrackDetailsForm from './TrackDetailsForm';\nimport PlayHistory from './PlayHistory';\n\nimport { ApplicationState } from '../../store/types';\nimport { UpdateTrackFormValuesType } from '../../store/track/types';\n\ninterface Props {\n  id: number;\n}\n\nconst Track: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  const track = useSelector((state: ApplicationState) => state.track);\n  const login = useSelector((state: ApplicationState) => state.login);\n  useEffect(() => {\n    dispatch(getOneTrack(id));\n    dispatch(getOneTrackHistory(id));\n    // eslint-disable-next-line\n  }, []);\n\n  if (track.currentTrack === null || track.playHistory.length === 0) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  const submitUpdateTrack = (values: UpdateTrackFormValuesType) => {\n    let regexPeople;\n    if (values.people) {\n      regexPeople = `| ${values.people.replace(/\\n/g, ' | ')} |`;\n    } else {\n      regexPeople = null;\n    }\n    const trackToUpdate = {\n      artist_name: values.artist,\n      album_name: values.album,\n      track_title: values.track_title,\n      track_id: values.track_id,\n      length: values.minutes * 60 + values.seconds,\n      country: values.country,\n      record_country: values.record_country,\n      people: regexPeople,\n      disc_no: values.disc_no,\n      track_no: values.track_no,\n      year: values.year?.toString(),\n      label: values.label,\n      cat_id: values.cat_id,\n      isrc: values.isrc,\n      comment: values.comment,\n      user_id: login.currentUser?.id,\n      artist_id: values.artist_id,\n      album_id: values.album_id,\n      sortable_rank: null,\n      report_track_id: null,\n    };\n\n    console.log('track to update', trackToUpdate);\n    dispatch(updateTrack(trackToUpdate));\n    dispatch(\n      setNotification(`Track ${values.track_title} updated!`, 'success')\n    );\n  };\n\n  return (\n    <Container>\n      <TrackDetailsForm\n        onSubmit={submitUpdateTrack}\n        currentTrack={track.currentTrack}\n      />\n      <PlayHistory playHistory={track.playHistory} />\n    </Container>\n  );\n};\n\nexport default Track;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\nimport {\n  TextField,\n  PasswordField,\n  SelectField,\n} from '../../layout/forms/FormFields';\n\nimport {\n  EditUserFormValues,\n  User,\n  UserLevelOptions,\n  UserLevel,\n} from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: EditUserFormValues) => void;\n  onCancel: () => void;\n  user: User;\n}\n\nconst levelOptions: UserLevelOptions[] = [\n  { value: UserLevel.DJ, label: 'DJ' },\n  { value: UserLevel.Staff, label: 'Staff' },\n  { value: UserLevel.Admin, label: 'Admin' },\n];\n\nconst statusOptions = [\n  { value: 1, label: 'Active' },\n  { value: 0, label: 'Inactive' },\n];\n\nconst EditUserForm: React.FC<Props> = ({ onSubmit, onCancel, user }) => {\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        confirm_password: '',\n        first_name: user.first_name,\n        last_name: user.last_name,\n        email: user.email,\n        level: user.level,\n        status: user.status,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Password - fill out field only if you wish to change the password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={TextField}\n              required\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={TextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={TextField}\n            />\n            <SelectField label='Level' name='level' options={levelOptions} />\n            <SelectField label='Status' name='status' options={statusOptions} />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditUserForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport EditUserForm from './EditUserForm';\nimport { EditUserFormValues } from '../../../store/user/types';\nimport { User } from '../../../store/user/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EditUserFormValues) => void;\n  error?: string;\n  user: User;\n}\n\nconst EditUserModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  user,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Edit info of user {user.username}</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <EditUserForm user={user} onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default EditUserModal;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Table, Icon, Confirm } from 'semantic-ui-react';\n\nimport { updateUser, deleteUser } from '../../store/user/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nimport EditUserModal from './EditUserModal';\n\nimport { EditUserFormValues } from '../../store/user/types';\nimport { User } from '../../store/user/types';\n\ninterface Props {\n  user: User;\n}\n\nconst UserListItem: React.FC<Props> = ({ user }) => {\n  const dispatch = useDispatch();\n  const [openDeleteUser, setDeleteUserOpen] = useState<boolean>(false);\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const cancelDelete = () => {\n    setDeleteUserOpen(false);\n  };\n  const confirmDelete = () => {\n    setDeleteUserOpen(false);\n    dispatch(deleteUser(user.id));\n    // setNotificationConnect(`Käyttäjä ${user.username} poistettu!`, 'success')\n  };\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitUpdatedUser = (values: EditUserFormValues) => {\n    try {\n      const userToUpdate = {\n        ...values,\n        id: user.id,\n      };\n      dispatch(updateUser(userToUpdate));\n      dispatch(\n        setNotification(\n          `${userToUpdate.first_name} ${userToUpdate.last_name} updated!`,\n          'success'\n        )\n      );\n      console.log('updating user', userToUpdate);\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  let userLevelOutPrint;\n  if (user.level === 1) {\n    userLevelOutPrint = 'DJ';\n  } else if (user.level === 2) {\n    userLevelOutPrint = 'Staff';\n  } else {\n    userLevelOutPrint = 'Admin';\n  }\n\n  let className;\n  let userStatusOutPrint;\n  if (user.status === null || user.status === 0) {\n    userStatusOutPrint = 'Inactive';\n    className = 'inactive-user';\n  } else if (user.status === 1) {\n    userStatusOutPrint = 'Active';\n    className = 'active-user';\n  }\n\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <EditUserModal\n          user={user}\n          modalOpen={modalOpen}\n          onSubmit={submitUpdatedUser}\n          error={error}\n          onClose={closeModal}\n        />\n        <button\n          style={{ border: 'none', cursor: 'pointer', color: 'teal' }}\n          onClick={openModal}\n        >\n          {user.username}\n        </button>\n      </Table.Cell>\n      <Table.Cell>\n        {user.first_name} {user.last_name}\n      </Table.Cell>\n      {/* <Table.Cell>\n        <Moment format='MMMM Do YYYY, h:mm:ss a'>{user.last_seen}</Moment>\n      </Table.Cell> */}\n      <Table.Cell>{user.last_seen}</Table.Cell>\n      <Table.Cell className={className}>{userStatusOutPrint}</Table.Cell>\n      <Table.Cell>{userLevelOutPrint}</Table.Cell>\n      <Table.Cell>\n        <Icon\n          color='red'\n          onClick={() => setDeleteUserOpen(true)}\n          name='delete'\n        />\n        <Confirm\n          content={`Are you sure you wish to delete user ${user.username}?`}\n          open={openDeleteUser}\n          onCancel={cancelDelete}\n          onConfirm={confirmDelete}\n          cancelButton='Cancel delete'\n          confirmButton='Confirm delete'\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default UserListItem;\n","import React from 'react';\nimport { Container, Table } from 'semantic-ui-react';\nimport { Users, User } from '../../store/user/types';\n\nimport UserListItem from './UserListItem';\n\ninterface Props {\n  users: Users;\n}\n\nconst UserList: React.FC<Props> = ({ users }) => {\n  return (\n    <Container>\n      <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n        <h3 style={{ display: 'inline' }}>Users</h3>\n      </div>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Username</Table.Cell>\n            <Table.Cell>Name</Table.Cell>\n            <Table.Cell>Latest login</Table.Cell>\n            <Table.Cell>Status</Table.Cell>\n            <Table.Cell>Level</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {users.map((user: User) => (\n            <UserListItem user={user} key={user.id} />\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  );\n};\n\nexport default UserList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  RequiredPasswordField,\n  SelectField,\n} from '../../layout/forms/FormFields';\n\nimport {\n  AddUserFormValues,\n  UserLevel,\n  UserLevelOptions,\n} from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: AddUserFormValues) => void;\n  onCancel: () => void;\n}\n\nconst levelOptions: UserLevelOptions[] = [\n  { value: UserLevel.DJ, label: 'DJ' },\n  { value: UserLevel.Staff, label: 'Staff' },\n  { value: UserLevel.Admin, label: 'Admin' },\n];\n\nconst AddUserForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        password: '',\n        confirm_password: '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        level: UserLevel.DJ,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.username) {\n          errors.username = requiredError;\n        }\n        if (!values.password) {\n          errors.password = requiredError;\n        }\n        if (!values.confirm_password) {\n          errors.confirm_password = requiredError;\n        }\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Username'\n              placeholder='Username'\n              name='username'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={RequiredPasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={RequiredPasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={RequiredTextField}\n            />\n            <SelectField label='Level' name='level' options={levelOptions} />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddUserForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddUserForm from './AddUserForm';\nimport { AddUserFormValues } from '../../../store/user/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: AddUserFormValues) => void;\n  error?: string;\n}\n\nconst AddUserModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new user</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <AddUserForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddUserModal;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ApplicationState } from '../../store/types';\nimport { Button, Icon, Container } from 'semantic-ui-react';\nimport UserList from './UserList';\nimport AddUserModal from './AddUserModal';\nimport { AddUserFormValues } from '../../store/user/types';\nimport { createUser } from '../../store/user/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nconst Users: React.FC = () => {\n  const users = useSelector((state: ApplicationState) => state.user);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewUser = (values: AddUserFormValues) => {\n    try {\n      dispatch(createUser(values));\n      dispatch(setNotification(`User ${values.username} created!`, 'success'));\n      closeModal();\n    } catch (e) {\n      dispatch(setNotification('Failed to create user!', 'fail'));\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n  if (login.currentUser?.level === 3) {\n    return (\n      <Container>\n        <Button\n          floated='right'\n          color='green'\n          style={{ marginBottom: '0.5rem' }}\n          onClick={() => openModal()}\n        >\n          <Icon name='add' />\n          Add a new user\n        </Button>\n        <AddUserModal\n          modalOpen={modalOpen}\n          onSubmit={submitNewUser}\n          error={error}\n          onClose={closeModal}\n        />\n        <UserList users={users.users} />\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default Users;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport axios from 'axios';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\n\nimport Album from './components/album';\nimport Artist from './components/artist';\nimport Footer from './components/layout/footer';\nimport Home from './components/layout/home';\nimport LoginForm from './components/login/LoginForm';\nimport Navbar from './components/layout/navbar';\nimport Notification from './components/layout/notification/Notification';\nimport Programs from './components/programs';\nimport ReportList from './components/reportList/ReportList';\nimport ReportTrackIndex from './components/report';\nimport ReportTransfer from './components/reportTransfer';\nimport Search from './components/search';\nimport Top100 from './components/top100';\nimport Track from './components/track';\nimport Users from './components/users';\n\nimport { initializeUser } from './store/login/actions';\nimport { initializeUsers } from './store/user/actions';\nimport { initializePrograms, getAllPrograms } from './store/program/actions';\n\nimport { ApplicationState } from './store/types';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const login = useSelector((state: ApplicationState) => state.login);\n  const notification = useSelector(\n    (state: ApplicationState) => state.notification\n  );\n\n  useEffect(() => {\n    dispatch(initializeUser());\n    dispatch(initializeUsers());\n    dispatch(initializePrograms());\n    dispatch(getAllPrograms());\n    axios.get<void>('/ping');\n    // eslint-disable-next-line\n  }, [login.currentUser?.token]);\n\n  if (login.currentUser === null) {\n    return (\n      <Container>\n        <Notification notification={notification} />\n        <LoginForm />\n        <Footer />\n      </Container>\n    );\n  }\n  if (login.currentUser?.status === null || login.currentUser?.status === 0) {\n    return (\n      <Container>\n        <Notification notification={notification} />\n        <LoginForm />\n        <div>Credentials deactivated. Please contact the administrator.</div>\n        <Footer />\n      </Container>\n    );\n  }\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar />\n        <Notification notification={notification} />\n      </div>\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/reports' component={ReportList} />\n        <Route exact path='/transfer' component={ReportTransfer} />\n        <Route exact path='/top100' component={Top100} />\n        <Route exact path='/search' component={Search} />\n        <Route exact path='/programs' component={Programs} />\n        <Route exact path='/users' component={Users} />\n        <Route\n          path='/album/:id'\n          render={({ match }) => {\n            return <Album id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/artist/:id'\n          render={({ match }) => {\n            return <Artist id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/track/:id'\n          render={({ match }) => {\n            return <Track id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/reports/:id'\n          render={({ match }) => {\n            return <ReportTrackIndex id={match.params.id} />;\n          }}\n        />\n      </Switch>\n      <Footer />\n    </Router>\n  );\n};\n\nexport default App;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_ALBUM,\n  ADD_TRACK_TO_ALBUM,\n  GET_TRACKLIST_OF_ALBUM,\n  CLEAR_CURRENT_ALBUM,\n  SET_LOADING,\n  CHANGE_ARTIST_OF_ALBUM,\n  AlbumState,\n  AlbumActionTypes,\n} from './types';\n\nconst initialState: AlbumState = {\n  currentAlbum: null,\n  tracklist: [],\n  loading: false,\n};\n\nconst albumReducer: Reducer<AlbumState, Action> = (\n  state = initialState,\n  action: AlbumActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_ALBUM:\n      return {\n        ...state,\n        currentAlbum: action.data,\n        loading: false,\n      };\n    case GET_TRACKLIST_OF_ALBUM:\n      return {\n        ...state,\n        tracklist: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_ALBUM:\n      return {\n        ...state,\n        currentAlbum: null,\n        tracklist: [],\n        loading: false,\n      };\n    case ADD_TRACK_TO_ALBUM:\n      return {\n        ...state,\n        tracklist: [...state.tracklist, action.data],\n      };\n    // case CHANGE_ARTIST_OF_ALBUM:\n    //   return {\n    //     ...state,\n    //     currentAlbum: {\n    //       ...state.currentAlbum,\n    //       artist_id: action.data.artist_id,\n    //       artist_name: action.data.artist_name,\n    //     },\n    //     loading: false,\n    //   };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default albumReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_ARTIST,\n  GET_ALBUM_LIST_BY_ARTIST,\n  CLEAR_CURRENT_ARTIST,\n  SET_LOADING,\n  ArtistState,\n  ArtistActionTypes,\n} from './types';\n\nconst initialState: ArtistState = {\n  currentArtist: null,\n  albumList: [],\n  loading: false,\n};\n\nconst artistReducer: Reducer<ArtistState, Action> = (\n  state = initialState,\n  action: ArtistActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_ARTIST:\n      return {\n        ...state,\n        currentArtist: action.data,\n        loading: false,\n      };\n    case GET_ALBUM_LIST_BY_ARTIST:\n      return {\n        ...state,\n        albumList: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_ARTIST:\n      return {\n        ...state,\n        currentArtist: null,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default artistReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  LoginActionTypes,\n  LoginState,\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  UPDATE_CURRENT_USER,\n  SET_LOADING,\n} from './types';\n\nconst initialState: LoginState = {\n  loading: false,\n  currentUser: null,\n};\n\nconst loginReducer: Reducer<LoginState, Action> = (\n  state = initialState,\n  action: LoginActionTypes\n) => {\n  switch (action.type) {\n    case INIT_USER:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGIN:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case UPDATE_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGOUT:\n      return initialState;\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;\n","import { Action, Reducer } from 'redux';\nimport { NotificationState, NotificationActionTypes } from './types';\n\nconst initialState: NotificationState = {\n  message: null,\n  type: null,\n};\n\nconst notificationReducer: Reducer<NotificationState, Action> = (\n  state = initialState,\n  action: NotificationActionTypes\n) => {\n  switch (action.type) {\n    case 'SET_NOTIFICATION':\n      return action.data;\n\n    case 'CLEAR_NOTIFICATION':\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport default notificationReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_PROGRAM,\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  CREATE_NEW_PROGRAM,\n  CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n  UPDATE_PROGRAM,\n  ProgramState,\n  ProgramActionTypes,\n} from './types';\n\nconst initialState: ProgramState = {\n  allPrograms: [],\n  activePrograms: [],\n  program: null,\n  loading: false,\n};\n\nconst programReducer: Reducer<ProgramState, Action> = (\n  state = initialState,\n  action: ProgramActionTypes\n) => {\n  switch (action.type) {\n    case GET_ALL_PROGRAMS:\n      return {\n        ...state,\n        allPrograms: action.data,\n        loading: false,\n      };\n    case GET_ALL_ACTIVE_PROGRAMS:\n      return {\n        ...state,\n        activePrograms: action.data,\n        loading: false,\n      };\n    case GET_ONE_PROGRAM:\n      return {\n        ...state,\n        program: action.data,\n        loading: false,\n      };\n    case CREATE_NEW_PROGRAM:\n      return {\n        ...state,\n        allPrograms: [...state.allPrograms, action.data],\n        loading: false,\n      };\n    case CREATE_NEW_PROGRAM_ON_NEW_REPORT:\n      return {\n        ...state,\n        activePrograms: [...state.activePrograms, action.data],\n        loading: false,\n      };\n    case UPDATE_PROGRAM:\n      return {\n        ...state,\n        allPrograms: state.allPrograms.map((program) =>\n          program.id === action.data.id ? action.data : program\n        ),\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\nexport default programReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_REPORT,\n  GET_PLAYLOG_TRACKS,\n  GET_REPORT_DETAILS,\n  ADD_NEW_TRACK,\n  UPDATE_TRACK,\n  SET_EDIT_TRACK_ID,\n  GET_ONE_TRACK,\n  REMOVE_CURRENT_TRACK,\n  DELETE_TRACK_FROM_REPORT,\n  CHECK_FOR_DELETE,\n  UNCHECK_FOR_DELETE,\n  CLEAR_CHECKED_FOR_DELETE,\n  CREATE_REPORT,\n  UPDATE_REPORT,\n  CLEAR_CURRENT_REPORT,\n  SET_LOADING,\n  ADD_TRACK_TO_REPORT,\n  ReportState,\n  ReportActionTypes,\n} from './types';\n\nconst initialState: ReportState = {\n  report: [],\n  playlog: [],\n  editTrackId: null,\n  reportDetails: null,\n  newReport: null,\n  loading: false,\n  checkedForDelete: [],\n  currentTrack: null,\n};\n\nconst reportReducer: Reducer<ReportState, Action> = (\n  state = initialState,\n  action: ReportActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_REPORT:\n      return {\n        ...state,\n        report: action.data,\n        loading: false,\n      };\n    case GET_PLAYLOG_TRACKS:\n      return {\n        ...state,\n        report: [...state.report, ...action.data],\n        playlog: action.data,\n        loading: false,\n      };\n    case GET_REPORT_DETAILS:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null,\n        loading: false,\n      };\n    case ADD_NEW_TRACK:\n      return {\n        ...state,\n        report: [...state.report, action.data],\n        loading: false,\n      };\n    case ADD_TRACK_TO_REPORT:\n      return {\n        ...state,\n        report: [...state.report, action.data],\n      };\n    case UPDATE_TRACK:\n      return {\n        ...state,\n        report: state.report.map((track) =>\n          track.track_id === action.data.track_id ? action.data : track\n        ),\n        loading: false,\n      };\n    case SET_EDIT_TRACK_ID:\n      return {\n        ...state,\n        editTrackId: action.data,\n      };\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case REMOVE_CURRENT_TRACK:\n      return {\n        ...state,\n        currentTrack: null,\n      };\n    case CLEAR_CURRENT_REPORT:\n      return {\n        ...state,\n        report: [],\n      };\n    case CREATE_REPORT:\n      return {\n        ...state,\n        newReport: action.data,\n        reportDetails: action.data,\n        loading: false,\n      };\n    case UPDATE_REPORT:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null,\n        loading: false,\n      };\n    case DELETE_TRACK_FROM_REPORT:\n      return {\n        ...state,\n        report: state.report.filter(\n          (track) => track.report_track_id !== action.data\n        ),\n      };\n    case CHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: [action.data, ...state.checkedForDelete],\n      };\n    case UNCHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: state.checkedForDelete.filter(\n          (id) => id !== action.data\n        ),\n      };\n    case CLEAR_CHECKED_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: [],\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reportReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT,\n  DELETE_REPORT,\n  SET_LOADING,\n  ReportListState,\n  ReportListActionTypes,\n} from './types';\n\nconst initialState: ReportListState = {\n  reportList: [],\n  inProgress: [],\n  reportListDate: null,\n  reportTransferList: [],\n  lastTransfer: null,\n  loading: false,\n  filterStatusValue: null,\n  filterUserValue: null,\n  filterByText: '',\n  error: null,\n};\n\nconst reportListReducer: Reducer<ReportListState, Action> = (\n  state = initialState,\n  action: ReportListActionTypes\n) => {\n  switch (action.type) {\n    case GET_ALL_REPORTS_BY_DATE:\n      return {\n        ...state,\n        reportList: action.data,\n        reportListDate: action.date,\n        loading: false,\n      };\n    case GET_ALL_IN_PROGRESS:\n      return {\n        ...state,\n        inProgress: action.data,\n        loading: false,\n      };\n    case GET_ALL_REPORT_TRANSFERS:\n      return {\n        ...state,\n        reportTransferList: action.data,\n        loading: false,\n      };\n    case GENERATE_REPORT_TRANSFER:\n      return {\n        ...state,\n        lastTransfer: action.data,\n        loading: false,\n      };\n    case DELETE_REPORT:\n      return {\n        ...state,\n        reportList: state.reportList.filter(\n          (report) => report.id !== action.data\n        ),\n        loading: false,\n      };\n    case FILTER_BY_USER_ID:\n      return {\n        ...state,\n        filterUserValue: action.data,\n      };\n    case FILTER_BY_STATUS:\n      return {\n        ...state,\n        filterStatusValue: action.data,\n      };\n    case FILTER_BY_TEXT:\n      return {\n        ...state,\n        filterByText: action.data,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reportListReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  // AUTOCOMPLETE_RESULTS,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_DISCOGS_DATA,\n  CLEAR_DISCOGS_DATA,\n  TOP_100,\n  SET_SEARCH_LOADING,\n  // GET_CHANGE_ALBUM_OPTIONS,\n  // GET_CHANGE_ARTIST_OPTIONS,\n  // RESET_CHANGE_ALBUM_OPTIONS,\n  // RESET_CHANGE_ARTIST_OPTIONS,\n  // MERGE_ALBUMS,\n  MERGE_ARTISTS,\n  MERGE_TRACKS,\n  SearchState,\n  SearchActionTypes,\n} from './types';\n\nconst initialState: SearchState = {\n  // searchResults: [],\n  top100: [],\n  top100Query: null,\n  advancedResults: [],\n  sortAdvancedResults: null,\n  // changeArtistOptions: [],\n  // changeAlbumOptions: [],\n  loading: false,\n  discogsData: null,\n};\n\nconst searchReducer: Reducer<SearchState, Action> = (\n  state = initialState,\n  action: SearchActionTypes\n) => {\n  switch (action.type) {\n    case ADVANCED_RESULTS:\n      return {\n        ...state,\n        advancedResults: action.data,\n        loading: false,\n      };\n    case SORT_ADVANCED_RESULTS:\n      return {\n        ...state,\n        sortAdvancedResults: action.data,\n      };\n    case TOP_100:\n      return {\n        ...state,\n        top100: action.data,\n        top100Query: action.query,\n        loading: false,\n      };\n    case GET_DISCOGS_DATA:\n      return {\n        ...state,\n        discogsData: action.data,\n      };\n    case CLEAR_DISCOGS_DATA:\n      return {\n        ...state,\n        discogsData: null,\n      };\n    case SET_SEARCH_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case MERGE_TRACKS:\n      return {\n        ...state,\n        advancedResults: state.advancedResults.filter(\n          (result) => result.track_id !== action.data.merge\n        ),\n      };\n    case MERGE_ARTISTS: {\n      const artistToMerge = action.data.merge;\n      const mergeArtistTo = action.data.mergeTo;\n      const newArtistName = action.data.newName;\n      // get the artists that need name and id changing\n      const filteredArtists = state.advancedResults.filter(\n        (r) => r.artist_id === artistToMerge\n      );\n      // update the names and ids of those artists\n      const renamedArtists = filteredArtists.map((result) => ({\n        ...result,\n        artist_id: mergeArtistTo,\n        artist_name: newArtistName,\n      }));\n      // remove albums with old ids from advancedResults\n      const removeMergedArtists = state.advancedResults.filter(\n        (r) => r.artist_id !== artistToMerge\n      );\n      //\n      const newArtistResults = [...renamedArtists, ...removeMergedArtists];\n      return {\n        ...state,\n        advancedResults: newArtistResults,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_TRACK,\n  GET_ONE_TRACK_HISTORY,\n  CLEAR_CURRENT_TRACK,\n  SET_LOADING,\n  UPDATE_TRACK,\n  CHANGE_ALBUM,\n  CHANGE_ARTIST,\n  TrackState,\n  TrackActionTypes,\n} from './types';\n\nconst initialState: TrackState = {\n  currentTrack: null,\n  playHistory: [],\n  loading: false,\n};\n\nconst trackReducer: Reducer<TrackState, Action> = (\n  state = initialState,\n  action: TrackActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case UPDATE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case GET_ONE_TRACK_HISTORY:\n      return {\n        ...state,\n        playHistory: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_TRACK:\n      return {\n        ...state,\n        playhistory: null,\n        currentTrack: null,\n      };\n    // case CHANGE_ALBUM:\n    //   return {\n    //     ...state,\n    //     currentTrack: {\n    //       ...state.currentTrack,\n    //       album_id: action.data.album_id,\n    //       album: action.data.album_name,\n    //     },\n    //     loading: false,\n    //   };\n    // case CHANGE_ARTIST:\n    //   return {\n    //     ...state,\n    //     currentTrack: {\n    //       ...state.currentTrack,\n    //       artist_id: action.data.artist_id,\n    //       artist: action.data.artist,\n    //     },\n    //     loading: false,\n    //   };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\nexport default trackReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  INIT_USER_LIST,\n  SET_LOADING,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER,\n  UserState,\n  UserActionTypes,\n} from './types';\n\nconst initialState: UserState = {\n  users: [],\n  loading: false,\n};\n\nconst userReducer: Reducer<UserState, Action> = (\n  state = initialState,\n  action: UserActionTypes\n) => {\n  switch (action.type) {\n    case INIT_USER_LIST:\n      return {\n        ...state,\n        users: action.data,\n        loading: false,\n      };\n    case CREATE_USER:\n      return {\n        ...state,\n        users: [...state.users, action.data],\n        loading: false,\n      };\n    case UPDATE_USER:\n      return {\n        ...state,\n        users: action.data,\n        loading: false,\n      };\n    case DELETE_USER:\n      return {\n        ...state,\n        users: state.users.filter((user) => user.id !== action.data),\n        loading: false,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { createStore, combineReducers, applyMiddleware, Action } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport albumReducer from './album/reducer';\nimport artistReducer from './artist/reducer';\nimport loginReducer from './login/reducer';\nimport notificationReducer from './notification/reducer';\nimport programReducer from './program/reducer';\nimport reportReducer from './report/reducer';\nimport reportListReducer from './reportList/reducer';\nimport searchReducer from './search/reducer';\nimport trackReducer from './track/reducer';\nimport userReducer from './user/reducer';\n\nimport { ApplicationState } from './types';\n\nconst appReducer = combineReducers({\n  album: albumReducer,\n  artist: artistReducer,\n  login: loginReducer,\n  notification: notificationReducer,\n  program: programReducer,\n  report: reportReducer,\n  reportList: reportListReducer,\n  search: searchReducer,\n  track: trackReducer,\n  user: userReducer,\n});\n\nconst rootReducer = (state: ApplicationState | undefined, action: Action) => {\n  if (action.type === 'LOGOUT') {\n    // eslint-disable-next-line no-param-reassign\n    state = undefined;\n  }\n  return appReducer(state, action);\n};\n\nexport default createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}