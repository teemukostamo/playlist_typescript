{"version":3,"sources":["constants.tsx","store/album/services.tsx","store/search/services.tsx","store/notification/actions.tsx","components/layout/forms/FormFields.tsx","components/album/AlbumDetailsForm.tsx","components/album/TracksInAnAlbumItem.tsx","components/album/TracksInAnAlbum.tsx","components/album/index.tsx","store/album/actions.tsx","store/album/types.tsx","store/artist/services.tsx","components/artist/AlbumsByArtistItem.tsx","components/artist/AlbumsByArtist.tsx","components/artist/ArtistDetailsForm.tsx","components/artist/index.tsx","store/artist/actions.tsx","store/artist/types.tsx","components/layout/footer/index.tsx","store/user/types.tsx","components/report/CreateNewReport/CreateNewReportForm.tsx","store/report/services.tsx","components/report/CreateNewReport/index.tsx","store/report/actions.tsx","store/report/types.tsx","store/reportList/services.tsx","store/reportList/actions.tsx","store/reportList/types.tsx","components/reportList/InProgressReportListItem.tsx","components/reportList/InProgressReportList.tsx","components/layout/home/index.tsx","store/login/services.tsx","store/program/services.tsx","store/track/services.tsx","store/user/services.tsx","store/login/actions.tsx","store/login/types.tsx","components/login/LoginForm.tsx","components/users/CurrentUserModal/CurrentUserForm.tsx","store/user/actions.tsx","components/users/CurrentUserModal/CurrentUserModal.tsx","components/layout/navbar/AdminNavbar.tsx","components/layout/navbar/StaffNavbar.tsx","components/layout/navbar/BasicNavbar.tsx","components/layout/navbar/index.tsx","components/layout/notification/Notification.tsx","store/program/actions.tsx","store/program/types.tsx","components/programs/EditProgramModal/EditProgramForm.tsx","components/programs/EditProgramModal/index.tsx","components/programs/MergePrograms/MergeProgramForm.tsx","components/programs/MergePrograms/index.tsx","components/programs/ProgramListItem.tsx","components/programs/ProgramList.tsx","components/programs/AddProgramModal/AddProgramForm.tsx","components/programs/AddProgramModal/index.tsx","components/programs/index.tsx","components/reportList/ReportPeriodSelectionForm.tsx","components/reportList/ReportListItem.tsx","components/reportList/ReportList.tsx","components/report/ReportWithTracks/ReportTrackListItem.tsx","components/report/ReportWithTracks/ReportTrackList.tsx","components/report/AddTracksToReport/index.tsx","components/report/ReportDetails/index.tsx","components/report/index.tsx","components/search/SearchForm.tsx","store/search/actions.tsx","store/search/types.tsx","components/search/SearchResultItem.tsx","components/search/SortResults.tsx","components/search/SearchResults.tsx","components/search/index.tsx","components/top100/Top100SearchForm.tsx","components/top100/Top100ArtistList.tsx","components/top100/Top100AlbumList.tsx","components/top100/Top100TrackList.tsx","components/top100/index.tsx","components/track/TrackDetailsForm.tsx","components/track/PlayHistoryItem.tsx","components/track/PlayHistory.tsx","components/track/index.tsx","store/track/actions.tsx","store/track/types.tsx","components/users/EditUserModal/EditUserForm.tsx","components/users/EditUserModal/index.tsx","components/users/UserListItem.tsx","components/users/UserList.tsx","components/users/AddUserModal/AddUserForm.tsx","components/users/AddUserModal/index.tsx","components/users/index.tsx","App.tsx","store/album/reducer.tsx","store/artist/reducer.tsx","store/login/reducer.tsx","store/notification/reducer.tsx","store/program/reducer.tsx","store/report/reducer.tsx","store/reportList/reducer.tsx","store/search/reducer.tsx","store/track/reducer.tsx","store/user/reducer.tsx","store/index.tsx","index.tsx","img/logo.png"],"names":["token","getOneAlbum","id","a","config","headers","Authorization","axios","get","response","data","getTracklistOfAlbum","setToken","newToken","updateAlbum","albumToUpdate","put","changeArtistId","artistToUpdate","getTracksForAutocompleteSearch","query","request","getDiscogsData","artist","album","process","REACT_APP_DISCOGS_TOKEN","getTop100","list","start_date","end_date","advancedSearch","searchParams","kind","merge","mergeParams","changeArtistOptions","changeAlbumOptions","setNotification","message","type","content","dispatch","setTimeout","SelectField","name","label","options","Form","Field","as","className","map","option","key","value","TextField","field","placeholder","style","color","RequiredTextField","required","PasswordField","RequiredPasswordField","NumberField","min","max","AlbumDetailsForm","currentAlbum","onSubmit","Dimmer","Loader","Grid","columns","Column","Header","initialValues","album_id","album_name","cat_id","year","Number","substring","spotify_id","validate","values","console","log","errors","isValid","component","Button","floated","disabled","TracksInAnAlbumItem","track","Table","Row","Cell","to","track_id","artist_name","track_title","track_no","disc_no","isrc","report_occurrence","TracksInAnAlbum","tracklist","Fragment","striped","Body","Album","useDispatch","useSelector","state","report","useEffect","albumService","Container","toString","updatedAlbum","getOneArtist","getAlbumsByArtist","updateArtist","AlbumsByArtistItem","identifier","track_count","AlbumsByArtist","albumList","ArtistDetailsForm","currentArtist","Artist","artistService","updatedArtist","Footer","marginTop","marginBottom","textAlign","Date","getFullYear","href","target","rel","startTimeOptions","endTimeOptions","reportMonthOptions","dateNow","years","i","push","UserLevel","yearOptions","reportYearOptions","reverse","CreateNewReportForm","currentUser","programOptions","program_name","program_no","program_dj","first_name","last_name","program_date","moment","format","program_start_time","undefined","program_end_time","program_id","rerun","status","user_id","username","dirty","width","dateFormat","getOne","addTrackToReport","trackToAdd","post","deleteTrackFromReport","delete","deleteReport","getReportDetails","createReport","newReport","updateReport","updatedReport","CreateNewReport","useState","program","login","activePrograms","reportToCreate","find","pgm","reportService","getAllByDate","date","getAllByDateByUser","user","getAllInProgress","getAllTransfers","generateReportDownload","params","responseType","downloadReport","filename","download","getAllReportsByDate","reportListService","reports","getAllReportsByDateByUser","InProgressReportListItem","open","setOpen","Icon","onClick","Confirm","onCancel","onConfirm","report_id","deleteInProgressReport","cancelButton","confirmButton","InProgressReportList","inProgress","length","r","Home","reportList","active","divided","credentials","res","getAllActive","req","getAll","createProgram","newProgram","updateProgram","updatedProgram","mergePrograms","addNewTrack","addTrackToDb","addTrackToAlbum","updateTrack","trackToUpdate","updateAlbumId","updateArtistId","getOneTrack","getOneTrackHistory","createUser","userToAdd","updateUser","userToUpdate","deleteUser","logout","window","localStorage","removeItem","LoginForm","setUsername","password","setPassword","event","preventDefault","loginService","newUser","setItem","JSON","stringify","loading","newLogin","control","Input","onChange","e","trim","CurrentUserForm","confirm_password","email","userService","users","CurrentUserModal","modalOpen","setModalOpen","handleClose","Modal","trigger","role","tabIndex","closeIcon","onClose","Content","level","currentUserToUpdate","updatedCurrentUser","error","AdminNavbar","size","text","icon","Menu","pointing","stackable","inverted","Item","link","Image","alt","src","logo","position","Dropdown","StaffNavbar","BasicNavbar","Navbar","Notification","notification","Message","floating","success","header","negative","getAllPrograms","programService","programs","displayOptions","siteOptions","EditProgramForm","display","site","EditUserModal","centered","Segment","MergeProgramForm","selectOptions","programToMerge","MergePrograms","handleOpen","mergeOptions","allPrograms","mergeTo","ProgramListItem","setError","closeModal","EditProgramModal","border","cursor","ProgramList","AddProgramForm","AddProgramModal","Programs","React","programToAdd","createNewProgram","ReportPeriodSelectionForm","reportYear","reportMonth","ReportListItem","reportStatusOutPrint","loginLevel","Responsive","minWidth","slice","ReportList","reportListDate","reportListTimeDate","reportsToShow","filterByText","filter","toLowerCase","includes","filterUserValue","filterStatusValue","ReportTrackListItem","minutes","seconds","Math","floor","marginLeft","sortable_rank","ReportTrackList","report_track_id","AddTracksToReport","Group","horizontal","ReportDetailsIndex","ReportTrackIndex","getOneReport","reportArray","reportDetails","ReportDetails","SearchForm","searchTargetOptions","searchService","results","float","SearchResultItem","result","artist_id","SortResults","sortBy","setSortBy","sortAdvancedResults","sortOptions","SearchResults","search","advancedResults","resultsToShow","sort","b","Search","listOptions","Top100SearchForm","now","Top100ArtistList","top100","t","count","Top100","getTop100Results","top100Values","top100Query","Top100AlbumList","Top100TrackList","TrackDetailsForm","currentTrack","country","record_country","people","comment","PlayHistoryItem","PlayHistory","playHistory","Track","trackService","history","levelOptions","DJ","Staff","Admin","statusOptions","EditUserForm","UserListItem","userLevelOutPrint","userStatusOutPrint","openDeleteUser","setDeleteUserOpen","last_seen","UserList","AddUserForm","requiredError","AddUserModal","Users","App","loggedUserJSON","getItem","parse","err","exact","path","render","match","initialState","albumReducer","action","artistReducer","loginReducer","notificationReducer","programReducer","playlog","editTrackId","checkedForDelete","reportReducer","reportTransferList","lastTransfer","reportListReducer","discogsData","searchReducer","artistToMerge","mergeArtistTo","newArtistName","newName","filteredArtists","renamedArtists","removeMergedArtists","newArtistResults","trackReducer","playhistory","userReducer","reducer","combineReducers","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","store","document","getElementById","module","exports"],"mappings":"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D,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,aAKE2F,GAAiB,CAC5B,CACE5F,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,EACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,YAET,CACED,IAAK,GACLR,MAAO,QACPS,MAAO,aAwBE4F,GAAqB,CAChC,CACE7F,IAAK,KACLR,MAAO,UACPS,MAAO,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","file":"static/js/main.31696f90.chunk.js","sourcesContent":["export const recordCountryOptions = [\n  { label: 'Finland', value: 'FI' },\n  { label: 'United Kingdom', value: 'GB' },\n  { label: 'United States', value: 'US' },\n  { label: 'Afghanistan', value: 'AF' },\n  { label: 'Åland Islands', value: 'AX' },\n  { label: 'Albania', value: 'AL' },\n  { label: 'Algeria', value: 'DZ' },\n  { label: 'American Samoa', value: 'AS' },\n  { label: 'AndorrA', value: 'AD' },\n  { label: 'Angola', value: 'AO' },\n  { label: 'Anguilla', value: 'AI' },\n  { label: 'Antarctica', value: 'AQ' },\n  { label: 'Antigua and Barbuda', value: 'AG' },\n  { label: 'Argentina', value: 'AR' },\n  { label: 'Armenia', value: 'AM' },\n  { label: 'Aruba', value: 'AW' },\n  { label: 'Australia', value: 'AU' },\n  { label: 'Austria', value: 'AT' },\n  { label: 'Azerbaijan', value: 'AZ' },\n  { label: 'Bahamas', value: 'BS' },\n  { label: 'Bahrain', value: 'BH' },\n  { label: 'Bangladesh', value: 'BD' },\n  { label: 'Barbados', value: 'BB' },\n  { label: 'Belarus', value: 'BY' },\n  { label: 'Belgium', value: 'BE' },\n  { label: 'Belize', value: 'BZ' },\n  { label: 'Benin', value: 'BJ' },\n  { label: 'Bermuda', value: 'BM' },\n  { label: 'Bhutan', value: 'BT' },\n  { label: 'Bolivia', value: 'BO' },\n  { label: 'Bosnia and Herzegovina', value: 'BA' },\n  { label: 'Botswana', value: 'BW' },\n  { label: 'Bouvet Island', value: 'BV' },\n  { label: 'Brazil', value: 'BR' },\n  { label: 'British Indian Ocean Territory', value: 'IO' },\n  { label: 'Brunei Darussalam', value: 'BN' },\n  { label: 'Bulgaria', value: 'BG' },\n  { label: 'Burkina Faso', value: 'BF' },\n  { label: 'Burundi', value: 'BI' },\n  { label: 'Cambodia', value: 'KH' },\n  { label: 'Cameroon', value: 'CM' },\n  { label: 'Canada', value: 'CA' },\n  { label: 'Cape Verde', value: 'CV' },\n  { label: 'Cayman Islands', value: 'KY' },\n  { label: 'Central African Republic', value: 'CF' },\n  { label: 'Chad', value: 'TD' },\n  { label: 'Chile', value: 'CL' },\n  { label: 'China', value: 'CN' },\n  { label: 'Christmas Island', value: 'CX' },\n  { label: 'Cocos (Keeling) Islands', value: 'CC' },\n  { label: 'Colombia', value: 'CO' },\n  { label: 'Comoros', value: 'KM' },\n  { label: 'Congo', value: 'CG' },\n  { label: 'Congo, The Democratic Republic of the', value: 'CD' },\n  { label: 'Cook Islands', value: 'CK' },\n  { label: 'Costa Rica', value: 'CR' },\n  { label: \"Cote D'Ivoire\", value: 'CI' },\n  { label: 'Croatia', value: 'HR' },\n  { label: 'Cuba', value: 'CU' },\n  { label: 'Cyprus', value: 'CY' },\n  { label: 'Czech Republic', value: 'CZ' },\n  { label: 'Denmark', value: 'DK' },\n  { label: 'Djibouti', value: 'DJ' },\n  { label: 'Dominica', value: 'DM' },\n  { label: 'Dominican Republic', value: 'DO' },\n  { label: 'Ecuador', value: 'EC' },\n  { label: 'Egypt', value: 'EG' },\n  { label: 'El Salvador', value: 'SV' },\n  { label: 'Equatorial Guinea', value: 'GQ' },\n  { label: 'Eritrea', value: 'ER' },\n  { label: 'Estonia', value: 'EE' },\n  { label: 'Ethiopia', value: 'ET' },\n  { label: 'Falkland Islands (Malvinas)', value: 'FK' },\n  { label: 'Faroe Islands', value: 'FO' },\n  { label: 'Fiji', value: 'FJ' },\n  { label: 'France', value: 'FR' },\n  { label: 'French Guiana', value: 'GF' },\n  { label: 'French Polynesia', value: 'PF' },\n  { label: 'French Southern Territories', value: 'TF' },\n  { label: 'Gabon', value: 'GA' },\n  { label: 'Gambia', value: 'GM' },\n  { label: 'Georgia', value: 'GE' },\n  { label: 'Germany', value: 'DE' },\n  { label: 'Ghana', value: 'GH' },\n  { label: 'Gibraltar', value: 'GI' },\n  { label: 'Greece', value: 'GR' },\n  { label: 'Greenland', value: 'GL' },\n  { label: 'Grenada', value: 'GD' },\n  { label: 'Guadeloupe', value: 'GP' },\n  { label: 'Guam', value: 'GU' },\n  { label: 'Guatemala', value: 'GT' },\n  { label: 'Guernsey', value: 'GG' },\n  { label: 'Guinea', value: 'GN' },\n  { label: 'Guinea-Bissau', value: 'GW' },\n  { label: 'Guyana', value: 'GY' },\n  { label: 'Haiti', value: 'HT' },\n  { label: 'Heard Island and Mcdonald Islands', value: 'HM' },\n  { label: 'Holy See (Vatican City State)', value: 'VA' },\n  { label: 'Honduras', value: 'HN' },\n  { label: 'Hong Kong', value: 'HK' },\n  { label: 'Hungary', value: 'HU' },\n  { label: 'Iceland', value: 'IS' },\n  { label: 'India', value: 'IN' },\n  { label: 'Indonesia', value: 'ID' },\n  { label: 'Iran, Islamic Republic Of', value: 'IR' },\n  { label: 'Iraq', value: 'IQ' },\n  { label: 'Ireland', value: 'IE' },\n  { label: 'Isle of Man', value: 'IM' },\n  { label: 'Israel', value: 'IL' },\n  { label: 'Italy', value: 'IT' },\n  { label: 'Jamaica', value: 'JM' },\n  { label: 'Japan', value: 'JP' },\n  { label: 'Jersey', value: 'JE' },\n  { label: 'Jordan', value: 'JO' },\n  { label: 'Kazakhstan', value: 'KZ' },\n  { label: 'Kenya', value: 'KE' },\n  { label: 'Kiribati', value: 'KI' },\n  { label: \"Korea, Democratic People's Republic of\", value: 'KP' },\n  { label: 'Korea, Republic of', value: 'KR' },\n  { label: 'Kuwait', value: 'KW' },\n  { label: 'Kyrgyzstan', value: 'KG' },\n  { label: \"Lao People's Democratic Republic\", value: 'LA' },\n  { label: 'Latvia', value: 'LV' },\n  { label: 'Lebanon', value: 'LB' },\n  { label: 'Lesotho', value: 'LS' },\n  { label: 'Liberia', value: 'LR' },\n  { label: 'Libyan Arab Jamahiriya', value: 'LY' },\n  { label: 'Liechtenstein', value: 'LI' },\n  { label: 'Lithuania', value: 'LT' },\n  { label: 'Luxembourg', value: 'LU' },\n  { label: 'Macao', value: 'MO' },\n  { label: 'Macedonia, The Former Yugoslav Republic of', value: 'MK' },\n  { label: 'Madagascar', value: 'MG' },\n  { label: 'Malawi', value: 'MW' },\n  { label: 'Malaysia', value: 'MY' },\n  { label: 'Maldives', value: 'MV' },\n  { label: 'Mali', value: 'ML' },\n  { label: 'Malta', value: 'MT' },\n  { label: 'Marshall Islands', value: 'MH' },\n  { label: 'Martinique', value: 'MQ' },\n  { label: 'Mauritania', value: 'MR' },\n  { label: 'Mauritius', value: 'MU' },\n  { label: 'Mayotte', value: 'YT' },\n  { label: 'Mexico', value: 'MX' },\n  { label: 'Micronesia, Federated States of', value: 'FM' },\n  { label: 'Moldova, Republic of', value: 'MD' },\n  { label: 'Monaco', value: 'MC' },\n  { label: 'Mongolia', value: 'MN' },\n  { label: 'Montenegro', value: 'ME' },\n  { label: 'Montserrat', value: 'MS' },\n  { label: 'Morocco', value: 'MA' },\n  { label: 'Mozambique', value: 'MZ' },\n  { label: 'Myanmar', value: 'MM' },\n  { label: 'Namibia', value: 'NA' },\n  { label: 'Nauru', value: 'NR' },\n  { label: 'Nepal', value: 'NP' },\n  { label: 'Netherlands', value: 'NL' },\n  { label: 'Netherlands Antilles', value: 'AN' },\n  { label: 'New Caledonia', value: 'NC' },\n  { label: 'New Zealand', value: 'NZ' },\n  { label: 'Nicaragua', value: 'NI' },\n  { label: 'Niger', value: 'NE' },\n  { label: 'Nigeria', value: 'NG' },\n  { label: 'Niue', value: 'NU' },\n  { label: 'Norfolk Island', value: 'NF' },\n  { label: 'Northern Mariana Islands', value: 'MP' },\n  { label: 'Norway', value: 'NO' },\n  { label: 'Oman', value: 'OM' },\n  { label: 'Pakistan', value: 'PK' },\n  { label: 'Palau', value: 'PW' },\n  { label: 'Palestinian Territory, Occupied', value: 'PS' },\n  { label: 'Panama', value: 'PA' },\n  { label: 'Papua New Guinea', value: 'PG' },\n  { label: 'Paraguay', value: 'PY' },\n  { label: 'Peru', value: 'PE' },\n  { label: 'Philippines', value: 'PH' },\n  { label: 'Poland', value: 'PL' },\n  { label: 'Portugal', value: 'PT' },\n  { label: 'Puerto Rico', value: 'PR' },\n  { label: 'Qatar', value: 'QA' },\n  { label: 'Romania', value: 'RO' },\n  { label: 'Russian Federation', value: 'RU' },\n  { label: 'RWANDA', value: 'RW' },\n  { label: 'Saint Helena', value: 'SH' },\n  { label: 'Saint Kitts and Nevis', value: 'KN' },\n  { label: 'Saint Lucia', value: 'LC' },\n  { label: 'Saint Pierre and Miquelon', value: 'PM' },\n  { label: 'Saint Vincent and the Grenadines', value: 'VC' },\n  { label: 'Samoa', value: 'WS' },\n  { label: 'San Marino', value: 'SM' },\n  { label: 'Sao Tome and Principe', value: 'ST' },\n  { label: 'Saudi Arabia', value: 'SA' },\n  { label: 'Senegal', value: 'SN' },\n  { label: 'Serbia', value: 'RS' },\n  { label: 'Seychelles', value: 'SC' },\n  { label: 'Sierra Leone', value: 'SL' },\n  { label: 'Singapore', value: 'SG' },\n  { label: 'Slovakia', value: 'SK' },\n  { label: 'Slovenia', value: 'SI' },\n  { label: 'Solomon Islands', value: 'SB' },\n  { label: 'Somalia', value: 'SO' },\n  { label: 'South Africa', value: 'ZA' },\n  { label: 'South Georgia and the South Sandwich Islands', value: 'GS' },\n  { label: 'Spain', value: 'ES' },\n  { label: 'Sri Lanka', value: 'LK' },\n  { label: 'Sudan', value: 'SD' },\n  { label: 'Suriname', value: 'SR' },\n  { label: 'Svalbard and Jan Mayen', value: 'SJ' },\n  { label: 'Swaziland', value: 'SZ' },\n  { label: 'Sweden', value: 'SE' },\n  { label: 'Switzerland', value: 'CH' },\n  { label: 'Syrian Arab Republic', value: 'SY' },\n  { label: 'Taiwan, Province of China', value: 'TW' },\n  { label: 'Tajikistan', value: 'TJ' },\n  { label: 'Tanzania, United Republic of', value: 'TZ' },\n  { label: 'Thailand', value: 'TH' },\n  { label: 'Timor-Leste', value: 'TL' },\n  { label: 'Togo', value: 'TG' },\n  { label: 'Tokelau', value: 'TK' },\n  { label: 'Tonga', value: 'TO' },\n  { label: 'Trinidad and Tobago', value: 'TT' },\n  { label: 'Tunisia', value: 'TN' },\n  { label: 'Turkey', value: 'TR' },\n  { label: 'Turkmenistan', value: 'TM' },\n  { label: 'Turks and Caicos Islands', value: 'TC' },\n  { label: 'Tuvalu', value: 'TV' },\n  { label: 'Uganda', value: 'UG' },\n  { label: 'Ukraine', value: 'UA' },\n  { label: 'United Arab Emirates', value: 'AE' },\n  { label: 'United States Minor Outlying Islands', value: 'UM' },\n  { label: 'Uruguay', value: 'UY' },\n  { label: 'Uzbekistan', value: 'UZ' },\n  { label: 'Vanuatu', value: 'VU' },\n  { label: 'Venezuela', value: 'VE' },\n  { label: 'Viet Nam', value: 'VN' },\n  { label: 'Virgin Islands, British', value: 'VG' },\n  { label: 'Virgin Islands, U.S.', value: 'VI' },\n  { label: 'Wallis and Futuna', value: 'WF' },\n  { label: 'Western Sahara', value: 'EH' },\n  { label: 'Yemen', value: 'YE' },\n  { label: 'Zambia', value: 'ZM' },\n  { label: 'Zimbabwe', value: 'ZW' },\n];\n\nexport const countryOptions = [\n  {\n    key: 1,\n    label: 'Suomi',\n    value: 1,\n  },\n  {\n    key: 2,\n    label: 'Muu',\n    value: 2,\n  },\n  {\n    key: 0,\n    label: 'Ei tietoa',\n    value: null,\n  },\n];\n\n// program start time options\nexport const startTimeOptions = [\n  {\n    key: 0,\n    label: '00:00',\n    value: '00:00:00',\n  },\n  {\n    key: 1,\n    label: '01:00',\n    value: '01:00:00',\n  },\n  {\n    key: 2,\n    label: '02:00',\n    value: '02:00:00',\n  },\n  {\n    key: 3,\n    label: '03:00',\n    value: '03:00:00',\n  },\n  {\n    key: 4,\n    label: '04:00',\n    value: '04:00:00',\n  },\n  {\n    key: 5,\n    label: '05:00',\n    value: '05:00:00',\n  },\n  {\n    key: 6,\n    label: '06:00',\n    value: '06:00:00',\n  },\n  {\n    key: 7,\n    label: '07:00',\n    value: '07:00:00',\n  },\n  {\n    key: 8,\n    label: '08:00',\n    value: '08:00:00',\n  },\n  {\n    key: 9,\n    label: '09:00',\n    value: '09:00:00',\n  },\n  {\n    key: 10,\n    label: '10:00',\n    value: '10:00:00',\n  },\n  {\n    key: 11,\n    label: '11:00',\n    value: '11:00:00',\n  },\n  {\n    key: 12,\n    label: '12:00',\n    value: '12:00:00',\n  },\n  {\n    key: 13,\n    label: '13:00',\n    value: '13:00:00',\n  },\n  {\n    key: 14,\n    label: '14:00',\n    value: '14:00:00',\n  },\n  {\n    key: 15,\n    label: '15:00',\n    value: '15:00:00',\n  },\n  {\n    key: 16,\n    label: '16:00',\n    value: '16:00:00',\n  },\n  {\n    key: 17,\n    label: '17:00',\n    value: '17:00:00',\n  },\n  {\n    key: 18,\n    label: '18:00',\n    value: '18:00:00',\n  },\n  {\n    key: 19,\n    label: '19:00',\n    value: '19:00:00',\n  },\n  {\n    key: 20,\n    label: '20:00',\n    value: '20:00:00',\n  },\n  {\n    key: 21,\n    label: '21:00',\n    value: '21:00:00',\n  },\n  {\n    key: 22,\n    label: '22:00',\n    value: '22:00:00',\n  },\n  {\n    key: 23,\n    label: '23:00',\n    value: '23:00:00',\n  },\n];\n\n// program end time options\nexport const endTimeOptions = [\n  {\n    key: 0,\n    label: '01:00',\n    value: '01:00:00',\n  },\n  {\n    key: 1,\n    label: '02:00',\n    value: '02:00:00',\n  },\n  {\n    key: 2,\n    label: '03:00',\n    value: '03:00:00',\n  },\n  {\n    key: 3,\n    label: '04:00',\n    value: '04:00:00',\n  },\n  {\n    key: 4,\n    label: '05:00',\n    value: '05:00:00',\n  },\n  {\n    key: 5,\n    label: '06:00',\n    value: '06:00:00',\n  },\n  {\n    key: 6,\n    label: '07:00',\n    value: '07:00:00',\n  },\n  {\n    key: 7,\n    label: '08:00',\n    value: '08:00:00',\n  },\n  {\n    key: 8,\n    label: '09:00',\n    value: '09:00:00',\n  },\n  {\n    key: 9,\n    label: '10:00',\n    value: '10:00:00',\n  },\n  {\n    key: 10,\n    label: '11:00',\n    value: '11:00:00',\n  },\n  {\n    key: 11,\n    label: '12:00',\n    value: '12:00:00',\n  },\n  {\n    key: 12,\n    label: '13:00',\n    value: '13:00:00',\n  },\n  {\n    key: 13,\n    label: '14:00',\n    value: '14:00:00',\n  },\n  {\n    key: 14,\n    label: '15:00',\n    value: '15:00:00',\n  },\n  {\n    key: 15,\n    label: '16:00',\n    value: '16:00:00',\n  },\n  {\n    key: 16,\n    label: '17:00',\n    value: '17:00:00',\n  },\n  {\n    key: 17,\n    label: '18:00',\n    value: '18:00:00',\n  },\n  {\n    key: 18,\n    label: '19:00',\n    value: '19:00:00',\n  },\n  {\n    key: 19,\n    label: '20:00',\n    value: '20:00:00',\n  },\n  {\n    key: 20,\n    label: '21:00',\n    value: '21:00:00',\n  },\n  {\n    key: 21,\n    label: '22:00',\n    value: '22:00:00',\n  },\n  {\n    key: 22,\n    label: '23:00',\n    value: '23:00:00',\n  },\n  {\n    key: 23,\n    label: '24:00',\n    value: '23:59:59',\n  },\n];\n\n// user level options\nexport const levelOptions = [\n  {\n    key: 1,\n    label: 'DJ',\n    value: 1,\n  },\n  {\n    key: 2,\n    label: 'Toimitus',\n    value: 2,\n  },\n  {\n    key: 3,\n    label: 'Admin',\n    value: 3,\n  },\n];\n\n// month options\nexport const reportMonthOptions = [\n  {\n    key: '01',\n    label: 'January',\n    value: '01',\n  },\n  {\n    key: '02',\n    label: 'February',\n    value: '02',\n  },\n  {\n    key: '03',\n    label: 'March',\n    value: '03',\n  },\n  {\n    key: '04',\n    label: 'April',\n    value: '04',\n  },\n  {\n    key: '05',\n    label: 'May',\n    value: '05',\n  },\n  {\n    key: '06',\n    label: 'June',\n    value: '06',\n  },\n  {\n    key: '07',\n    label: 'July',\n    value: '07',\n  },\n  {\n    key: '08',\n    label: 'August',\n    value: '08',\n  },\n  {\n    key: '09',\n    label: 'September',\n    value: '09',\n  },\n  {\n    key: '10',\n    label: 'October',\n    value: '10',\n  },\n  {\n    key: '11',\n    label: 'November',\n    value: '11',\n  },\n  {\n    key: '12',\n    label: 'December',\n    value: '12',\n  },\n];\n\n// year options\nconst dateNow = new Date().getFullYear() + 1;\nconst years = [];\n// eslint-disable-next-line no-plusplus\nfor (let i = 2001; i <= dateNow; i++) {\n  years.push(i);\n}\nlet yearOptions = years.map((option) => ({\n  key: option.toString(),\n  label: option.toString(),\n  value: option.toString(),\n}));\nyearOptions = yearOptions.reverse();\n\nexport const reportYearOptions = yearOptions;\n","import { UpdateAlbumParams, ChangeArtistParams } from './types';\nimport axios from 'axios';\n\nconst baseUrl = '/api/albums';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getOneAlbum = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/albumdetails/${id}`, config);\n  return response.data;\n};\n\nconst getTracklistOfAlbum = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/tracklist/${id}`, config);\n  return response.data;\n};\n\nconst updateAlbum = async (albumToUpdate: UpdateAlbumParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/albumdetails/${albumToUpdate.id}`,\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst changeArtistId = async (artistToUpdate: ChangeArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/albums/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateAlbum,\n  getOneAlbum,\n  getTracklistOfAlbum,\n  changeArtistId,\n};\n","import axios from 'axios';\nimport {\n  DiscogsQueryType,\n  Top100QueryType,\n  AdvancedSearchQueryType,\n  MergeParamsType,\n} from './types';\n\nconst baseUrl = '/api/search';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getTracksForAutocompleteSearch = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/autocomplete/${query}`, config);\n  return request.data;\n};\n\nconst getDiscogsData = async (query: DiscogsQueryType) => {\n  const request = await axios.get(\n    `https://api.discogs.com/database/search?artist=${query.artist}&release_title=${query.album}&token=${process.env.REACT_APP_DISCOGS_TOKEN}`\n  );\n  return request.data;\n};\n\nconst getTop100 = async (query: Top100QueryType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `/api/top100?list=${query.list}&start_date=${query.start_date}&end_date=${query.end_date}`,\n    config\n  );\n  return request.data;\n};\n\nconst advancedSearch = async (searchParams: AdvancedSearchQueryType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `${baseUrl}/advanced?kind=${searchParams.kind}&query=${searchParams.query}`,\n    config\n  );\n  return request.data;\n};\n\nconst merge = async (mergeParams: MergeParamsType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/advanced`, mergeParams, config);\n  return request.data;\n};\n\nconst changeArtistOptions = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/changeartist/${query}`, config);\n  return request.data;\n};\n\nconst changeAlbumOptions = async (query: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/changealbum/${query}`, config);\n  return request.data;\n};\n\nexport default {\n  advancedSearch,\n  getTop100,\n  getDiscogsData,\n  getTracksForAutocompleteSearch,\n  setToken,\n  changeArtistOptions,\n  changeAlbumOptions,\n  merge,\n};\n","import { Dispatch } from 'redux';\n\nexport const setNotification = (message: string, type: 'success' | 'fail') => {\n  const content = {\n    message,\n    type,\n  };\n  return async (dispatch: Dispatch) => {\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content,\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION',\n      });\n    }, 3000);\n  };\n};\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps } from 'formik';\nimport { Form } from 'semantic-ui-react';\n\nexport interface SelectFieldOptions {\n  key?: number | string;\n  value: number | string;\n  label: string;\n}\n\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: SelectFieldOptions[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options,\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as='select' name={name} className='ui dropdown'>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='text' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const RequiredTextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field required>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='text' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface PasswordProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  type: string;\n}\n\nexport const PasswordField: React.FC<PasswordProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='password' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const RequiredPasswordField: React.FC<PasswordProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field required>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} type='password' />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({\n  field,\n  label,\n  min,\n  max,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n","import React from 'react';\nimport { Button, Grid, Dimmer, Loader, Header } from 'semantic-ui-react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField, NumberField } from '../layout/forms/FormFields';\nimport { Album, UpdateAlbumParams } from '../../store/album/types';\n\ninterface Props {\n  currentAlbum: Album;\n  onSubmit: (values: UpdateAlbumParams) => void;\n}\n\nconst AlbumDetailsForm: React.FC<Props> = ({ currentAlbum, onSubmit }) => {\n  if (currentAlbum === null) {\n    return (\n      <Dimmer>\n        <Loader>Loading artist...</Loader>\n      </Dimmer>\n    );\n  }\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Header>Artist info</Header>\n        <Formik\n          initialValues={{\n            id: currentAlbum.album_id,\n            name: currentAlbum.album_name,\n            label: currentAlbum.label || '',\n            cat_id: currentAlbum.cat_id || '',\n            year: Number(currentAlbum.year?.substring(0, 4)) || '',\n            spotify_id: currentAlbum.spotify_id || '',\n          }}\n          onSubmit={onSubmit}\n          validate={(values) => {\n            console.log(values);\n            const requiredError = 'Album name is required';\n            const errors: { [field: string]: string } = {};\n            if (!values.name) {\n              errors.name = requiredError;\n            }\n            return errors;\n          }}\n        >\n          {({ isValid }) => {\n            return (\n              <Form className='form ui'>\n                <Field\n                  label='Album name'\n                  placeholder='Name'\n                  name='name'\n                  component={TextField}\n                />\n                <Field\n                  label='Label'\n                  placeholder='Label...'\n                  name='label'\n                  component={TextField}\n                />\n                <Field\n                  label='Catalog ID'\n                  placeholder='Catalog ID...'\n                  name='cat_id'\n                  component={TextField}\n                />\n                <Field\n                  label='Year'\n                  name='year'\n                  component={NumberField}\n                  min={1900}\n                  max={2900}\n                />\n                <Field\n                  label='Spotify id'\n                  placeholder='Spotify id'\n                  name='spotify_id'\n                  component={TextField}\n                />\n                <Button\n                  type='submit'\n                  floated='left'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update album\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default AlbumDetailsForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\n// import MergeAlbumTracksModal from './MergeAlbumTracksModal';\n// import AddToCurrentReport from '../track/AddToCurrentReport';\n\nimport { TracklistItem } from '../../store/album/types';\n\ninterface Props {\n  track: TracklistItem;\n}\n\nconst TracksInAnAlbumItem: React.FC<Props> = ({ track }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>\n        {/* <MergeAlbumTracksModal\n          track_id={track.track_id}\n          track_title={track.track_title}\n        /> */}\n        merge album tracks modal here\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`/track/${track.track_id}`}>\n          {track.artist_name} - {track.track_title}{' '}\n        </Link>\n      </Table.Cell>\n      <Table.Cell>\n        {track.track_no} / {track.disc_no}\n      </Table.Cell>\n      <Table.Cell>{track.isrc}</Table.Cell>\n      <Table.Cell>{track.report_occurrence}</Table.Cell>\n      <Table.Cell>\n        {/* <AddToCurrentReport\n          track_title={track.track_title}\n          track_id={track.track_id}\n          length={track.length}\n        /> */}\n        add to current report button here\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default TracksInAnAlbumItem;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport TracksInAnAlbumItem from './TracksInAnAlbumItem';\n\nimport { TracklistItem } from '../../store/album/types';\n\ninterface Props {\n  tracklist: Array<TracklistItem>;\n}\n\nconst TracksInAnAlbum: React.FC<Props> = ({ tracklist }) => {\n  if (tracklist === null) {\n    return <span>loading</span>;\n  }\n  return (\n    <React.Fragment>\n      <h4>Tracks</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Track ID#</Table.Cell>\n            <Table.Cell>ARTIST - Track</Table.Cell>\n            <Table.Cell>Track# / Disc#</Table.Cell>\n            <Table.Cell>ISRC</Table.Cell>\n            <Table.Cell>Report occurrence</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {tracklist.map((track) => (\n            <TracksInAnAlbumItem key={track.track_id} track={track} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default TracksInAnAlbum;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport { getOneAlbum, updateAlbum } from '../../store/album/actions';\nimport { setNotification } from '../../store/notification/actions';\nimport AlbumDetailsForm from './AlbumDetailsForm';\nimport TracksInAnAlbum from './TracksInAnAlbum';\n// import AddTrackToAlbum from './AddTrackToAlbum';\n\nimport { ApplicationState } from '../../store/types';\nimport { UpdateAlbumParams } from '../../store/album/types';\n\ninterface Props {\n  id: number;\n}\n\nconst Album: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  const album = useSelector((state: ApplicationState) => state.album);\n  console.log(album);\n  const report = useSelector((state: ApplicationState) => state.report);\n  console.log(report);\n  useEffect(() => {\n    dispatch(getOneAlbum(id));\n    // eslint-disable-next-line\n  }, [id]);\n\n  if (album.currentAlbum === null) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  const updateAlbumDetails = (values: UpdateAlbumParams) => {\n    const albumToUpdate = {\n      ...values,\n      year: values.year.toString(),\n    };\n    dispatch(updateAlbum(albumToUpdate));\n    dispatch(setNotification(`Artist ${values.name} updated!`, 'success'));\n  };\n\n  return (\n    <Container>\n      {/* <AddTrackToAlbum album={album.currentAlbum} report={report} /> */}\n      {/*\n       */}\n      <AlbumDetailsForm\n        onSubmit={updateAlbumDetails}\n        currentAlbum={album.currentAlbum}\n      />\n      <TracksInAnAlbum tracklist={album.tracklist} />\n    </Container>\n  );\n};\n\nexport default Album;\n","import { Dispatch } from 'redux';\nimport {\n  GET_ONE_ALBUM,\n  GET_TRACKLIST_OF_ALBUM,\n  CLEAR_CURRENT_ALBUM,\n  MERGE_ALBUMS,\n  CHANGE_ARTIST_OF_ALBUM,\n  SET_LOADING,\n  UpdateAlbumParams,\n  MergeAlbumsParams,\n  ChangeArtistParams,\n} from './types';\nimport albumService from './services';\nimport searchService from '../search/services';\n\nexport const getOneAlbum = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_ALBUM,\n    });\n    dispatch({\n      type: SET_LOADING,\n    });\n    const album = await albumService.getOneAlbum(id);\n    console.log('albumactions getonealbum', album);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: album,\n    });\n    const tracklist = await albumService.getTracklistOfAlbum(id);\n    dispatch({\n      type: GET_TRACKLIST_OF_ALBUM,\n      data: tracklist,\n    });\n  } catch (error) {\n    console.log('albumActions getOneAlbum error:', error);\n  }\n};\n\nexport const updateAlbum = (albumToUpdate: UpdateAlbumParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await albumService.updateAlbum(albumToUpdate);\n    const updatedAlbum = await albumService.getOneAlbum(albumToUpdate.id);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: updatedAlbum,\n    });\n  } catch (error) {\n    console.log('albumActions updateAlbum error:', error);\n  }\n};\n\nexport const mergeAlbumFunction = (mergeParams: MergeAlbumsParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await searchService.merge(mergeParams);\n    const album = await albumService.getOneAlbum(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_ALBUM,\n      data: album,\n    });\n    const tracklist = await albumService.getTracklistOfAlbum(\n      mergeParams.mergeTo\n    );\n    dispatch({\n      type: GET_TRACKLIST_OF_ALBUM,\n      data: tracklist,\n    });\n  } catch (error) {\n    console.log('albumActions mergeAlbumsFunction error:', error);\n  }\n};\n\nexport const updateAlbumState = (mergeParams: MergeAlbumsParams) => (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: MERGE_ALBUMS,\n    data: mergeParams,\n  });\n};\n\nexport const updateArtistId = (artistToUpdate: ChangeArtistParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await albumService.changeArtistId(artistToUpdate);\n    dispatch({\n      type: CHANGE_ARTIST_OF_ALBUM,\n      data: artistToUpdate,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n","export const GET_ONE_ALBUM = 'GET_ONE_ALBUM';\nexport const ADD_TRACK_TO_ALBUM = 'ADD_TRACK_TO_ALBUM';\nexport const GET_TRACKLIST_OF_ALBUM = 'GET_TRACKLIST_OF_ALBUM';\nexport const CLEAR_CURRENT_ALBUM = 'CLEAR_CURRENT_ALBUM';\nexport const SET_LOADING = 'SET_LOADING';\nexport const CHANGE_ARTIST_OF_ALBUM = 'CHANGE_ARTIST_OF_ALBUM';\nexport const MERGE_ALBUMS = 'MERGE_ALBUMS';\n\nexport interface Album {\n  album_name: string;\n  album_id: number;\n  label: string | null;\n  cat_id: string | null;\n  spotify_id: string | null;\n  year: string | null;\n  artist_name: string;\n  artist_id: number;\n}\n\nexport interface TracklistItem {\n  track_id: number;\n  isrc: string | null;\n  disc_no: number | null;\n  track_no: number | null;\n  track_title: string;\n  artist_name: string;\n  report_occurrence: number;\n}\n\nexport interface AlbumState {\n  currentAlbum: Album | null;\n  tracklist: Array<TracklistItem>;\n  loading: boolean;\n}\n\nexport interface MergeAlbumsParams {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface UpdateAlbumParams {\n  id: number;\n  name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | number;\n  spotify_id: string | null;\n}\n\nexport interface ChangeArtistParams {\n  album_id: number;\n  artist_id: number;\n  artist_name: string;\n}\n\n// album action types\ninterface GetOneAlbumAction {\n  type: typeof GET_ONE_ALBUM;\n  data: Album;\n}\n\ninterface GetTracklistAction {\n  type: typeof GET_TRACKLIST_OF_ALBUM;\n  data: Array<TracklistItem>;\n}\n\ninterface AddTrackToAlbumAction {\n  type: typeof ADD_TRACK_TO_ALBUM;\n  data: TracklistItem;\n}\n\ninterface ClearCurrentAlbumAction {\n  type: typeof CLEAR_CURRENT_ALBUM;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface ChangeArtistOfAlbumAction {\n  type: typeof CHANGE_ARTIST_OF_ALBUM;\n  data: ChangeArtistParams;\n}\n\nexport type AlbumActionTypes =\n  | GetOneAlbumAction\n  | GetTracklistAction\n  | AddTrackToAlbumAction\n  | ClearCurrentAlbumAction\n  | SetLoadingAction\n  | ChangeArtistOfAlbumAction;\n","import axios from 'axios';\nimport { UpdateArtistParams } from './types';\n\nconst baseUrl = '/api/artists';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get artist details\nconst getOneArtist = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getAlbumsByArtist = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/albumsby/${id}`, config);\n  return response.data;\n};\n\nconst updateArtist = async (artistToUpdate: UpdateArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/details/${artistToUpdate.id}`,\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nexport default {\n  setToken,\n  updateArtist,\n  getOneArtist,\n  getAlbumsByArtist,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\n// import MergeAlbumsModal from './MergeAlbumsModal';\n\nimport { AlbumListItem } from '../../store/artist/types';\n\ninterface Props {\n  album: AlbumListItem;\n}\n\nconst AlbumsByArtistItem: React.FC<Props> = ({ album }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>\n        {/* <MergeAlbumsModal album_name={album.name} album_id={album.album_id} /> */}\n        merge albums modal here\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`/album/${album.album_id}`}>{album.name}</Link>\n      </Table.Cell>\n      <Table.Cell>{album.identifier}</Table.Cell>\n      <Table.Cell>{album.track_count}</Table.Cell>\n      <Table.Cell>{album.report_occurrence}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default AlbumsByArtistItem;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport AlbumsByArtistItem from './AlbumsByArtistItem';\nimport { AlbumListItem } from '../../store/artist/types';\n\ninterface Props {\n  albumList: Array<AlbumListItem>;\n}\n\nconst AlbumsByArtist: React.FC<Props> = ({ albumList }) => {\n  if (albumList === null) {\n    return <span>loading</span>;\n  }\n  return (\n    <React.Fragment>\n      <h4>Albums</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>ID#</Table.Cell>\n            <Table.Cell>Album name</Table.Cell>\n            <Table.Cell>Catalog ID</Table.Cell>\n            <Table.Cell>Tracks</Table.Cell>\n            <Table.Cell>Report occurrence</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {albumList.map((album) => (\n            <AlbumsByArtistItem key={album.album_id} album={album} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default AlbumsByArtist;\n","import React from 'react';\nimport { Button, Grid, Dimmer, Loader, Header } from 'semantic-ui-react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField } from '../layout/forms/FormFields';\nimport { Artist, UpdateArtistParams } from '../../store/artist/types';\n\ninterface Props {\n  currentArtist: Artist;\n  onSubmit: (values: UpdateArtistParams) => void;\n}\n\nconst ArtistDetailsForm: React.FC<Props> = ({ currentArtist, onSubmit }) => {\n  if (currentArtist === null) {\n    return (\n      <Dimmer>\n        <Loader>Loading artist...</Loader>\n      </Dimmer>\n    );\n  }\n\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Header>Artist info</Header>\n        <Formik\n          initialValues={{\n            id: currentArtist.id,\n            name: currentArtist.name,\n            spotify_id: currentArtist.spotify_id || '',\n          }}\n          onSubmit={onSubmit}\n          validate={(values) => {\n            const requiredError = 'Artist name is required';\n            const errors: { [field: string]: string } = {};\n            if (!values.name) {\n              errors.name = requiredError;\n            }\n            return errors;\n          }}\n        >\n          {({ isValid }) => {\n            return (\n              <Form className='form ui'>\n                <Field\n                  label='Artist name'\n                  placeholder='Name'\n                  name='name'\n                  component={TextField}\n                />\n                <Field\n                  label='Spotify id'\n                  placeholder='Spotify id'\n                  name='spotify_id'\n                  component={TextField}\n                />\n                <Button\n                  type='submit'\n                  floated='left'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update artist\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default ArtistDetailsForm;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport { getOneArtist } from '../../store/artist/actions';\nimport { updateArtist } from '../../store/artist/actions';\nimport { setNotification } from '../../store/notification/actions';\nimport AlbumsByArtist from './AlbumsByArtist';\nimport ArtistDetailsForm from './ArtistDetailsForm';\n\nimport { ApplicationState } from '../../store/types';\nimport { UpdateArtistParams } from '../../store/artist/types';\n\ninterface Props {\n  id: number;\n}\n\nconst Artist: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  const artist = useSelector((state: ApplicationState) => state.artist);\n\n  useEffect(() => {\n    dispatch(getOneArtist(id));\n    // eslint-disable-next-line\n  }, [id]);\n\n  const updateArtistDetails = (values: UpdateArtistParams) => {\n    dispatch(updateArtist(values));\n    dispatch(setNotification(`Artist ${values.name} updated!`, 'success'));\n  };\n\n  if (artist.currentArtist === null) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <ArtistDetailsForm\n        currentArtist={artist.currentArtist}\n        onSubmit={updateArtistDetails}\n      />\n      <AlbumsByArtist albumList={artist.albumList} />\n    </Container>\n  );\n};\n\nexport default Artist;\n","import { Dispatch } from 'redux';\nimport {\n  GET_ONE_ARTIST,\n  SET_LOADING,\n  GET_ALBUM_LIST_BY_ARTIST,\n  CLEAR_CURRENT_ARTIST,\n  MERGE_ARTISTS,\n  UpdateArtistParams,\n  MergeArtistsParams,\n} from './types';\nimport artistService from './services';\nimport searchService from '../search/services';\n\nexport const getOneArtist = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_ARTIST,\n    });\n    dispatch({\n      type: SET_LOADING,\n    });\n    const artist = await artistService.getOneArtist(id);\n    dispatch({\n      type: GET_ONE_ARTIST,\n      data: artist,\n    });\n    const albumList = await artistService.getAlbumsByArtist(id);\n    dispatch({\n      type: GET_ALBUM_LIST_BY_ARTIST,\n      data: albumList,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateArtist = (artistToUpdate: UpdateArtistParams) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: SET_LOADING,\n  });\n  await artistService.updateArtist(artistToUpdate);\n  const updatedArtist = await artistService.getOneArtist(artistToUpdate.id);\n  dispatch({\n    type: GET_ONE_ARTIST,\n    data: updatedArtist,\n  });\n};\n\nexport const mergeArtistFunction = (mergeParams: MergeArtistsParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await searchService.merge(mergeParams);\n    const artist = await artistService.getOneArtist(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_ARTIST,\n      data: artist,\n    });\n    const albumList = await artistService.getAlbumsByArtist(\n      mergeParams.mergeTo\n    );\n    dispatch({\n      type: GET_ALBUM_LIST_BY_ARTIST,\n      data: albumList,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateArtistState = (mergeParams: MergeArtistsParams) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: MERGE_ARTISTS,\n    data: mergeParams,\n  });\n};\n","export const GET_ONE_ARTIST = 'GET_ONE_ARTIST';\nexport const GET_ALBUM_LIST_BY_ARTIST = 'GET_ALBUM_LIST_BY_ARTIST';\nexport const CLEAR_CURRENT_ARTIST = 'CLEAR_CURRENT_ARTIST';\nexport const MERGE_ARTISTS = 'MERGE_ARTISTS';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Artist {\n  id: number;\n  name: string;\n  spotify_id: string | null;\n  old_id: number | null;\n  user_id: number | null;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AlbumListItem {\n  album_id: number;\n  artist_id: number;\n  name: string;\n  identifier: string | null;\n  artist_name: string;\n  artist_spotify_id: string | null;\n  track_count: number;\n  report_occurrence: number;\n}\n\nexport interface UpdateArtistParams {\n  id: number;\n  name: string;\n  spotify_id: string | null;\n}\n\nexport interface MergeArtistsParams {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface ArtistState {\n  currentArtist: Artist | null;\n  albumList: Array<AlbumListItem>;\n  loading: boolean;\n}\n\n// artist action types\ninterface GetOneArtistAction {\n  type: typeof GET_ONE_ARTIST;\n  data: Artist;\n}\n\ninterface GetAlbumListByArtistAction {\n  type: typeof GET_ALBUM_LIST_BY_ARTIST;\n  data: Array<AlbumListItem>;\n}\n\ninterface ClearCurrentArtistAction {\n  type: typeof CLEAR_CURRENT_ARTIST;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ArtistActionTypes =\n  | GetOneArtistAction\n  | GetAlbumListByArtistAction\n  | ClearCurrentArtistAction\n  | SetLoadingAction;\n","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <div\n      style={{ marginTop: '5rem', marginBottom: '2rem', textAlign: 'center' }}\n    >\n      <br />\n      <em>\n        {' '}\n        &copy; {new Date().getFullYear()}{' '}\n        <a\n          href='https://www.teemukostamo.com'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          {' '}\n          Teemu Kostamo{' '}\n        </a>{' '}\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;\n","export const INIT_USER_LIST = 'INIT_USER_LIST';\nexport const CREATE_USER = 'CREATE_USER';\nexport const UPDATE_USER = 'UPDATE_USER';\nexport const DELETE_USER = 'DELETE_USER';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface User {\n  id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  address?: string;\n  zip?: string;\n  city?: string;\n  country?: string;\n  phone?: string;\n  status: number | null;\n  level: number;\n  last_seen?: string;\n  reset_key?: string;\n  old_id?: number;\n  created_at?: Date;\n  updated_at?: Date;\n}\nexport type Users = Array<User>;\n\nexport interface UserToAdd {\n  username: string;\n  password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport enum UserLevel {\n  'DJ' = 1,\n  'Staff' = 2,\n  'Admin' = 3,\n}\n\nexport type UserLevelOptions = {\n  value: UserLevel;\n  label: string;\n};\n\nexport interface AddUserFormValues {\n  username: string;\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport interface EditUserFormValues {\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  level: number;\n  status: number | null;\n}\n\nexport interface CurrentUserFormValues {\n  password: string;\n  confirm_password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport interface UserToUpdate {\n  id: number;\n  password: string;\n  first_name: string;\n  last_name: string;\n  email: string;\n  level: number;\n  status: number | null;\n}\n\nexport interface UserState {\n  users: Users;\n  loading: boolean;\n}\n\n// user action types\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface InitUserListAction {\n  type: typeof INIT_USER_LIST;\n  data: Users;\n}\n\ninterface CreateUser {\n  type: typeof CREATE_USER;\n  data: User;\n}\n\ninterface UpdateUser {\n  type: typeof UPDATE_USER;\n  data: Users;\n}\n\ninterface DeleteUser {\n  type: typeof DELETE_USER;\n  data: number;\n}\n\nexport type UserActionTypes =\n  | SetLoadingAction\n  | InitUserListAction\n  | CreateUser\n  | UpdateUser\n  | DeleteUser;\n","import React from 'react';\nimport moment from 'moment';\nimport { Formik, Form, Field } from 'formik';\nimport { Datepicker } from 'react-formik-ui';\nimport { Button, Grid, Popup, Icon } from 'semantic-ui-react';\nimport {\n  SelectField,\n  TextField,\n  NumberField,\n  SelectFieldOptions,\n} from '../../layout/forms/FormFields';\nimport { startTimeOptions, endTimeOptions } from '../../../constants';\nimport { CreateNewReportFormTypes } from '../../../store/report/types';\nimport { CurrentUser } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: CreateNewReportFormTypes) => void;\n  currentUser: CurrentUser | null;\n  programOptions: Array<SelectFieldOptions>;\n}\n\nconst CreateNewReportForm: React.FC<Props> = ({\n  onSubmit,\n  currentUser,\n  programOptions,\n}) => {\n  console.log(programOptions);\n  return (\n    <Formik\n      initialValues={{\n        program_name: '',\n        program_no: 0,\n        program_dj: `${currentUser?.first_name} ${currentUser?.last_name}`,\n        program_date: moment(new Date()).format('YYYY-MM-DD'),\n        program_start_time: undefined,\n        program_end_time: undefined,\n        program_id: 0,\n        rerun: null,\n        status: 0,\n        user_id: currentUser?.id || 0,\n        username: currentUser?.username || '',\n        first_name: currentUser?.first_name || '',\n        last_name: currentUser?.last_name || '',\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        console.log(values);\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.program_dj) {\n          errors.name = requiredError;\n        }\n        if (values.program_start_time === undefined) {\n          errors.name = requiredError;\n        }\n        if (values.program_end_time === undefined) {\n          errors.name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <SelectField\n              label='Program'\n              name='program_id'\n              options={programOptions}\n            />\n            <Field\n              label='Program number'\n              name='program_no'\n              component={NumberField}\n              min={0}\n              max={999}\n            />\n            <Field\n              label='DJ'\n              placeholder='DJ'\n              name='program_dj'\n              component={TextField}\n            />\n            <Grid>\n              <Grid.Column width={5}>\n                <label>Program date</label>\n                <Datepicker\n                  name='program_date'\n                  dateFormat='dd.MM.yyyy'\n                  placeholder='dd.mm.yyyy'\n                />{' '}\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <SelectField\n                  label='Start time'\n                  name='program_start_time'\n                  options={startTimeOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={5}>\n                <SelectField\n                  label='End time'\n                  name='program_end_time'\n                  options={endTimeOptions}\n                />\n              </Grid.Column>\n            </Grid>\n            <Button\n              style={{ marginTop: '1rem' }}\n              type='submit'\n              floated='left'\n              color='green'\n              disabled={!isValid || !dirty}\n            >\n              Create report\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default CreateNewReportForm;\n","import axios from 'axios';\nimport {\n  AddTrackToReportParams,\n  ReportDetails,\n  CreateNewReportFormTypes,\n} from './types';\n\nconst baseUrl = '/api/reports';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get one report with tracks\nconst getOne = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst addTrackToReport = async (trackToAdd: AddTrackToReportParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(`${baseUrl}`, trackToAdd, config);\n  return request.data;\n};\n\nconst deleteTrackFromReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.delete(`${baseUrl}/${id}`, config);\n  return request.data;\n};\n\nconst deleteReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`/api/reportslist/${id}`, {}, config);\n  return request.data;\n};\n\n// const updateSortableRank = async remainingTracks => {\n//   const config = {\n//     headers: { Authorization: token }\n//   };\n//   if (remainingTracks === null) {\n//     return;\n//   }\n//   remainingTracks.forEach(async (track, index) => {\n//     const trackToUpdate = {\n//       sortable_rank: index + 1\n//     };\n//     const request = await axios.put(\n//       `${baseUrl}/${track.report_track_id}`,\n//       trackToUpdate,\n//       config\n//     );\n//     return request.data;\n//   });\n// };\n\nconst getReportDetails = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`/api/reportdetails/details/${id}`, config);\n  return request.data;\n};\n\n// create new report\nconst createReport = async (newReport: CreateNewReportFormTypes) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post('/api/reportdetails', newReport, config);\n  return response.data;\n};\n\n// update existing report details\nconst updateReport = async (updatedReport: ReportDetails) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n\n  await axios.put(\n    `/api/reportdetails/update/${updatedReport.id}`,\n    updatedReport,\n    config\n  );\n  return updatedReport;\n};\n\nexport default {\n  setToken,\n  addTrackToReport,\n  deleteTrackFromReport,\n  deleteReport,\n  // updateSortableRank,\n  getOne,\n  getReportDetails,\n  createReport,\n  updateReport,\n};\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Header, Container, Grid, Popup, Icon } from 'semantic-ui-react';\nimport CreateNewReportForm from './CreateNewReportForm';\nimport { createReport } from '../../../store/report/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { ApplicationState } from '../../../store/types';\nimport { CreateNewReportFormTypes } from '../../../store/report/types';\n\nconst CreateNewReport: React.FC = () => {\n  const [redirect, setRedirect] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const program = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n\n  const programOptions = program.activePrograms.map((program) => ({\n    key: program.id,\n    label: program.name,\n    value: program.id,\n  }));\n\n  const submitNewReport = (values: CreateNewReportFormTypes) => {\n    console.log('submit new report values', values);\n    const reportToCreate = {\n      ...values,\n      program_id: Number(values.program_id),\n      program_name: program.activePrograms.find(\n        (pgm) => pgm.id === Number(values.program_id)\n      )?.name,\n    };\n    console.log('report to create values', reportToCreate);\n    dispatch(\n      setNotification(\n        `Created new report for the program ${reportToCreate.program_name} `,\n        'success'\n      )\n    );\n    dispatch(createReport(reportToCreate));\n  };\n\n  return (\n    <Grid.Column>\n      <Container>\n        <Header>Create new report form here</Header>\n        <CreateNewReportForm\n          onSubmit={submitNewReport}\n          currentUser={login.currentUser}\n          programOptions={programOptions}\n        />\n      </Container>\n    </Grid.Column>\n  );\n};\n\nexport default CreateNewReport;\n","import { Dispatch } from 'redux';\nimport {\n  AddTrackToReportParams,\n  ReportDetails,\n  ReportItem,\n  DeleteTrackFromReportParams,\n} from './types';\nimport {\n  GET_ONE_REPORT,\n  GET_REPORT_DETAILS,\n  SET_EDIT_TRACK_ID,\n  CREATE_REPORT,\n  UPDATE_REPORT,\n  CHECK_FOR_DELETE,\n  UNCHECK_FOR_DELETE,\n  CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n  SET_LOADING,\n  CLEAR_CHECKED_FOR_DELETE,\n  CreateNewReportFormTypes,\n} from './types';\nimport reportService from './services';\nimport programService from '../program/services';\n\n// get one report with tracks by report id\nexport const getOneReport = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const report = await reportService.getOne(id);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report,\n      id,\n    });\n  } catch (error) {\n    console.log('reportActions getOneReport error:', error);\n  }\n};\n\nexport const setEditTrackId = (id: Number) => async (dispatch: Dispatch) => {\n  dispatch({\n    type: SET_EDIT_TRACK_ID,\n    data: id,\n  });\n};\n\n// add track to a report\nexport const addTrackToReport = (trackToAdd: AddTrackToReportParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const track = await reportService.addTrackToReport(trackToAdd);\n    const report = await reportService.getOne(track.report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report,\n    });\n  } catch (error) {\n    console.log('reportActions addTrackToReport error', error);\n  }\n};\n\n// delete track from report\nexport const deleteTrackFromReport = (\n  params: DeleteTrackFromReportParams\n) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportService.deleteTrackFromReport(params.report_track_id);\n    // await reportService.updateSortableRank(params.remainingTracks);\n    const report = await reportService.getOne(params.report_id);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: report,\n    });\n  } catch (error) {\n    console.log('reportActions deleteTrackFromReport error: ', error);\n  }\n};\n\n// get report details by report id\nexport const getReportDetails = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const reportArray = await reportService.getReportDetails(id);\n    const report = reportArray[0];\n    dispatch({\n      type: GET_REPORT_DETAILS,\n      data: report,\n      id,\n    });\n  } catch (error) {\n    console.log('reportActions getReportDetails error', error);\n  }\n};\n\nexport const createReport = (newReport: CreateNewReportFormTypes) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    // if (newReport.program_id === '' && newReport.new_program_name !== '') {\n    //   const newProgram = {\n    //     name: newReport.new_program_name,\n    //     user_id: newReport.user_id\n    //   };\n    //   const program = await programService.createProgram(newProgram);\n    //   dispatch({\n    //     type: CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n    //     data: program\n    //   });\n    //   const newReportWithNewProgram = {\n    //     ...newReport,\n    //     program_id: program.id,\n    //     display: 1\n    //   };\n    //   const report = await reportService.createReport(newReportWithNewProgram);\n    //   dispatch({\n    //     type: CREATE_REPORT,\n    //     data: report\n    //   });\n    // } else {\n    //   const report = await reportService.createReport(newReport);\n    //   dispatch({\n    //     type: CREATE_REPORT,\n    //     data: report\n    //   });\n    // }\n    const report = await reportService.createReport(newReport);\n    dispatch({\n      type: CREATE_REPORT,\n      data: report,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// export const copyReport = (\n//   reportDetailsToCopy,\n//   reportTracksToCopy\n// ) => async dispatch => {\n//   dispatch({\n//     type: SET_LOADING\n//   });\n//   const report = await reportService.createReport(reportDetailsToCopy);\n//   dispatch({\n//     type: CREATE_REPORT,\n//     data: report\n//   });\n//   reportTracksToCopy.forEach(async track => {\n//     const trackToAdd = {\n//       ...track,\n//       report_id: report.id,\n//       report_track_id: null\n//     };\n//     await reportService.addTrackToReport(trackToAdd);\n//   });\n//   const newReport = await reportService.getOne(report.id);\n//   dispatch({\n//     type: GET_ONE_REPORT,\n//     data: newReport\n//   });\n// };\n\nexport const updateReport = (updatedReport: ReportDetails) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportService.updateReport(updatedReport);\n    dispatch({\n      type: UPDATE_REPORT,\n      data: updatedReport,\n    });\n  } catch (error) {\n    console.log('reportActions updateReport error:', error);\n  }\n};\n\nexport const checkForDelete = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CHECK_FOR_DELETE,\n      data: id,\n    });\n  } catch (error) {\n    console.log('reportActions checkFordelete error', error);\n  }\n};\n\nexport const unCheckForDelete = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: UNCHECK_FOR_DELETE,\n      data: id,\n    });\n  } catch (error) {\n    console.log('reportActions unCheckForDelete error', error);\n  }\n};\n\nexport const deleteChecked = (\n  idsToDelete: Array<number>,\n  // eslint-disable-next-line camelcase\n  report_id: Number,\n  remainingTracks: Array<ReportItem>\n) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    idsToDelete.forEach(async (id: number) => {\n      await reportService.deleteTrackFromReport(id);\n    });\n    // await reportService.updateSortableRank(remainingTracks);\n    // const report = await reportService.getOne(report_id);\n    // console.log(report);\n    dispatch({\n      type: GET_ONE_REPORT,\n      data: remainingTracks,\n    });\n    dispatch({\n      type: CLEAR_CHECKED_FOR_DELETE,\n    });\n  } catch (error) {\n    console.log('reportActions deleteChecked error:', error);\n  }\n};\n\n// eslint-disable-next-line camelcase\n// export const updateSortableRank = newOrder => async dispatch => {\n//   try {\n//     dispatch({\n//       type: SET_LOADING\n//     });\n//     await reportService.updateSortableRank(newOrder);\n//     const updatedSortableRanks = [];\n//     newOrder.forEach((track, index) => {\n//       const item = {\n//         ...track,\n//         sortable_rank: index + 1\n//       };\n//       updatedSortableRanks.push(item);\n//     });\n//     dispatch({\n//       type: GET_ONE_REPORT,\n//       data: updatedSortableRanks\n//     });\n//   } catch (error) {\n//     console.log(error);\n//   }\n// };\n","import { Track } from '../track/types';\nexport const GET_ONE_REPORT = 'GET_ONE_REPORT';\nexport const GET_REPORT_DETAILS = 'GET_REPORT_DETAILS';\nexport const GET_PLAYLOG_TRACKS = 'GET_PLAYLOG_TRACKS';\nexport const ADD_NEW_TRACK = 'ADD_NEW_TRACK';\nexport const UPDATE_TRACK = 'UPDATE_TRACK';\nexport const SET_EDIT_TRACK_ID = 'SET_EDIT_TRACK_ID';\nexport const GET_ONE_TRACK = 'GET_ONE_TRACK';\nexport const REMOVE_CURRENT_TRACK = 'REMOVE_CURRENT_TRACK';\nexport const DELETE_TRACK_FROM_REPORT = 'DELETE_TRACK_FROM_REPORT';\nexport const CHECK_FOR_DELETE = 'CHECK_FOR_DELETE';\nexport const UNCHECK_FOR_DELETE = 'UNCHECK_FOR_DELETE';\nexport const CLEAR_CHECKED_FOR_DELETE = 'CLEAR_CHECKED_FOR_DELETE';\nexport const CREATE_REPORT = 'CREATE_REPORT';\nexport const UPDATE_REPORT = 'UPDATE_REPORT';\nexport const CLEAR_CURRENT_REPORT = 'CLEAR_CURRENT_REPORT';\nexport const SET_LOADING = 'SET_LOADING';\nexport const ADD_TRACK_TO_REPORT = 'ADD_TRACK_TO_REPORT';\nexport const CREATE_NEW_PROGRAM_ON_NEW_REPORT =\n  'CREATE_NEW_PROGRAM_ON_NEW_REPORT';\n// REPORT_ERROR\n\nexport interface ReportItem {\n  sortable_rank: number;\n  artist_name: string;\n  track_title: string;\n  length: number;\n  track_id: number;\n  artist_id: number;\n  album_id: number;\n  album_name: string;\n  disc_no: number | null;\n  track_no: number | null;\n  cat_id: string | null;\n  country: number;\n  isrc: string | null;\n  label: string | null;\n  people: string | null;\n  record_country: string | null;\n  year: string | null;\n  report_track_id: number;\n}\n\nexport interface PlaylogItem {\n  track_id: number;\n  artist_id: number;\n  album_id: number;\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string | null;\n  cat_id: string | null;\n  year: string | null;\n  disc_no: string | null;\n  track_no: string | null;\n  length: number;\n  country: number;\n  record_country: string | null;\n  sortable_rank: number;\n  people: string | null;\n  isrc: string | null;\n  report_id: number;\n  report_track_id: number;\n  user_id: number;\n  spotify_id: string | null;\n}\n\nexport interface ReportDetails {\n  program_name: string;\n  program_no: number | null;\n  program_dj: string;\n  program_date: string;\n  program_start_time: string;\n  program_end_time: string;\n  id: number;\n  program_id: number;\n  rerun: number | null;\n  status: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport interface CreateNewReportFormTypes {\n  program_name: string | undefined;\n  program_no: number | null;\n  program_dj: string;\n  program_date: string;\n  program_start_time: string | undefined;\n  program_end_time: string | undefined;\n  program_id: number;\n  rerun: number | null;\n  status: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n}\n\nexport interface ReportState {\n  report: Array<ReportItem>;\n  playlog: Array<PlaylogItem>;\n  editTrackId: number | null;\n  reportDetails: ReportDetails | null;\n  newReport: ReportDetails | null;\n  loading: boolean;\n  checkedForDelete: Array<number>;\n  currentTrack: Track | null;\n}\n\n// report action types\ninterface GetReportDetailsAction {\n  type: typeof GET_REPORT_DETAILS;\n  data: ReportDetails;\n}\n\ninterface CreateReportAction {\n  type: typeof CREATE_REPORT;\n  data: ReportDetails;\n}\n\ninterface UpdateReportAction {\n  type: typeof UPDATE_REPORT;\n  data: ReportDetails;\n}\n\ninterface GetOneReportAction {\n  type: typeof GET_ONE_REPORT;\n  data: ReportItem[];\n}\n\ninterface PlaylogAction {\n  type: typeof GET_PLAYLOG_TRACKS;\n  playlog: Array<PlaylogItem>;\n  report: Array<ReportItem>;\n}\n\ninterface AddTrackToReportAction {\n  type: typeof ADD_TRACK_TO_REPORT;\n  data: ReportItem;\n}\n\ninterface AddNewTrackToReportAction {\n  type: typeof ADD_NEW_TRACK;\n  data: ReportItem;\n}\n\ninterface UpdateTrackAction {\n  type: typeof UPDATE_TRACK;\n  data: ReportItem;\n}\n\ninterface SetEditTrackIdAction {\n  type: typeof SET_EDIT_TRACK_ID;\n  data: number;\n}\n\ninterface GetOneTrackAction {\n  type: typeof GET_ONE_TRACK;\n  data: Track;\n}\n\ninterface RemoveCurrentTrackAction {\n  type: typeof REMOVE_CURRENT_TRACK;\n}\n\ninterface DeleteTrackFromReportAction {\n  type: typeof DELETE_TRACK_FROM_REPORT;\n  data: number;\n}\n\ninterface CheckForDeleteAction {\n  type: typeof CHECK_FOR_DELETE;\n  data: number;\n}\n\ninterface UncheckForDeleteAction {\n  type: typeof UNCHECK_FOR_DELETE;\n  data: number;\n}\n\ninterface ClearCheckedForDeleteAction {\n  type: typeof CLEAR_CHECKED_FOR_DELETE;\n}\n\ninterface ClearCurrentReportAction {\n  type: typeof CLEAR_CURRENT_REPORT;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ReportActionTypes =\n  | GetOneReportAction\n  | UpdateReportAction\n  | PlaylogAction\n  | GetReportDetailsAction\n  | CreateReportAction\n  | AddTrackToReportAction\n  | AddNewTrackToReportAction\n  | UpdateTrackAction\n  | SetEditTrackIdAction\n  | GetOneTrackAction\n  | RemoveCurrentTrackAction\n  | DeleteTrackFromReportAction\n  | ClearCurrentReportAction\n  | CheckForDeleteAction\n  | UncheckForDeleteAction\n  | ClearCheckedForDeleteAction\n  | SetLoadingAction;\n\nexport interface AddTrackToReportParams {\n  track_id: number;\n  report_id: number;\n  length: number;\n  sortable_rank: number;\n}\n\nexport interface DeleteTrackFromReportParams {\n  report_track_id: number;\n  report_id: number;\n  remainingTracks: Array<ReportItem>;\n}\n","import axios from 'axios';\nimport download from 'downloadjs';\nimport { ReportTransferParams } from './types';\n\nconst baseUrl = '/api/reportslist';\n\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// get a list of reports by date\nconst getAllByDate = async (date: string) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/date/${date}`, config);\n  return request.data;\n};\n\n// get all by month and by user\nconst getAllByDateByUser = async (date: string, user: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(\n    `${baseUrl}/all?date=${date}&user=${user}`,\n    config\n  );\n  return request.data;\n};\n\n// get all in progress reports of one user\nconst getAllInProgress = async (id: number | undefined) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/user/${id}`, config);\n  return request.data;\n};\n\nconst getAllTransfers = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get('/api/reporttransfer', config);\n  return request.data;\n};\n\nconst deleteReport = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/${id}`, {}, config);\n  return request.data;\n};\n\n// generate text file for download\nconst generateReportDownload = async (params: ReportTransferParams) => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' },\n    };\n    const request = await axios.post('/api/reporttransfer', params, config);\n    return request.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// download report\nexport const downloadReport = async (filename: string) => {\n  try {\n    const config = {\n      headers: { Authorization: token, responseType: 'blob' },\n    };\n    const response = await axios.get(`/api/reporttransfer/${filename}`, config);\n    download(response.data, filename);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default {\n  setToken,\n  deleteReport,\n  getAllByDate,\n  getAllByDateByUser,\n  getAllInProgress,\n  getAllTransfers,\n  generateReportDownload,\n  downloadReport,\n};\n","import { Dispatch } from 'redux';\nimport {\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  SET_LOADING,\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  CLEAR_CURRENT_REPORT,\n  DELETE_REPORT,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT,\n  ReportTransferParams,\n  DeleteInProgressReportParams,\n} from './types';\n\nimport reportListService from './services';\n\n// get a list of report transfers by date\nexport const getAllTransfers = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const reports = await reportListService.getAllTransfers();\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllTransfers error', error);\n  }\n};\n\nexport const generateReportTransfer = (params: ReportTransferParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const transferredReport = await reportListService.generateReportDownload(\n      params\n    );\n    const reports = await reportListService.getAllTransfers();\n    dispatch({\n      type: GET_ALL_REPORT_TRANSFERS,\n      data: reports,\n    });\n    dispatch({\n      type: GENERATE_REPORT_TRANSFER,\n      data: transferredReport,\n    });\n  } catch (error) {\n    console.log('reportListActions generateReportTransferError', error);\n  }\n};\n\n// get a list of reports by date\nexport const getAllReportsByDate = (date: string) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllByDate(date);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllReportsByDate error', error);\n  }\n};\n\n// get a list of reports by date by user\nexport const getAllReportsByDateByUser = (date: string, user: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllByDateByUser(date, user);\n    dispatch({\n      type: GET_ALL_REPORTS_BY_DATE,\n      data: reports,\n      date,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllReportsByDateByUser error', error);\n  }\n};\n\n// get all in progress by current user for front page\nexport const getAllInProgress = (id: number | undefined) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: CLEAR_CURRENT_REPORT,\n    });\n    const reports = await reportListService.getAllInProgress(id);\n    // console.log('reportreducer', report);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log('reportListActions getAllInProgressReports error', error);\n  }\n};\n\nexport const deleteInProgressReport = (\n  params: DeleteInProgressReportParams\n) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportListService.deleteReport(params.report_id);\n    const reports = await reportListService.getAllInProgress(params.user_id);\n    dispatch({\n      type: GET_ALL_IN_PROGRESS,\n      data: reports,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteReport = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await reportListService.deleteReport(id);\n    dispatch({\n      type: DELETE_REPORT,\n      data: id,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const filterByUserId = (id: number) => (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_USER_ID,\n    data: id,\n  });\n};\n\nexport const filterByStatus = (status: number) => (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_STATUS,\n    data: status,\n  });\n};\n\nexport const filterByText = (text: string) => async (dispatch: Dispatch) => {\n  dispatch({\n    type: FILTER_BY_TEXT,\n    data: text,\n  });\n};\n","export const GET_ALL_REPORTS_BY_DATE = 'GET_ALL_REPORTS_BY_DATE';\nexport const GET_ALL_IN_PROGRESS = 'GET_ALL_IN_PROGRESS';\nexport const GET_ALL_REPORT_TRANSFERS = 'GET_ALL_REPORT_TRANSFERS';\nexport const GENERATE_REPORT_TRANSFER = 'GENERATE_REPORT_TRANSFER';\nexport const FILTER_BY_USER_ID = 'FILTER_BY_USER_ID';\nexport const FILTER_BY_STATUS = 'FILTER_BY_STATUS';\nexport const FILTER_BY_TEXT = 'FILTER_BY_TEXT';\nexport const DELETE_REPORT = 'DELETE_REPORT';\nexport const CLEAR_CURRENT_REPORT = 'CLEAR_CURRENT_REPORT';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Report {\n  program_no: number | null;\n  name: string;\n  program_date: string;\n  program_start_time: string;\n  program_end_time: string;\n  status: number;\n  rerun: number | null;\n  program_dj: string;\n  id: number;\n  user_id: number;\n}\n\nexport interface ReportTransfer {\n  id: number;\n  user_id: number;\n  username: string;\n  first_name: string;\n  last_name: string;\n  status: number;\n  filename: string;\n  period: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface ReportListState {\n  inProgress: Array<Report>;\n  reportList: Array<Report>;\n  reportListDate: string | null;\n  reportTransferList: Array<ReportTransfer>;\n  lastTransfer: ReportTransfer | null;\n  filterStatusValue: number | null;\n  filterUserValue: number | null;\n  filterByText: string;\n  error: string | null;\n  loading: boolean;\n}\n\nexport interface ReportTransferParams {\n  user_id: number;\n  status: number;\n  period: string;\n  filename: string;\n}\n\nexport interface DeleteInProgressReportParams {\n  report_id: number;\n  user_id: number | undefined;\n}\n\n// reportlist action types\ninterface GetAllReportsByDateAction {\n  type: typeof GET_ALL_REPORTS_BY_DATE;\n  data: Array<Report>;\n  date: string;\n}\n\ninterface GetAllInProgressAction {\n  type: typeof GET_ALL_IN_PROGRESS;\n  data: Array<Report>;\n}\n\ninterface GetAllReportTransfersAction {\n  type: typeof GET_ALL_REPORT_TRANSFERS;\n  data: Array<ReportTransfer>;\n}\n\ninterface GenerateReportTransferAction {\n  type: typeof GENERATE_REPORT_TRANSFER;\n  data: ReportTransfer;\n}\n\ninterface FilterByUserIdAction {\n  type: typeof FILTER_BY_USER_ID;\n  data: number;\n}\n\ninterface FilterByStatusAction {\n  type: typeof FILTER_BY_STATUS;\n  data: number;\n}\n\ninterface FilterByTextAction {\n  type: typeof FILTER_BY_TEXT;\n  data: string;\n}\n\ninterface DeleteReportAction {\n  type: typeof DELETE_REPORT;\n  data: number;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type ReportListActionTypes =\n  | GetAllReportsByDateAction\n  | GetAllInProgressAction\n  | GetAllReportTransfersAction\n  | GenerateReportTransferAction\n  | FilterByUserIdAction\n  | FilterByStatusAction\n  | FilterByTextAction\n  | DeleteReportAction\n  | SetLoadingAction;\n\nexport interface ReportListSelectionDate {\n  reportYear: string;\n  reportMonth: string;\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { Table, Icon, Confirm } from 'semantic-ui-react';\nimport { deleteInProgressReport } from '../../store/reportList/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nimport { Report } from '../../store/reportList/types';\nimport { ApplicationState } from '../../store/types';\n\ninterface Props {\n  report: Report;\n}\n\nconst InProgressReportListItem: React.FC<Props> = ({ report }) => {\n  const dispatch = useDispatch();\n  const login = useSelector((state: ApplicationState) => state.login);\n  const [open, setOpen] = useState(false);\n\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n\n  const confirmDelete = () => {\n    setOpen(false);\n    const params = {\n      report_id: report.id,\n      user_id: login.currentUser?.id,\n    };\n    dispatch(deleteInProgressReport(params));\n    dispatch(\n      setNotification(\n        `${report.name} ${report.program_date} poistettu!`,\n        'success'\n      )\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Table.Row>\n        <Table.Cell>\n          <Link to={`reports/${report.id}`}>{report.name}</Link>\n        </Table.Cell>\n        <Table.Cell>\n          {moment(report.program_date).format('DD.MM.YYYY')}\n        </Table.Cell>\n        <Table.Cell>{report.program_no}</Table.Cell>\n        <Table.Cell>\n          {' '}\n          <Icon color='red' onClick={() => setOpen(true)} name='delete' />\n          <Confirm\n            content={`Are you sure you wish to delete ${report.name} ${report.program_date}`}\n            open={open}\n            onCancel={cancelDelete}\n            onConfirm={confirmDelete}\n            cancelButton='Nope'\n            confirmButton='Sure'\n          />\n        </Table.Cell>\n      </Table.Row>\n    </React.Fragment>\n  );\n};\n\nexport default InProgressReportListItem;\n","import React from 'react';\nimport { Table, Grid, Container, Header } from 'semantic-ui-react';\nimport InProgressReportListItem from './InProgressReportListItem';\nimport { Report } from '../../store/reportList/types';\n\ninterface Props {\n  inProgress: Array<Report>;\n}\n\nconst InProgressReportList: React.FC<Props> = ({ inProgress }) => {\n  console.log(inProgress);\n  if (inProgress === null) {\n    return null;\n  }\n  if (inProgress.length === 0) {\n    return (\n      <Grid.Column>\n        <Container>\n          <h3>Reports in progress</h3>\n          no reports in progress\n        </Container>\n      </Grid.Column>\n    );\n  }\n  return (\n    <React.Fragment>\n      <Grid.Column>\n        <Container>\n          <Header>Reports in progress</Header>\n          <Table striped>\n            <Table.Header>\n              <Table.Row>\n                <Table.Cell>Program name</Table.Cell>\n                <Table.Cell>Date</Table.Cell>\n                <Table.Cell>Number</Table.Cell>\n                <Table.Cell></Table.Cell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {inProgress.map((r) => (\n                <InProgressReportListItem key={r.id} report={r} />\n              ))}\n            </Table.Body>\n          </Table>\n        </Container>\n      </Grid.Column>\n    </React.Fragment>\n  );\n};\n\nexport default InProgressReportList;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Grid, Dimmer, Loader } from 'semantic-ui-react';\nimport CreateNewReport from '../../report/CreateNewReport';\nimport InProgressReportsList from '../../reportList/InProgressReportList';\nimport { getAllInProgress } from '../../../store/reportList/actions';\n\nimport { ApplicationState } from '../../../store/types';\n\nconst Home: React.FC = () => {\n  const dispatch = useDispatch();\n  const reportList = useSelector((state: ApplicationState) => state.reportList);\n  const program = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n  console.log(reportList);\n  useEffect(() => {\n    dispatch(getAllInProgress(login.currentUser?.id));\n    // eslint-disable-next-line\n  }, []);\n  if (program.activePrograms === null) {\n    return (\n      <Container>\n        <h2>Playlist reporting</h2>\n        <Dimmer active>\n          <Loader>Loading active programs...</Loader>\n        </Dimmer>{' '}\n      </Container>\n    );\n  }\n  return (\n    <Container>\n      <h2>Playlist reporting</h2>\n      <Grid divided='vertically'>\n        <Grid.Row columns={2}>\n          <CreateNewReport />\n          <InProgressReportsList inProgress={reportList.inProgress} />\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst baseUrl = '/api/login';\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nconst login = async (credentials: LoginCredentials) => {\n  const res = await axios.post(baseUrl, credentials);\n  return res.data;\n};\n\nexport default { login };\n","import axios from 'axios';\nimport { MergeProgramParams, NewProgramType, UpdateProgramType } from './types';\n\nconst baseUrl = '/api/programs';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAllActive = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(`${baseUrl}/active`, config);\n  return req.data;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(`${baseUrl}/all`, config);\n  return req.data;\n};\n\nconst getOne = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.get(`${baseUrl}/getone/${id}`, config);\n  return request.data;\n};\n\nconst createProgram = async (newProgram: NewProgramType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(baseUrl, newProgram, config);\n  return request.data;\n};\n\nconst updateProgram = async (updatedProgram: UpdateProgramType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/update`, updatedProgram, config);\n  return request.data;\n};\n\nconst mergePrograms = async (mergeParams: MergeProgramParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.put(`${baseUrl}/merge`, mergeParams, config);\n  return request.data;\n};\n\nexport default {\n  getAllActive,\n  getAll,\n  getOne,\n  createProgram,\n  updateProgram,\n  mergePrograms,\n  setToken,\n};\n","import axios from 'axios';\nimport {\n  AddTrackToDbType,\n  AddTrackToDbAndReportType,\n  ChangeAlbumParams,\n  ChangeArtistParams,\n  UpdateTrackType,\n  // UpdateTrackFormValuesType,\n} from './types';\nconst baseUrl = '/api/tracks';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\n// add new track and save it to a report\nconst addNewTrack = async (trackToAdd: AddTrackToDbAndReportType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(\n    `${baseUrl}/addandreport`,\n    trackToAdd,\n    config\n  );\n  return response.data;\n};\n\n// add new track without saving to report\nconst addTrackToDb = async (trackToAdd: AddTrackToDbType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(`${baseUrl}/addtodb`, trackToAdd, config);\n  return response.data;\n};\n\n// add track to album without saving to a report\nconst addTrackToAlbum = async (trackToAdd: AddTrackToDbType) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.post(\n    `${baseUrl}/addtracktoalbum`,\n    trackToAdd,\n    config\n  );\n  return response.data;\n};\n\nconst updateTrack = async (trackToUpdate: UpdateTrackType) => {\n  console.log('track to update at service', trackToUpdate);\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(baseUrl, trackToUpdate, config);\n  return response.data;\n};\n\nconst updateAlbumId = async (albumToUpdate: ChangeAlbumParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/tracks/updatealbum',\n    albumToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst updateArtistId = async (artistToUpdate: ChangeArtistParams) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    '/api/tracks/updateartist',\n    artistToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst getOneTrack = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/details/${id}`, config);\n  return response.data;\n};\n\nconst getOneTrackHistory = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.get(`${baseUrl}/history/${id}`, config);\n  return response.data;\n};\n\nexport default {\n  setToken,\n  addNewTrack,\n  addTrackToAlbum,\n  updateTrack,\n  getOneTrack,\n  getOneTrackHistory,\n  updateAlbumId,\n  updateArtistId,\n  addTrackToDb,\n};\n","import axios from 'axios';\nimport { UserToAdd, UserToUpdate } from './types';\n\nconst baseUrl = '/api/users';\nlet token: string | null = null;\n\nconst setToken = (newToken: string) => {\n  token = `bearer ${newToken}`;\n};\n\nconst getAll = async () => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const req = await axios.get(baseUrl, config);\n  return req.data;\n};\n\nconst createUser = async (userToAdd: UserToAdd) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const request = await axios.post(baseUrl, userToAdd, config);\n  return request.data;\n};\n\nconst updateUser = async (userToUpdate: UserToUpdate) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.put(\n    `${baseUrl}/${userToUpdate.id}`,\n    userToUpdate,\n    config\n  );\n  return response.data;\n};\n\nconst deleteUser = async (id: number) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n  const response = await axios.delete(`${baseUrl}/${id}`, config);\n  return response.data;\n};\n\nexport default { getAll, setToken, createUser, updateUser, deleteUser };\n","import loginService from './services';\nimport {\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  SET_LOADING,\n  UPDATE_CURRENT_USER,\n  CurrentUser,\n} from './types';\nimport { Dispatch } from 'redux';\n\nimport albumService from '../album/services';\nimport artistService from '../artist/services';\nimport programService from '../program/services';\nimport reportService from '../report/services';\nimport reportListService from '../reportList/services';\nimport searchService from '../search/services';\nimport trackService from '../track/services';\nimport userService from '../user/services';\n\ninterface NewLogin {\n  username: string;\n  password: string;\n}\n\nexport const initializeUser = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const loggedUserJSON = window.localStorage.getItem('loggedUser');\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      // set token for logged in user\n      userService.setToken(user.token);\n      reportService.setToken(user.token);\n      reportListService.setToken(user.token);\n      programService.setToken(user.token);\n      searchService.setToken(user.token);\n      trackService.setToken(user.token);\n      artistService.setToken(user.token);\n      albumService.setToken(user.token);\n      dispatch({\n        type: INIT_USER,\n        data: user,\n      });\n    }\n  } catch (err) {\n    // dispatch({\n    //   type: LOGIN_ERROR,\n    //   payload: err.response.statusText,\n    // });\n    console.log('error initializing user', err);\n  }\n};\n\nexport const newLogin = (user: NewLogin) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const newUser = await loginService.login(user);\n    window.localStorage.setItem('loggedUser', JSON.stringify(newUser));\n    dispatch({\n      type: LOGIN,\n      data: newUser,\n      loading: false,\n    });\n  } catch (error) {\n    console.log(error);\n    const content = {\n      message: 'wrong username or password',\n      type: 'fail',\n    };\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: content,\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'CLEAR_NOTIFICATION',\n      });\n    }, 3000);\n  }\n};\n\nexport const logout = () => async (dispatch: Dispatch) => {\n  window.localStorage.removeItem('loggedUser');\n  dispatch({\n    type: LOGOUT,\n  });\n};\n\nexport const updateCurrentUser = (updatedCurrentUser: CurrentUser) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: UPDATE_CURRENT_USER,\n    data: updatedCurrentUser,\n  });\n};\n","export const INIT_USER = 'INIT_USER';\nexport const UPDATE_CURRENT_USER = 'UPDATE_CURRENT_USER';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface CurrentUser {\n  token: string;\n  username: string;\n  id: number;\n  email: string;\n  first_name: string;\n  last_name: string;\n  level: number;\n  status: number;\n}\n\nexport interface LoginState {\n  loading: boolean;\n  currentUser: CurrentUser | null;\n}\n\ninterface NewLoginAction {\n  type: typeof LOGIN;\n  data: CurrentUser;\n}\n\ninterface InitUserAction {\n  type: typeof INIT_USER;\n  data: CurrentUser;\n}\n\ninterface LogoutAction {\n  type: typeof LOGOUT;\n}\n\ninterface UpdateCurrentUserAction {\n  type: typeof UPDATE_CURRENT_USER;\n  data: CurrentUser;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\nexport type LoginActionTypes =\n  | SetLoadingAction\n  | NewLoginAction\n  | InitUserAction\n  | LogoutAction\n  | UpdateCurrentUserAction;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Button, Input } from 'semantic-ui-react';\nimport { newLogin } from '../../store/login/actions';\n\nconst LoginForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleLogin = (event: { preventDefault: () => void }) => {\n    event.preventDefault();\n    const user = {\n      username,\n      password,\n    };\n    dispatch(newLogin(user));\n  };\n\n  return (\n    <div>\n      <h1>RADIO TRACKLIST REPORTING</h1>\n      <h3>Log in</h3>\n      <Form onSubmit={handleLogin}>\n        <Form.Field\n          id='login-username'\n          label='username'\n          control={Input}\n          type='text'\n          placeholder='Username...'\n          onChange={(e: { target: { value: string } }) =>\n            setUsername(e.target.value.trim())\n          }\n        />\n        <Form.Field\n          id='login-password'\n          label='password'\n          control={Input}\n          type='password'\n          placeholder='Password...'\n          onChange={(e: { target: { value: string } }) =>\n            setPassword(e.target.value.trim())\n          }\n        />\n        <Button id='login-button' color='green' type='submit'>\n          Log in\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\nimport { TextField, PasswordField } from '../../layout/forms/FormFields';\n\nimport { CurrentUserFormValues, User } from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: CurrentUserFormValues) => void;\n  onCancel: () => void;\n  user: User;\n}\n\nconst CurrentUserForm: React.FC<Props> = ({ onSubmit, onCancel, user }) => {\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        confirm_password: '',\n        first_name: user.first_name,\n        last_name: user.last_name,\n        email: user.email,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Password - fill out field only if you wish to change the password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={TextField}\n              required\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={TextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={TextField}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default CurrentUserForm;\n","import { Dispatch } from 'redux';\nimport userService from './services';\nimport {\n  SET_LOADING,\n  INIT_USER_LIST,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER,\n  UserToAdd,\n  UserToUpdate,\n} from './types';\n\nexport const initializeUsers = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const users = await userService.getAll();\n    dispatch({\n      type: INIT_USER_LIST,\n      data: users,\n    });\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const createUser = (userToAdd: UserToAdd) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const newUser = await userService.createUser(userToAdd);\n    dispatch({\n      type: CREATE_USER,\n      data: newUser,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateUser = (userToUpdate: UserToUpdate) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await userService.updateUser(userToUpdate);\n    const users = await userService.getAll();\n    dispatch({\n      type: UPDATE_USER,\n      data: users,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const deleteUser = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    dispatch({\n      type: DELETE_USER,\n      data: id,\n    });\n    await userService.deleteUser(id);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Modal, Header } from 'semantic-ui-react';\nimport CurrentUserForm from './CurrentUserForm';\nimport { CurrentUser } from '../../../store/login/types';\nimport { CurrentUserFormValues } from '../../../store/user/types';\n\nimport { updateUser } from '../../../store/user/actions';\nimport { updateCurrentUser } from '../../../store/login/actions';\nimport { setNotification } from '../../../store/notification/actions';\n\ninterface Props {\n  currentUser: CurrentUser;\n}\n\nconst CurrentUserModal: React.FC<Props> = ({ currentUser }) => {\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState(false);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  const submitUpdatedUser = (values: CurrentUserFormValues) => {\n    try {\n      const userToUpdate = {\n        ...values,\n        id: currentUser.id,\n        status: currentUser.status,\n        level: currentUser.level,\n      };\n      const currentUserToUpdate = {\n        ...values,\n        token: currentUser.token,\n        username: currentUser.username,\n        id: currentUser.id,\n        level: currentUser.level,\n        status: currentUser.status,\n      };\n      dispatch(updateUser(userToUpdate));\n      dispatch(updateCurrentUser(currentUserToUpdate));\n      dispatch(\n        setNotification(\n          `${userToUpdate.first_name} ${userToUpdate.last_name} updated!`,\n          'success'\n        )\n      );\n      console.log('updating user', userToUpdate);\n      handleClose();\n    } catch (e) {\n      console.error(e.response.data);\n      // setError(e.response.data.error);\n    }\n  };\n  return (\n    <Modal\n      trigger={\n        <span role='menuitem' tabIndex={-8} onClick={handleOpen}>\n          Edit user info\n        </span>\n      }\n      closeIcon\n      open={modalOpen}\n      onClose={handleClose}\n    >\n      <Header content='Edit current user info' />\n      <Modal.Content>\n        <CurrentUserForm\n          user={currentUser}\n          onCancel={handleClose}\n          onSubmit={submitUpdatedUser}\n        />\n        {/* <Form onSubmit={updateUserClick}>\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Salasana...'\n            onChange={e => setPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana - syötä vaihtaaksesi</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            type='password'\n            placeholder='Vahvista salasana...'\n            onChange={e => setConfirmPassword(e.target.value)}\n            label={\n              <React.Fragment>\n                <span>Salasana uudelleen</span>\n                {'  '}\n                <ModalNotification />\n              </React.Fragment>\n            }\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={firstName}\n            type='text'\n            placeholder='Etunimi...'\n            onChange={e => setFirstName(e.target.value)}\n            label='Etunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={lastName}\n            type='text'\n            placeholder='Sukunimi...'\n            onChange={e => setLastName(e.target.value)}\n            label='Sukunimi'\n          />\n          <Form.Field\n            control={Input}\n            focus\n            defaultValue={email}\n            type='email'\n            placeholder='Email...'\n            onChange={e => setEmail(e.target.value)}\n            label='Email'\n          />\n          <Button\n            color='green'\n            type='submit'\n            disabled={!email || !firstName || !lastName}\n          >\n            Tallenna\n          </Button>\n          <ModalNotification />\n        </Form> */}\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default CurrentUserModal;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image, Dropdown, Icon } from 'semantic-ui-react';\nimport logo from '../../../img/logo.png';\nimport { CurrentUser } from '../../../store/login/types';\nimport { logout } from '../../../store/login/actions';\nimport { useDispatch } from 'react-redux';\n\nimport CurrentUserModal from '../../users/CurrentUserModal/CurrentUserModal';\n\ninterface Props {\n  currentUser: CurrentUser;\n}\n\nconst AdminNavbar: React.FC<Props> = ({ currentUser }) => {\n  const dispatch = useDispatch();\n  const getLoggedInUserInfo = () => {\n    return <CurrentUserModal currentUser={currentUser} />;\n  };\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n  const trigger = (\n    <span>\n      <Icon color='pink' name='user' size='large' /> {currentUser.first_name}{' '}\n      {currentUser.last_name}\n    </span>\n  );\n\n  const options = [\n    {\n      key: 'user',\n      text: <CurrentUserModal currentUser={currentUser} />,\n      icon: 'user',\n      onClick: getLoggedInUserInfo,\n    },\n    {\n      key: 'sign-out',\n      text: 'Log out',\n      icon: 'sign out',\n      onClick: handleLogoutClick,\n    },\n  ];\n  return (\n    <div style={{ marginBottom: '1.5rem' }}>\n      <Menu pointing stackable inverted>\n        <Menu.Item link>\n          <Link to='/'>\n            <Image alt='logo' src={logo} size='mini' />\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/reports'>\n            <h4>REPORTS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/top100'>\n            <h4>TOP 100</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/search'>\n            <h4>SEARCH</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/transfer'>\n            <h4>TRANSFER FILES</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/programs'>\n            <h4>PROGRAMS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/users'>\n            <h4>USERS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Dropdown\n            trigger={trigger}\n            options={options}\n            pointing='top left'\n            icon={null}\n          />\n        </Menu.Item>\n        <Menu.Item>{/* <CurrentReport /> */}</Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default AdminNavbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image, Dropdown, Icon } from 'semantic-ui-react';\nimport logo from '../../../img/logo.png';\nimport { CurrentUser } from '../../../store/login/types';\nimport { logout } from '../../../store/login/actions';\nimport { useDispatch } from 'react-redux';\n\nimport CurrentUserModal from '../../users/CurrentUserModal/CurrentUserModal';\n\ninterface Props {\n  currentUser: CurrentUser;\n}\n\nconst StaffNavbar: React.FC<Props> = ({ currentUser }) => {\n  const dispatch = useDispatch();\n  const getLoggedInUserInfo = () => {\n    return <CurrentUserModal currentUser={currentUser} />;\n  };\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n  const trigger = (\n    <span>\n      <Icon color='pink' name='user' size='large' /> {currentUser.first_name}{' '}\n      {currentUser.last_name}\n    </span>\n  );\n\n  const options = [\n    {\n      key: 'user',\n      text: <CurrentUserModal currentUser={currentUser} />,\n      icon: 'user',\n      onClick: getLoggedInUserInfo,\n    },\n    {\n      key: 'sign-out',\n      text: 'Log out',\n      icon: 'sign out',\n      onClick: handleLogoutClick,\n    },\n  ];\n  return (\n    <div style={{ marginBottom: '1.5rem' }}>\n      <Menu pointing stackable inverted>\n        <Menu.Item link>\n          <Link to='/'>\n            <Image alt='logo' src={logo} size='mini' />\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/reports'>\n            <h4>REPORTS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/top100'>\n            <h4>TOP 100</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/search'>\n            <h4>SEARCH</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/transfer'>\n            <h4>TRANSFER FILES</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/programs'>\n            <h4>PROGRAMS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Dropdown\n            trigger={trigger}\n            options={options}\n            pointing='top left'\n            icon={null}\n          />\n        </Menu.Item>\n        <Menu.Item>{/* <CurrentReport /> */}</Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default StaffNavbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Image, Dropdown, Icon } from 'semantic-ui-react';\nimport logo from '../../../img/logo.png';\nimport { CurrentUser } from '../../../store/login/types';\nimport { logout } from '../../../store/login/actions';\nimport { useDispatch } from 'react-redux';\n\nimport CurrentUserModal from '../../users/CurrentUserModal/CurrentUserModal';\n\ninterface Props {\n  currentUser: CurrentUser;\n}\n\nconst BasicNavbar: React.FC<Props> = ({ currentUser }) => {\n  const dispatch = useDispatch();\n  const getLoggedInUserInfo = () => {\n    return <CurrentUserModal currentUser={currentUser} />;\n  };\n  const handleLogoutClick = () => {\n    dispatch(logout());\n  };\n  const trigger = (\n    <span>\n      <Icon color='pink' name='user' size='large' /> {currentUser.first_name}{' '}\n      {currentUser.last_name}\n    </span>\n  );\n\n  const options = [\n    {\n      key: 'user',\n      text: <CurrentUserModal currentUser={currentUser} />,\n      icon: 'user',\n      onClick: getLoggedInUserInfo,\n    },\n    {\n      key: 'sign-out',\n      text: 'Log out',\n      icon: 'sign out',\n      onClick: handleLogoutClick,\n    },\n  ];\n  return (\n    <div style={{ marginBottom: '1.5rem' }}>\n      <Menu pointing stackable inverted>\n        <Menu.Item link>\n          <Link to='/'>\n            <Image alt='logo' src={logo} size='mini' />\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/reports'>\n            <h4>REPORTS</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/top100'>\n            <h4>TOP 100</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item link>\n          <Link to='/search'>\n            <h4>SEARCH</h4>\n          </Link>\n        </Menu.Item>\n        <Menu.Item position='right'>\n          <Dropdown\n            trigger={trigger}\n            options={options}\n            pointing='top left'\n            icon={null}\n          />\n        </Menu.Item>\n        <Menu.Item>{/* <CurrentReport /> */}</Menu.Item>\n      </Menu>\n    </div>\n  );\n};\n\nexport default BasicNavbar;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { ApplicationState } from '../../../store/types';\nimport AdminNavbar from './AdminNavbar';\nimport StaffNavbar from './StaffNavbar';\nimport BasicNavbar from './BasicNavbar';\n\nconst Navbar: React.FC = () => {\n  const login = useSelector((state: ApplicationState) => state.login);\n\n  switch (login.currentUser?.level) {\n    case 1:\n      return <BasicNavbar currentUser={login.currentUser} />;\n    case 2:\n      return <StaffNavbar currentUser={login.currentUser} />;\n    case 3:\n      return <AdminNavbar currentUser={login.currentUser} />;\n    default:\n      return null;\n  }\n};\n\nexport default Navbar;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport { NotificationState } from '../../../store/notification/types';\n\ninterface Props {\n  notification: NotificationState;\n}\n\nconst Notification: React.FC<Props> = ({ notification }) => {\n  if (notification.type === 'success') {\n    return (\n      <div className='fixedTop'>\n        <Message floating success header={notification.message} />\n      </div>\n    );\n  }\n\n  if (notification.type === 'fail') {\n    return (\n      <div className='fixedTop'>\n        <Message floating negative header={notification.message} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Notification;\n","import { Dispatch } from 'redux';\nimport programService from './services';\nimport {\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  GET_ONE_PROGRAM,\n  CREATE_NEW_PROGRAM,\n  UPDATE_PROGRAM,\n  SET_LOADING,\n  MergeProgramParams,\n  NewProgramType,\n  UpdateProgramType,\n} from './types';\n\nexport const getAllPrograms = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs,\n    });\n  } catch (err) {\n    console.log(\n      'error getting all programs programActions.getAllPrograms',\n      err\n    );\n  }\n};\n\n// get all active programs\nexport const initializePrograms = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const programs = await programService.getAllActive();\n    dispatch({\n      type: GET_ALL_ACTIVE_PROGRAMS,\n      data: programs,\n    });\n  } catch (err) {\n    console.log(\n      'error getting all active programs programActions.initializePrograms',\n      err\n    );\n  }\n};\n\nexport const getOneProgram = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const program = await programService.getOne(id);\n    dispatch({\n      type: GET_ONE_PROGRAM,\n      data: program,\n      id,\n    });\n  } catch (err) {\n    console.log('error getting one program programActions.getOneProgram', err);\n  }\n};\n\nexport const createNewProgram = (programToAdd: NewProgramType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const program = await programService.createProgram(programToAdd);\n    dispatch({\n      type: CREATE_NEW_PROGRAM,\n      data: program,\n    });\n  } catch (err) {\n    console.log('error creating new program', err);\n  }\n};\n\nexport const updateProgram = (updatedProgram: UpdateProgramType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await programService.updateProgram(updatedProgram);\n    dispatch({\n      type: UPDATE_PROGRAM,\n      data: updatedProgram,\n    });\n  } catch (error) {\n    console.log('error updating program', error);\n  }\n};\n\nexport const mergePrograms = (mergeParams: MergeProgramParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    await programService.mergePrograms(mergeParams);\n    const programs = await programService.getAll();\n    dispatch({\n      type: GET_ALL_PROGRAMS,\n      data: programs,\n    });\n  } catch (error) {\n    console.log(\n      'error merging two programs programActions.mergePrograms',\n      error\n    );\n  }\n};\n","export const GET_ONE_PROGRAM = 'GET_ONE_PROGRAM';\nexport const GET_ALL_PROGRAMS = 'GET_ALL_PROGRAMS';\nexport const GET_ALL_ACTIVE_PROGRAMS = 'GET_ALL_ACTIVE_PROGRAMS';\nexport const CREATE_NEW_PROGRAM = 'CREATE_NEW_PROGRAM';\nexport const CREATE_NEW_PROGRAM_ON_NEW_REPORT =\n  'CREATE_NEW_PROGRAM_ON_NEW_REPORT';\nexport const UPDATE_PROGRAM = 'UPDATE_PROGRAM';\nexport const SET_LOADING = 'SET_LOADING';\n\nexport interface Program {\n  id: number;\n  user_id: number;\n  name: string;\n  identifier?: string;\n  display?: number;\n  site?: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport interface ProgramState {\n  allPrograms: Array<Program>;\n  activePrograms: Array<Program>;\n  program: Program | null;\n  loading: boolean;\n}\n\nexport interface NewProgramType {\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface AddProgramFormValues {\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface EditProgramFormValues {\n  id: number;\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface UpdateProgramType {\n  id: number;\n  display: number;\n  identifier?: string;\n  name: string;\n  site: number;\n  user_id?: number;\n}\n\nexport interface MergeProgramParams {\n  type: string;\n  merge: number;\n  mergeTo: number;\n}\n\n// program action types\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface GetOneProgram {\n  type: typeof GET_ONE_PROGRAM;\n  data: Program;\n}\n\ninterface GetAllPrograms {\n  type: typeof GET_ALL_PROGRAMS;\n  data: Array<Program>;\n}\n\ninterface GetAllActivePrograms {\n  type: typeof GET_ALL_ACTIVE_PROGRAMS;\n  data: Array<Program>;\n}\n\ninterface CreateNewProgram {\n  type: typeof CREATE_NEW_PROGRAM;\n  data: Program;\n}\n\ninterface CreateNewProgramOnNewReport {\n  type: typeof CREATE_NEW_PROGRAM_ON_NEW_REPORT;\n  data: Program;\n}\n\ninterface UpdateProgram {\n  type: typeof UPDATE_PROGRAM;\n  data: Program;\n}\n\nexport type ProgramActionTypes =\n  | SetLoadingAction\n  | GetOneProgram\n  | GetAllPrograms\n  | GetAllActivePrograms\n  | CreateNewProgram\n  | CreateNewProgramOnNewReport\n  | UpdateProgram;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { SelectField, TextField } from '../../layout/forms/FormFields';\n\nimport { EditProgramFormValues, Program } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: EditProgramFormValues) => void;\n  onCancel: () => void;\n  login: LoginState;\n  program: Program;\n}\n\nconst displayOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst siteOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst EditProgramForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  login,\n  program,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        id: program.id,\n        name: program.name,\n        identifier: program.identifier,\n        display: program.display || 1,\n        site: program.site || 1,\n        user_id: login.currentUser?.id,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        console.log(values.display);\n        console.log(values.site);\n\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Name'\n              placeholder='Name'\n              name='name'\n              component={TextField}\n            />\n            <Field\n              label='Identifier'\n              placeholder='Identifier'\n              name='identifier'\n              type='password'\n              component={TextField}\n            />\n            <SelectField\n              label='Display'\n              name='display'\n              options={displayOptions}\n            />\n            <SelectField\n              label='Display on site'\n              name='site'\n              options={siteOptions}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Save changes\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditProgramForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport EditProgramForm from './EditProgramForm';\nimport { EditProgramFormValues, Program } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EditProgramFormValues) => void;\n  error?: string;\n  program: Program;\n  login: LoginState;\n}\n\nconst EditUserModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  program,\n  login,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Edit info of program {program.name}</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <EditProgramForm\n        program={program}\n        login={login}\n        onSubmit={onSubmit}\n        onCancel={onClose}\n      />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default EditUserModal;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\n\nimport { SelectField } from '../../layout/forms/FormFields';\n\ninterface MergeValues {\n  programToMerge: number;\n}\n\ninterface SelectFieldType {\n  key: number;\n  value: number;\n  label: string;\n}\n\ninterface Props {\n  onSubmit: (values: MergeValues) => void;\n  onCancel: () => void;\n  selectOptions: Array<SelectFieldType>;\n}\n\nconst MergeProgramForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n  selectOptions,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        programToMerge: selectOptions[0].value,\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ dirty }) => {\n        return (\n          <Form className='form ui'>\n            <span style={{ color: 'red' }}>\n              <SelectField\n                label=''\n                name='programToMerge'\n                options={selectOptions}\n              />\n            </span>\n            <Grid>\n              <Grid.Column\n                style={{ marginTop: '1rem' }}\n                floated='left'\n                width={5}\n              >\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty}\n                >\n                  Merge\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default MergeProgramForm;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Modal, Header } from 'semantic-ui-react';\nimport { mergePrograms } from '../../../store/program/actions';\nimport { setNotification } from '../../../store/notification/actions';\nimport { ApplicationState } from '../../../store/types';\n\nimport MergeProgramForm from './MergeProgramForm';\n\ninterface Props {\n  program_id: number;\n  program_name: string;\n}\n\nconst MergePrograms: React.FC<Props> = ({ program_id, program_name }) => {\n  const dispatch = useDispatch();\n  const programs = useSelector((state: ApplicationState) => state.program);\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const handleOpen = () => {\n    setModalOpen(true);\n  };\n  const handleClose = () => {\n    setModalOpen(false);\n  };\n\n  if (!modalOpen) {\n    return (\n      <button type='button' className='link-btn' onClick={handleOpen}>\n        {program_id}\n      </button>\n    );\n  }\n\n  interface MergeValues {\n    programToMerge: number;\n  }\n  const submitMergePrograms = (values: MergeValues) => {\n    console.log(Number(values.programToMerge));\n    const mergeParams = {\n      type: 'program',\n      merge: Number(values.programToMerge),\n      mergeTo: program_id,\n    };\n    console.log(mergeParams);\n    dispatch(mergePrograms(mergeParams));\n    dispatch(\n      setNotification(`Ohjelma #${mergeParams.merge} yhdistetty!`, 'success')\n    );\n    handleClose();\n  };\n  const mergeOptions = programs.allPrograms.map((program) => ({\n    key: program.id,\n    label: `${program.id} - ${program.name}`,\n    value: program.id,\n  }));\n  // const getProgramToMerge = (\n  //   e: React.SyntheticEvent<HTMLElement>,\n  //   value: DropdownProps\n  // ) => {\n  //   console.log(value);\n  //   e.preventDefault();\n  //   // setProgramToMerge(value);\n  // };\n  return (\n    <Modal\n      open={modalOpen}\n      closeIcon\n      onClose={handleClose}\n      trigger={\n        <button type='button' className='link-btn' onClick={handleOpen}>\n          {program_id}\n        </button>\n      }\n    >\n      <Header>\n        Merge {program_id} - {program_name} with:\n      </Header>\n      <Modal.Content>\n        {/* <Form onSubmit={onSubmit}>\n          <Form.Field>\n            <Dropdown\n              onChange={getProgramToMerge}\n              selection\n              search\n              options={mergeOptions}\n            />\n          </Form.Field>\n          <Form.Field>\n            <Button type='submit'>Yhdistä</Button>\n          </Form.Field>\n        </Form>{' '} */}\n        <MergeProgramForm\n          onSubmit={submitMergePrograms}\n          onCancel={handleClose}\n          selectOptions={mergeOptions}\n        />\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default MergePrograms;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table } from 'semantic-ui-react';\n\nimport EditProgramModal from './EditProgramModal';\nimport MergePrograms from './MergePrograms';\n\nimport { Program, EditProgramFormValues } from '../../store/program/types';\nimport { ApplicationState } from '../../store/types';\n\nimport { updateProgram } from '../../store/program/actions';\nimport { setNotification } from '../../store/notification/actions';\n\ninterface Props {\n  program: Program;\n}\n\nconst ProgramListItem: React.FC<Props> = ({ program }) => {\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  let className;\n  if (program.display === 1) {\n    className = 'active-program';\n  }\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitUpdatedProgram = (values: EditProgramFormValues) => {\n    try {\n      console.log(values);\n      dispatch(updateProgram(values));\n      dispatch(setNotification(`${values.name} updated!`, 'success'));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <Table.Row className={className}>\n      <Table.Cell>\n        <MergePrograms program_id={program.id} program_name={program.name} />\n      </Table.Cell>\n      <Table.Cell>\n        <EditProgramModal\n          program={program}\n          login={login}\n          modalOpen={modalOpen}\n          onSubmit={submitUpdatedProgram}\n          error={error}\n          onClose={closeModal}\n        />\n        <button\n          style={{ border: 'none', cursor: 'pointer', color: 'blue' }}\n          onClick={openModal}\n        >\n          {program.name}\n        </button>\n      </Table.Cell>\n      <Table.Cell>{program.identifier}</Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default ProgramListItem;\n","import React from 'react';\nimport { Container, Dimmer, Loader, Table } from 'semantic-ui-react';\nimport { LoginState } from '../../store/login/types';\nimport { ProgramState, Program } from '../../store/program/types';\n\nimport ProgramListItem from './ProgramListItem';\n\ninterface Props {\n  login: LoginState;\n  program: ProgramState;\n}\n\nconst ProgramList: React.FC<Props> = ({ login, program }) => {\n  if (program.allPrograms === null || program.loading === true) {\n    return (\n      <Container>\n        <Dimmer active inverted>\n          <Loader size='medium'>Loading programs...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n  if (login.currentUser?.level === 2 || login.currentUser?.level === 3) {\n    return (\n      <Container>\n        <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n          <h3 style={{ display: 'inline' }}>Programs</h3>\n        </div>\n        <Table striped>\n          <Table.Header>\n            <Table.Row>\n              <Table.Cell>ID</Table.Cell>\n              <Table.Cell>Program name</Table.Cell>\n              <Table.Cell>Additional info</Table.Cell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {program.allPrograms.map((program: Program) => (\n              <ProgramListItem program={program} key={program.id} />\n            ))}\n          </Table.Body>\n        </Table>\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default ProgramList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  SelectField,\n  TextField,\n} from '../../layout/forms/FormFields';\n\nimport { AddProgramFormValues } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  onSubmit: (values: AddProgramFormValues) => void;\n  onCancel: () => void;\n  login: LoginState;\n}\n\nconst displayOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst siteOptions = [\n  { value: 1, label: 'Visible' },\n  { value: 0, label: 'Invisible' },\n];\n\nconst AddProgramForm: React.FC<Props> = ({ onSubmit, onCancel, login }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        identifier: '',\n        display: 1,\n        site: 1,\n        user_id: login.currentUser?.id,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        console.log(values.display);\n        console.log(values.site);\n\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Name'\n              placeholder='Name'\n              name='name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Identifier'\n              placeholder='Identifier'\n              name='identifier'\n              type='password'\n              component={TextField}\n            />\n            <SelectField\n              label='Display'\n              name='display'\n              options={displayOptions}\n            />\n            <SelectField\n              label='Display on site'\n              name='site'\n              options={siteOptions}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddProgramForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddProgramForm from './AddProgramForm';\nimport { AddProgramFormValues } from '../../../store/program/types';\nimport { LoginState } from '../../../store/login/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: AddProgramFormValues) => void;\n  error?: string;\n  login: LoginState;\n}\nconst AddProgramModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  login,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new program</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <AddProgramForm onSubmit={onSubmit} onCancel={onClose} login={login} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddProgramModal;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ApplicationState } from '../../store/types';\nimport { AddProgramFormValues } from '../../store/program/types';\nimport { Button, Icon, Container } from 'semantic-ui-react';\nimport { getAllPrograms, createNewProgram } from '../../store/program/actions';\nimport ProgramList from './ProgramList';\nimport AddProgramModal from './AddProgramModal';\n\nconst Programs: React.FC = () => {\n  const programs = useSelector((state: ApplicationState) => state.program);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllPrograms());\n    // eslint-disable-next-line\n  }, []);\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewProgram = (values: AddProgramFormValues) => {\n    try {\n      const programToAdd = {\n        ...values,\n        display: Number(values.display),\n        site: Number(values.site),\n      };\n      console.log(programToAdd);\n      dispatch(createNewProgram(programToAdd));\n      // dispatch(setNotification(`User ${values.username} created!`, 'success'));\n      console.log('adding program', programToAdd);\n      closeModal();\n    } catch (e) {\n      // dispatch(setNotification('Failed to create user!', 'fail'));\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <Container>\n      <Button\n        floated='right'\n        color='green'\n        style={{ marginBottom: '0.5rem' }}\n        onClick={() => openModal()}\n      >\n        <Icon name='add' />\n        Create a new program\n      </Button>\n      <AddProgramModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewProgram}\n        error={error}\n        onClose={closeModal}\n        login={login}\n      />\n      <ProgramList program={programs} login={login} />\n    </Container>\n  );\n};\n\nexport default Programs;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\nimport { SelectField } from '../layout/forms/FormFields';\nimport { ReportListSelectionDate } from '../../store/reportList/types';\nimport { reportMonthOptions, reportYearOptions } from '../../constants';\n\ninterface Props {\n  onSubmit: (values: ReportListSelectionDate) => void;\n}\n\nconst ReportPeriodSelectionForm: React.FC<Props> = ({ onSubmit }) => {\n  console.log(reportYearOptions);\n  return (\n    <Formik\n      initialValues={{\n        reportYear: '2020',\n        reportMonth: '01',\n      }}\n      onSubmit={onSubmit}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            <Grid>\n              <Grid.Column width={4}>\n                <SelectField\n                  label='Select month'\n                  name='reportMonth'\n                  options={reportMonthOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={4}>\n                <SelectField\n                  label='Select month'\n                  name='reportYear'\n                  options={reportYearOptions}\n                />\n              </Grid.Column>\n              <Grid.Column width={4}>\n                <Button type='submit' floated='right' color='green'>\n                  Get reports\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ReportPeriodSelectionForm;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Table, Icon, Confirm, Responsive } from 'semantic-ui-react';\nimport moment from 'moment';\nimport { deleteReport } from '../../store/reportList/actions';\nimport { setNotification } from '../../store/notification/actions';\nimport { Report } from '../../store/reportList/types';\n\ninterface Props {\n  loginLevel: number | undefined;\n  report: Report;\n}\n\nconst ReportListItem: React.FC<Props> = ({ loginLevel, report }) => {\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n  const cancelDelete = () => {\n    setOpen(false);\n  };\n  const confirmDelete = () => {\n    setOpen(false);\n    dispatch(deleteReport(report.id));\n    dispatch(\n      setNotification(\n        `${report.name} ${report.program_date} poistettu!`,\n        'success'\n      )\n    );\n  };\n  let reportStatusOutPrint;\n  let className;\n\n  if (report.status === 1) {\n    reportStatusOutPrint = 'Ready';\n  } else if (report.status === 0) {\n    reportStatusOutPrint = 'In progress';\n  } else if (report.status === 9) {\n    reportStatusOutPrint = 'Deleted';\n    return null;\n  }\n  if (report.rerun === 1) {\n    className = 'rerun';\n  }\n\n  if (loginLevel === 1 && report.rerun === 1) {\n    return null;\n  }\n\n  return (\n    <React.Fragment>\n      <Table.Row className={className}>\n        <Responsive as={Table.Cell} minWidth={768}>\n          {report.program_no}\n        </Responsive>\n        <Table.Cell>\n          <Link className={className} to={`reports/${report.id}`}>\n            {report.name}\n          </Link>\n        </Table.Cell>\n        <Table.Cell>\n          {moment(report.program_date).format('DD.MM.YYYY')}\n        </Table.Cell>\n        <Table.Cell>\n          {report.program_start_time.slice(0, -3)} -{' '}\n          {report.program_end_time.slice(0, -3)}\n        </Table.Cell>\n        <Table.Cell>{reportStatusOutPrint}</Table.Cell>\n        <Table.Cell>\n          <Icon\n            style={{ color: 'red' }}\n            name='delete'\n            onClick={() => setOpen(true)}\n          />\n          <Confirm\n            content={`Haluatko varmasti poistaa raportin ${report.name} ${report.program_date}`}\n            open={open}\n            onCancel={cancelDelete}\n            onConfirm={confirmDelete}\n          />\n        </Table.Cell>\n      </Table.Row>\n    </React.Fragment>\n  );\n};\n\nexport default ReportListItem;\n","/* eslint-disable indent */\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Container,\n  Table,\n  Dimmer,\n  Loader,\n  Responsive,\n} from 'semantic-ui-react';\nimport moment from 'moment';\nimport { ApplicationState } from '../../store/types';\nimport ReportPeriodSelectionForm from './ReportPeriodSelectionForm';\nimport ReportListItem from './ReportListItem';\nimport { ReportListSelectionDate } from '../../store/reportList/types';\nimport {\n  getAllReportsByDate,\n  getAllReportsByDateByUser,\n} from '../../store/reportList/actions';\n\nconst ReportList = () => {\n  const login = useSelector((state: ApplicationState) => state.login);\n  const reportList = useSelector((state: ApplicationState) => state.reportList);\n  console.log(reportList);\n\n  const dispatch = useDispatch();\n  // initial reports list\n  useEffect(() => {\n    if (login.currentUser?.level === 1) {\n      if (reportList.reportListDate === null) {\n        dispatch(\n          getAllReportsByDateByUser(\n            moment().format('YYYY-MM'),\n            login.currentUser.id\n          )\n        );\n      } else {\n        dispatch(\n          getAllReportsByDateByUser(\n            reportList.reportListDate,\n            login.currentUser.id\n          )\n        );\n      }\n    } else if (reportList.reportListDate === null) {\n      dispatch(getAllReportsByDate(moment().format('YYYY-MM')));\n    } else {\n      dispatch(getAllReportsByDate(reportList.reportListDate));\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  const onSubmit = (values: ReportListSelectionDate) => {\n    console.log(values);\n    const date = `${values.reportYear}-${values.reportMonth}`;\n\n    if (login.currentUser?.level === 1) {\n      dispatch(getAllReportsByDateByUser(date, login.currentUser.id));\n    } else {\n      dispatch(getAllReportsByDate(date));\n    }\n  };\n\n  if (reportList.reportList === null || reportList.loading) {\n    return (\n      <Dimmer active>\n        <Loader content='Ladataan...' />\n      </Dimmer>\n    );\n  }\n\n  if (reportList.reportList.length === 0) {\n    return (\n      <Container>\n        <h2>No reports in the selected time period</h2>\n        <ReportPeriodSelectionForm onSubmit={onSubmit} />\n      </Container>\n    );\n  }\n\n  let reportListTimeDate;\n  if (reportList.reportListDate === null) {\n    reportListTimeDate = moment().format('MMMM YYYY');\n  } else {\n    reportListTimeDate = moment(reportList.reportListDate).format('MMMM YYYY');\n  }\n\n  let reportsToShow = reportList.reportList;\n\n  reportsToShow =\n    Number(reportList.filterByText) === 0\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter((report) =>\n          report.name\n            .toLowerCase()\n            .includes(reportList.filterByText.toLowerCase())\n        ));\n  reportsToShow =\n    reportList.filterUserValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          (report) => report.user_id === reportList.filterUserValue\n        ));\n  reportsToShow =\n    reportList.filterStatusValue === null\n      ? reportsToShow\n      : (reportsToShow = reportsToShow.filter(\n          (report) => report.status === reportList.filterStatusValue\n        ));\n\n  return (\n    <Container>\n      {/* <ReportFilterForm /> */}\n      <h3>Reports {reportListTimeDate}</h3>\n      <ReportPeriodSelectionForm onSubmit={onSubmit} />\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Responsive as={Table.Cell} minWidth={768}>\n              Program number\n            </Responsive>\n            <Table.Cell>Program name</Table.Cell>\n            <Table.Cell>Date</Table.Cell>\n            <Table.Cell>Time</Table.Cell>\n            <Table.Cell>Status</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {reportsToShow.map((r) => (\n            <ReportListItem\n              key={r.id}\n              report={r}\n              loginLevel={login.currentUser?.level}\n            />\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  );\n};\n\nexport default ReportList;\n","import React from 'react';\nimport { Table, Icon, Checkbox } from 'semantic-ui-react';\nimport { ReportItem } from '../../../store/report/types';\n\ninterface Props {\n  track: ReportItem;\n}\n\nconst ReportTrackListItem: React.FC<Props> = ({ track }) => {\n  let minutes: any;\n  let seconds: number | string;\n  minutes = Math.floor(track.length / 60);\n  minutes = minutes.toString();\n  seconds = track.length - minutes * 60;\n  if (seconds.toString().length === 1) {\n    seconds = `0${seconds.toString()}`;\n  }\n  seconds = seconds.toString();\n  return (\n    <Table.Row>\n      <Table.Cell>\n        {/* <Checkbox onChange={checkedClick} checked={checked} /> */}\n        <Icon\n          style={{ marginLeft: '1.5rem', cursor: 'pointer' }}\n          name='arrows alternate'\n        />\n      </Table.Cell>\n      <Table.Cell>{track.sortable_rank}</Table.Cell>\n      <Table.Cell>{track.artist_name}</Table.Cell>\n      <Table.Cell>{track.track_title}</Table.Cell>\n      <Table.Cell>\n        {minutes}:{seconds}\n      </Table.Cell>\n      <Table.Cell>\n        <Icon\n          style={{ cursor: 'pointer' }}\n          color='red'\n          // onClick={onDelete}\n          name='delete'\n        />\n      </Table.Cell>\n      <Table.Cell>\n        {/* <EditTrackModal\n          id={track.track_id}\n          sortable_rank={track.sortable_rank}\n          report_track_id={track.report_track_id}\n          track={track}\n        /> */}\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default ReportTrackListItem;\n","import React from 'react';\nimport {\n  Container,\n  Table,\n  Dimmer,\n  Loader,\n  Button,\n  Header,\n} from 'semantic-ui-react';\nimport ReportTrackListItem from './ReportTrackListItem';\nimport { ReportItem } from '../../../store/report/types';\n\ninterface Props {\n  report: Array<ReportItem>;\n}\n\nconst ReportTrackList: React.FC<Props> = ({ report }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell></Table.Cell>\n          <Table.Cell>#</Table.Cell>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Track Title</Table.Cell>\n          <Table.Cell>Length</Table.Cell>\n          <Table.Cell></Table.Cell>\n          <Table.Cell></Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {report.map((track) => (\n          <ReportTrackListItem key={track.report_track_id} track={track} />\n        ))}\n      </Table.Body>\n      <Table.Footer>\n        <Table.Row></Table.Row>\n      </Table.Footer>\n    </Table>\n  );\n};\n\nexport default ReportTrackList;\n","import React from 'react';\nimport { Segment, Header } from 'semantic-ui-react';\n\nconst AddTracksToReport: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Header>Add a track to the report:</Header>\n      <Segment.Group horizontal>\n        <Segment>\n          {/* <SearchTrack /> */}\n          get quick search tracks\n        </Segment>\n        <Segment>\n          {/* <GetDjOnlineTracks /> */}\n          get djonline tracks\n        </Segment>\n      </Segment.Group>\n    </React.Fragment>\n  );\n};\n\nexport default AddTracksToReport;\n","import React from 'react';\n\n// import { ReportDetails } from '../../../store/report/types';\n\n// interface Props {\n//   reportDetails: ReportDetails | null;\n// }\n\nconst ReportDetailsIndex: React.FC = () => {\n  // console.log(reportDetails);\n  return <div>report details</div>;\n};\n\nexport default ReportDetailsIndex;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Header, Container, Grid, Popup, Icon } from 'semantic-ui-react';\nimport { getOneReport, getReportDetails } from '../../store/report/actions';\n\nimport ReportTrackList from './ReportWithTracks/ReportTrackList';\nimport AddTracksToReport from './AddTracksToReport';\nimport ReportDetailsIndex from './ReportDetails';\n\nimport { ApplicationState } from '../../store/types';\n\ninterface Props {\n  id: number;\n}\n\nconst ReportTrackIndex: React.FC<Props> = ({ id }) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getOneReport(id));\n    dispatch(getReportDetails(id));\n    // eslint-disable-next-line\n  }, []);\n  console.log(id);\n  const report = useSelector((state: ApplicationState) => state.report);\n  const login = useSelector((state: ApplicationState) => state.login);\n  console.log(report);\n  if (\n    login.currentUser?.level === 1 &&\n    login.currentUser.id !== report.reportDetails?.user_id\n  ) {\n    return null;\n  }\n  if (report.report.length === 0) {\n    return (\n      <Container>\n        <Header>Report</Header>\n        <div>No tracks added. Please add tracks from below</div>\n        <AddTracksToReport />\n        <ReportDetailsIndex />\n      </Container>\n    );\n  }\n  return (\n    <Container>\n      <Header>Report</Header>\n      <ReportTrackList report={report.report} />\n      <AddTracksToReport />\n      <ReportDetailsIndex />\n    </Container>\n  );\n};\n\nexport default ReportTrackIndex;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { SelectField, TextField } from '../layout/forms/FormFields';\nimport { Button, Grid } from 'semantic-ui-react';\n// import AddTrackBtn from './AddTrackBtn';\nimport { advancedSearch } from '../../store/search/actions';\nimport { AdvancedSearchParamsType } from '../../store/search/types';\n\ninterface Props {\n  onSubmit: (values: AdvancedSearchParamsType) => void;\n}\n\nconst SearchForm = () => {\n  const dispatch = useDispatch();\n\n  const searchTargetOptions = [\n    {\n      key: 1,\n      label: 'Tracks',\n      value: 'tr',\n    },\n    {\n      key: 2,\n      label: 'Artists',\n      value: 'ar',\n    },\n    {\n      key: 3,\n      label: 'Albums',\n      value: 'al',\n    },\n  ];\n\n  const handleSearch = (values: AdvancedSearchParamsType) => {\n    dispatch(advancedSearch(values));\n  };\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Formik\n          initialValues={{\n            query: '',\n            kind: 'ar',\n          }}\n          onSubmit={handleSearch}\n        >\n          {() => {\n            return (\n              <Form className='form ui'>\n                <Grid>\n                  <Grid.Column width={8}>\n                    <Field\n                      label='Search query'\n                      placeholder='Artist, album, track...'\n                      name='query'\n                      component={TextField}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <SelectField\n                      label='Search for'\n                      name='kind'\n                      options={searchTargetOptions}\n                    />\n                  </Grid.Column>\n                  <Grid.Column width={8}>\n                    <Button type='submit'>Search</Button>\n                  </Grid.Column>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n      <Grid.Column>\n        <span style={{ float: 'right' }}>\n          {/* <AddTrackBtn /> */}\n          <Button>Add a track</Button>\n        </span>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SearchForm;\n","import { Dispatch } from 'redux';\nimport searchService from './services';\nimport {\n  AUTOCOMPLETE_RESULTS,\n  SET_SEARCH_LOADING,\n  TOP_100,\n  GET_DISCOGS_DATA,\n  CLEAR_DISCOGS_DATA,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_CHANGE_ALBUM_OPTIONS,\n  GET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ARTIST_OPTIONS,\n  RESET_CHANGE_ALBUM_OPTIONS,\n  AdvancedSearchQueryType,\n  DiscogsQueryType,\n  DiscogsDataType,\n  Top100QueryType,\n} from './types';\n\nexport const getAutocompleteResults = (query: string) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.getTracksForAutocompleteSearch(query);\n    dispatch({\n      type: AUTOCOMPLETE_RESULTS,\n      data: results,\n    });\n  } catch (error) {\n    console.log('searchActions error getting autocomplete results', error);\n  }\n};\n\nexport const advancedSearch = (searchParams: AdvancedSearchQueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.advancedSearch(searchParams);\n    dispatch({\n      type: ADVANCED_RESULTS,\n      data: results,\n    });\n  } catch (error) {\n    console.log('searchActions error getting advanced results', error);\n  }\n};\n\nexport const sortAdvancedResults = (sortBy: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SORT_ADVANCED_RESULTS,\n      data: sortBy,\n    });\n  } catch (error) {\n    console.log('searchActions error sorting advanced results', error);\n  }\n};\n\nexport const getCatIdFromDiscogs = (query: DiscogsQueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    let catId: string = '';\n    let year: string = '';\n    let label: string = '';\n    const results = await searchService.getDiscogsData(query);\n\n    console.log(results.results.length);\n    if (results.results.length === 0) {\n      catId = 'EI ILMOITETTU';\n    } else if (results.results[0].catno !== 'none') {\n      console.log(results.results[0]);\n\n      catId = results.results[0].catno;\n    } else if (results.results[1].catno !== 'none') {\n      console.log(results.results[1]);\n\n      catId = results.results[1].catno;\n    } else if (results.results[2].catno !== 'none') {\n      console.log(results.results[2]);\n\n      catId = results.results[2].catno;\n    } else if (results.results[3].catno !== 'none') {\n      console.log(results.results[3]);\n\n      catId = results.results[3].catno;\n    } else if (results.results[4].catno !== 'none') {\n      console.log(results.results[4]);\n\n      catId = results.results[4].catno;\n    } else {\n      catId = 'EI ILMOITETTU';\n    }\n    const discogsData: DiscogsDataType = {\n      cat_id: catId,\n      year,\n      label,\n    };\n    console.log(catId);\n    dispatch({\n      type: GET_DISCOGS_DATA,\n      data: discogsData,\n    });\n  } catch (error) {\n    console.log('searchActions error getting discogs data', error);\n  }\n};\n\nexport const clearDiscogsCatId = () => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: CLEAR_DISCOGS_DATA,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getTop100 = (query: Top100QueryType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_SEARCH_LOADING,\n    });\n    const results = await searchService.getTop100(query);\n    dispatch({\n      type: TOP_100,\n      data: results,\n      query,\n    });\n  } catch (error) {\n    console.log('searchActions error getting top100 results', error);\n  }\n};\n","export const AUTOCOMPLETE_RESULTS = 'AUTOCOMPLETE_RESULTS';\nexport const ADVANCED_RESULTS = 'ADVANCED_RESULTS';\nexport const SORT_ADVANCED_RESULTS = 'SORT_ADVANCED_RESULTS';\nexport const GET_DISCOGS_DATA = 'GET_DISCOGS_DATA';\nexport const CLEAR_DISCOGS_DATA = 'CLEAR_DISCOGS_DATA';\nexport const TOP_100 = 'TOP_100';\nexport const SET_SEARCH_LOADING = 'SET_SEARCH_LOADING';\nexport const GET_CHANGE_ALBUM_OPTIONS = 'GET_CHANGE_ALBUM_OPTIONS';\nexport const GET_CHANGE_ARTIST_OPTIONS = 'GET_CHANGE_ARTIST_OPTIONS';\nexport const RESET_CHANGE_ALBUM_OPTIONS = 'RESET_CHANGE_ALBUM_OPTIONS';\nexport const RESET_CHANGE_ARTIST_OPTIONS = 'RESET_CHANGE_ARTIST_OPTIONS';\nexport const MERGE_ALBUMS = 'MERGE_ALBUMS';\nexport const MERGE_ARTISTS = 'MERGE_ARTISTS';\nexport const MERGE_TRACKS = 'MERGE_TRACKS';\n\nexport interface AdvancedResultsType {\n  artist_name: string;\n  artist_id: number;\n  album_name: string;\n  album_id: number;\n  track_title: string;\n  track_id: number;\n  length: number;\n  program_date: string;\n  report_id: number;\n}\n\nexport interface AdvancedSearchQueryType {\n  kind: string;\n  query: string;\n}\n\nexport interface Top100Type {\n  count: number;\n  track_id: number;\n  track_title: string;\n  album: string;\n  artist: string;\n  album_id: number;\n  artist_id: number;\n}\n\nexport interface Top100QueryType {\n  list: string;\n  start_date: string;\n  end_date: string;\n}\n\nexport type SortAdvancedResultsType = number | null;\n\nexport interface DiscogsDataType {\n  year: string;\n  cat_id: string;\n  label: string;\n}\n\nexport interface DiscogsQueryType {\n  album: string;\n  artist: string;\n}\n\nexport interface MergeParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n}\n\nexport interface MergeTrackParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n  newName: string;\n}\n\nexport interface MergeArtistsParamsType {\n  type: string;\n  mergeTo: number;\n  merge: number;\n  newName: string;\n}\n\nexport interface AdvancedSearchParamsType {\n  query: string;\n  kind: string;\n}\n\nexport interface SearchState {\n  top100: Array<Top100Type>;\n  top100Query: Top100QueryType | null;\n  advancedResults: Array<AdvancedResultsType>;\n  sortAdvancedResults: number | null;\n  loading: boolean;\n  discogsData: DiscogsDataType | null;\n}\n\n// search action types\ninterface AdvancedResultsAction {\n  type: typeof ADVANCED_RESULTS;\n  data: Array<AdvancedResultsType>;\n}\n\ninterface Top100Action {\n  type: typeof TOP_100;\n  data: Array<Top100Type>;\n  query: Top100QueryType;\n}\n\ninterface SortAdvancedResultsAction {\n  type: typeof SORT_ADVANCED_RESULTS;\n  data: SortAdvancedResultsType;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_SEARCH_LOADING;\n}\n\ninterface GetDiscogsDataAction {\n  type: typeof GET_DISCOGS_DATA;\n  data: DiscogsDataType;\n}\n\ninterface ClearDiscogsDataAction {\n  type: typeof CLEAR_DISCOGS_DATA;\n}\n\ninterface MergeTracksAction {\n  type: typeof MERGE_TRACKS;\n  data: MergeTrackParamsType;\n}\n\ninterface MergeArtistsAction {\n  type: typeof MERGE_ARTISTS;\n  data: MergeArtistsParamsType;\n}\n\nexport type SearchActionTypes =\n  | AdvancedResultsAction\n  | Top100Action\n  | SortAdvancedResultsAction\n  | SetLoadingAction\n  | GetDiscogsDataAction\n  | ClearDiscogsDataAction\n  | MergeTracksAction\n  | MergeArtistsAction;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n// import MergeArtists from './MergeArtists';\n// import MergeAlbums from './MergeAlbums';\n// import MergeTracks from './MergeTracks';\n// import AddToCurrentReport from '../track/AddToCurrentReport';\n\nimport { AdvancedResultsType } from '../../store/search/types';\n\ninterface Props {\n  result: AdvancedResultsType;\n}\n\nconst SearchResultItem: React.FC<Props> = ({ result }) => {\n  if (result === null) {\n    return null;\n  }\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <Link to={`../artist/${result.artist_id}`}>{result.artist_name}</Link>\n        {/* <MergeArtists\n          artist_id={result.artist_id}\n          artist_name={result.artist_name}\n        /> */}\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../album/${result.album_id}`}>{result.album_name}</Link>\n        {/* <MergeAlbums\n          album_id={result.album_id}\n          album_name={result.album_name}\n        /> */}\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../track/${result.track_id}`}>{result.track_title}</Link>\n        {/* <MergeTracks\n          track_id={result.track_id}\n          track_title={result.track_title}\n        /> */}\n      </Table.Cell>\n      <Table.Cell>\n        <Link to={`../reports/${result.report_id}`}>{result.program_date}</Link>\n      </Table.Cell>\n      <Table.Cell>\n        {/* <AddToCurrentReport\n          track_title={result.track_title}\n          track_id={result.track_id}\n          length={result.length}\n        /> */}\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default SearchResultItem;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { SelectField } from '../layout/forms/FormFields';\nimport { Grid } from 'semantic-ui-react';\nimport { sortAdvancedResults } from '../../store/search/actions';\n\ninterface SortByType {\n  sortBy: number;\n}\n\nconst SortResults = () => {\n  const dispatch = useDispatch();\n  const [sortBy, setSortBy] = useState(1);\n\n  useEffect(() => {\n    dispatch(sortAdvancedResults(sortBy));\n    // eslint-disable-next-line\n  }, [sortBy]);\n\n  const onChange = (values: SortByType) => {\n    setSortBy(values.sortBy);\n  };\n\n  const sortOptions = [\n    {\n      key: 1,\n      label: 'Track title',\n      value: 1,\n    },\n    {\n      key: 2,\n      label: 'Artist name',\n      value: 2,\n    },\n  ];\n\n  return (\n    <Grid columns={4}>\n      <Grid.Column>\n        <Formik\n          initialValues={{\n            sortBy: 1,\n          }}\n          onSubmit={onChange}\n          validate={(values) => {\n            setSortBy(Number(values.sortBy));\n          }}\n        >\n          {() => {\n            return (\n              <Form className='form ui'>\n                <SelectField\n                  label='Sort by'\n                  name='sortBy'\n                  options={sortOptions}\n                />\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default SortResults;\n","/* eslint-disable indent */\n/* eslint-disable no-nested-ternary */\nimport React from 'react';\nimport { Table, Loader, Dimmer } from 'semantic-ui-react';\nimport SearchResultItem from './SearchResultItem';\nimport SortResults from './SortResults';\n\nimport { SearchState } from '../../store/search/types';\n\ninterface Props {\n  search: SearchState;\n}\n\nconst SearchResults: React.FC<Props> = ({ search }) => {\n  if (search.advancedResults.length === 0) {\n    return <div>no results. please enter a query</div>;\n  }\n  if (search.loading === true) {\n    return (\n      <Dimmer active>\n        <Loader>Loading results...</Loader>\n      </Dimmer>\n    );\n  }\n  let resultsToShow = search.advancedResults;\n\n  resultsToShow =\n    search.sortAdvancedResults === 2\n      ? resultsToShow\n      : resultsToShow.sort((a, b) =>\n          a.track_title > b.track_title\n            ? 1\n            : b.track_title > a.track_title\n            ? -1\n            : 0\n        );\n\n  resultsToShow =\n    search.sortAdvancedResults === 1\n      ? resultsToShow\n      : resultsToShow.sort((a, b) =>\n          a.artist_name > b.artist_name\n            ? 1\n            : b.artist_name > a.artist_name\n            ? -1\n            : 0\n        );\n\n  return (\n    <div style={{ marginTop: '2rem' }}>\n      <SortResults />\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Artist</Table.Cell>\n            <Table.Cell>Album</Table.Cell>\n            <Table.Cell>Track</Table.Cell>\n            <Table.Cell>Latest play on</Table.Cell>\n            <Table.Cell></Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {resultsToShow.map((result) => (\n            <SearchResultItem key={result.track_id} result={result} />\n          ))}\n        </Table.Body>\n      </Table>\n    </div>\n  );\n};\n\nexport default SearchResults;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Container, Header } from 'semantic-ui-react';\nimport SearchForm from './SearchForm';\nimport SearchResults from './SearchResults';\n\nimport { ApplicationState } from '../../store/types';\n\nconst Search: React.FC = () => {\n  const search = useSelector((state: ApplicationState) => state.search);\n\n  return (\n    <Container>\n      <Header>Search</Header>\n      <SearchForm />\n      <SearchResults search={search} />\n    </Container>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport { Button, Grid } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\nimport { Datepicker, Select } from 'react-formik-ui';\nimport { Top100QueryType } from '../../store/search/types';\nimport moment from 'moment';\n\nconst listOptions = [\n  {\n    key: 1,\n    value: 'artist_id',\n    label: 'Artists',\n  },\n  {\n    key: 2,\n    value: 'track_id',\n    label: 'Tracks',\n  },\n  {\n    key: 3,\n    value: 'album_id',\n    label: 'Albums',\n  },\n];\n\ninterface Props {\n  onSubmit: (values: Top100QueryType) => void;\n}\n\nconst Top100SearchForm: React.FC<Props> = ({ onSubmit }) => {\n  return (\n    <Formik\n      initialValues={{\n        list: 'artist_id',\n        start_date: moment(Date.now() - 7 * 24 * 3600 * 1000).format(\n          'YYYY-MM-DD'\n        ),\n        end_date: moment(new Date()).format('YYYY-MM-DD'),\n      }}\n      onSubmit={onSubmit}\n    >\n      {() => {\n        return (\n          <Form className='form ui'>\n            {/* <SelectField label='Get' name='list' options={listOptions} />{' '} */}\n            <Grid>\n              <Grid.Column width={2}>\n                <Select name='list' label='Get Top 100' options={listOptions} />\n              </Grid.Column>\n            </Grid>\n            <label>starting</label>\n            <Datepicker\n              name='start_date'\n              dateFormat='dd.MM.yyyy'\n              placeholder='dd.mm.yyyy'\n            />{' '}\n            <label>ending</label>\n            <Datepicker\n              name='end_date'\n              dateFormat='dd.MM.yyyy'\n              placeholder='dd.mm.yyyy'\n            />{' '}\n            <Button type='submit' color='green'>\n              Submit\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Top100SearchForm;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Album</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport { Top100Type } from '../../store/search/types';\n\ninterface Props {\n  top100: Array<Top100Type>;\n}\n\nconst Top100ArtistList: React.FC<Props> = ({ top100 }) => {\n  return (\n    <Table striped>\n      <Table.Header>\n        <Table.Row>\n          <Table.Cell>Artist</Table.Cell>\n          <Table.Cell>Album</Table.Cell>\n          <Table.Cell>Track</Table.Cell>\n          <Table.Cell>Play count</Table.Cell>\n          <Table.Cell></Table.Cell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {top100.map((t) => (\n          <Table.Row key={t.track_id}>\n            <Table.Cell>\n              <Link to={`/artist/${t.artist_id}`}>{t.artist}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/album/${t.album_id}`}>{t.album}</Link>\n            </Table.Cell>\n            <Table.Cell>\n              <Link to={`/track/${t.track_id}`}>{t.track_title}</Link>\n            </Table.Cell>\n            <Table.Cell>{t.count}</Table.Cell>\n            <Table.Cell>\n              {/* <AddToCurrentReport\n                    track_title={t.track_title}\n                    track_id={t.track_id}\n                    length={t.length}\n                  /> */}\n            </Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  );\n};\n\nexport default Top100ArtistList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container } from 'semantic-ui-react';\nimport { ApplicationState } from '../../store/types';\nimport { Top100QueryType } from '../../store/search/types';\nimport { getTop100 } from '../../store/search/actions';\nimport moment from 'moment';\n\nimport Top100SearchForm from './Top100SearchForm';\nimport Top100ArtistList from './Top100ArtistList';\nimport Top100AlbumList from './Top100AlbumList';\nimport Top100TrackList from './Top100TrackList';\n\nconst Top100: React.FC = () => {\n  const search = useSelector((state: ApplicationState) => state.search);\n  const dispatch = useDispatch();\n\n  const getTop100Results = (values: Top100QueryType) => {\n    console.log(values);\n    const top100Values = {\n      ...values,\n      end_date: moment(new Date()).format('YYYY-MM-DD'),\n    };\n    console.log(top100Values);\n    dispatch(getTop100(top100Values));\n  };\n  console.log(search);\n  if (search.top100Query === null) {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n      </Container>\n    );\n  }\n  if (search.loading) {\n    return (\n      <Container>\n        <h1>Top 100</h1>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <div>Loading</div>\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'artist_id') {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100ArtistList top100={search.top100} />\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'album_id') {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100AlbumList top100={search.top100} />\n      </Container>\n    );\n  }\n  if (search.top100Query.list === 'track_id') {\n    return (\n      <Container>\n        <h3 style={{ display: 'inline' }}>Top 100</h3>\n        <p>\n          Get the top 100 most played tracks, albums or artists within a time\n          period.\n        </p>\n        <Top100SearchForm onSubmit={getTop100Results} />\n        <Top100TrackList top100={search.top100} />\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default Top100;\n","import React from 'react';\nimport { Button, Grid, Dimmer, Loader, Header } from 'semantic-ui-react';\nimport { Formik, Form, Field } from 'formik';\nimport { TextField, NumberField } from '../layout/forms/FormFields';\nimport { Track, UpdateTrackFormValuesType } from '../../store/track/types';\nimport { countryOptions, recordCountryOptions } from '../../constants';\n\ninterface Props {\n  currentTrack: Track;\n  onSubmit: (values: UpdateTrackFormValuesType) => void;\n}\n\nconst TrackDetailsForm: React.FC<Props> = ({ currentTrack, onSubmit }) => {\n  if (currentTrack === null) {\n    return (\n      <Dimmer>\n        <Loader>Loading track details...</Loader>\n      </Dimmer>\n    );\n  }\n  console.log('current track at track details form', currentTrack);\n  return (\n    <Grid columns={2}>\n      <Grid.Column>\n        <Header>Track details</Header>\n        <Formik\n          initialValues={{\n            artist: currentTrack.artist,\n            album: currentTrack.album,\n            track_title: currentTrack.track_title,\n            track_id: currentTrack.track_id,\n            length: currentTrack.length,\n            minutes: Math.floor(currentTrack.length / 60),\n            seconds: currentTrack.length % 60,\n            country: currentTrack.country,\n            record_country: currentTrack.record_country,\n            people: currentTrack.people,\n            disc_no: currentTrack.disc_no,\n            track_no: currentTrack.track_no,\n            year: Number(currentTrack.year?.substring(0, 4)) || '',\n            label: currentTrack.label,\n            cat_id: currentTrack.cat_id,\n            isrc: currentTrack.isrc,\n            comment: currentTrack.comment,\n            user_id: null,\n            artist_id: currentTrack.artist_id,\n            album_id: currentTrack.album_id,\n            sortable_rank: null,\n            report_track_id: null,\n          }}\n          onSubmit={onSubmit}\n          validate={(values) => {\n            console.log(values);\n            const requiredError = 'Album name is required';\n            const errors: { [field: string]: string } = {};\n            if (!values.track_title) {\n              errors.name = requiredError;\n            }\n            return errors;\n          }}\n        >\n          {({ isValid }) => {\n            return (\n              <Form className='form ui'>\n                <Field\n                  label='Artist'\n                  placeholder='Artist'\n                  name='artist'\n                  component={TextField}\n                />\n                <Field\n                  label='Album'\n                  placeholder='Album'\n                  name='album'\n                  component={TextField}\n                />\n                <Field\n                  label='Track title'\n                  placeholder='Track title...'\n                  name='track_title'\n                  component={TextField}\n                />\n                <Field\n                  label='Minutes'\n                  name='minutes'\n                  component={NumberField}\n                  min={0}\n                  max={999}\n                />\n                <Field\n                  label='Seconds'\n                  name='seconds'\n                  component={NumberField}\n                  min={0}\n                  max={59}\n                />\n                <Field\n                  label='Label'\n                  placeholder='Label...'\n                  name='label'\n                  component={TextField}\n                />\n                <Field\n                  label='Catalog ID'\n                  placeholder='Catalog ID...'\n                  name='cat_id'\n                  component={TextField}\n                />\n                <Field\n                  label='Year'\n                  name='year'\n                  component={NumberField}\n                  min={1900}\n                  max={2900}\n                />\n                <Field\n                  label='Spotify id'\n                  placeholder='Spotify id'\n                  name='spotify_id'\n                  component={TextField}\n                />\n                <Button\n                  type='submit'\n                  floated='left'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update track\n                </Button>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default TrackDetailsForm;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'semantic-ui-react';\n\nimport { PlayHistoryEntry } from '../../store/track/types';\n\ninterface Props {\n  pgm: PlayHistoryEntry;\n}\n\nconst PlayHistoryItem: React.FC<Props> = ({ pgm }) => {\n  return (\n    <Table.Row>\n      <Table.Cell>{pgm.program_date}</Table.Cell>\n      <Table.Cell>\n        <Link to={`/reports/${pgm.report_id}`}>{pgm.program_name}</Link>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default PlayHistoryItem;\n","import React from 'react';\nimport { Table, Dimmer, Loader } from 'semantic-ui-react';\nimport PlayHistoryItem from './PlayHistoryItem';\nimport { PlayHistoryEntry } from '../../store/track/types';\n\ninterface Props {\n  playHistory: Array<PlayHistoryEntry>;\n}\n\nconst PlayHistory: React.FC<Props> = ({ playHistory }) => {\n  if (playHistory.length === 0) {\n    return (\n      <Dimmer>\n        <Loader>Ladataan...</Loader>\n      </Dimmer>\n    );\n  }\n  if (playHistory[0].result === 'No plays yet') {\n    return (\n      <React.Fragment>\n        <h4>Soittohistoria</h4>\n        <p>Ei soittoja</p>\n      </React.Fragment>\n    );\n  }\n  return (\n    <React.Fragment>\n      <h4>Play history</h4>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Date</Table.Cell>\n            <Table.Cell>Program</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {playHistory.map((pgm) => (\n            <PlayHistoryItem key={pgm.report_id} pgm={pgm} />\n          ))}\n        </Table.Body>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default PlayHistory;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Dimmer, Loader } from 'semantic-ui-react';\nimport {\n  getOneTrack,\n  getOneTrackHistory,\n  updateTrack,\n} from '../../store/track/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nimport TrackDetailsForm from './TrackDetailsForm';\nimport PlayHistory from './PlayHistory';\n\nimport { ApplicationState } from '../../store/types';\nimport {\n  UpdateTrackType,\n  UpdateTrackFormValuesType,\n} from '../../store/track/types';\n\ninterface Props {\n  id: number;\n}\n\nconst Track: React.FC<Props> = ({ id }) => {\n  console.log(id);\n  const dispatch = useDispatch();\n  const track = useSelector((state: ApplicationState) => state.track);\n  const login = useSelector((state: ApplicationState) => state.login);\n  console.log(track);\n  console.log('track at track', track);\n  const report = useSelector((state: ApplicationState) => state.report);\n  console.log(report);\n  useEffect(() => {\n    dispatch(getOneTrack(id));\n    dispatch(getOneTrackHistory(id));\n    // eslint-disable-next-line\n  }, []);\n\n  if (track.currentTrack === null || track.playHistory.length === 0) {\n    return (\n      <Container>\n        <Dimmer>\n          <Loader>Ladataan...</Loader>\n        </Dimmer>\n      </Container>\n    );\n  }\n\n  const submitUpdateTrack = (values: UpdateTrackFormValuesType) => {\n    const trackToUpdate = {\n      artist_name: values.artist,\n      album_name: values.album,\n      track_title: values.track_title,\n      track_id: values.track_id,\n      length: values.minutes * 60 + values.seconds,\n      country: values.country,\n      record_country: values.record_country,\n      people: values.people,\n      disc_no: values.disc_no,\n      track_no: values.track_no,\n      year: values.year?.toString(),\n      label: values.label,\n      cat_id: values.cat_id,\n      isrc: values.isrc,\n      comment: values.comment,\n      user_id: login.currentUser?.id,\n      artist_id: values.artist_id,\n      album_id: values.album_id,\n      sortable_rank: null,\n      report_track_id: null,\n    };\n\n    console.log('track to update', trackToUpdate);\n    dispatch(updateTrack(trackToUpdate));\n    dispatch(\n      setNotification(`Track ${values.track_title} updated!`, 'success')\n    );\n  };\n\n  return (\n    <Container>\n      <TrackDetailsForm\n        onSubmit={submitUpdateTrack}\n        currentTrack={track.currentTrack}\n      />\n      <PlayHistory playHistory={track.playHistory} />\n    </Container>\n  );\n};\n\nexport default Track;\n","import { Dispatch } from 'redux';\nimport {\n  ADD_NEW_TRACK,\n  ADD_TRACK_TO_ALBUM,\n  UPDATE_TRACK,\n  SET_LOADING,\n  GET_ONE_TRACK,\n  GET_ONE_TRACK_HISTORY,\n  CLEAR_CURRENT_TRACK,\n  REMOVE_CURRENT_TRACK,\n  CHANGE_ALBUM,\n  CHANGE_ARTIST,\n  MERGE_TRACKS,\n  AddTrackToDbAndReportType,\n  AddTrackToDbType,\n  UpdateTrackType,\n  MergeTrackParamsType,\n  ChangeAlbumParams,\n  ChangeArtistParams,\n  // UpdateTrackFormValuesType,\n  // ADD_TRACK_TO_REPORT\n} from './types';\n\nimport trackService from './services';\nimport searchService from '../search/services';\n\n// add a new track and save it to current report\nexport const addNewTrack = (trackToAdd: AddTrackToDbAndReportType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const track = await trackService.addNewTrack(trackToAdd);\n    dispatch({\n      type: ADD_NEW_TRACK,\n      data: track,\n    });\n  } catch (error) {\n    console.log('trackActions addNewTrack error:', error);\n  }\n};\n\n// add a new track to db - not in a report\nexport const addTrackToDb = (trackToAdd: AddTrackToDbType) => async () => {\n  try {\n    await trackService.addTrackToDb(trackToAdd);\n  } catch (error) {\n    console.log('trackActions addTrackToDb error: ', error);\n  }\n};\n\nexport const addTrackToAlbum = (trackToAdd: AddTrackToDbType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    const track = await trackService.addTrackToAlbum(trackToAdd);\n    dispatch({\n      type: ADD_TRACK_TO_ALBUM,\n      data: track,\n    });\n  } catch (error) {\n    console.log('trackactions addTrackToAlbum error: ', error);\n  }\n};\n\nexport const addTrackToAlbumAndReport = (\n  trackToAdd: AddTrackToDbAndReportType\n) => async (dispatch: Dispatch) => {\n  try {\n    const track = await trackService.addTrackToAlbum(trackToAdd);\n    const trackToReport = {\n      track_id: track.track_id,\n      report_id: trackToAdd.report_id,\n      length: trackToAdd.length,\n      sortable_rank: trackToAdd.sortable_rank,\n    };\n    // const report = await reportService.addTrackToReport(trackToReport);\n    // const trackToReducer = {\n    //   ...report,\n    //   ...track\n    // };\n    // dispatch({\n    //   type: ADD_TRACK_TO_ALBUM,\n    //   data: track\n    // });\n    // dispatch({\n    //   type: ADD_TRACK_TO_REPORT,\n    //   data: trackToReducer\n    // });\n  } catch (error) {\n    console.log('trackActions addTrackToAlbumAndReport error: ', error);\n  }\n};\n\nexport const updateTrack = (trackToUpdate: UpdateTrackType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    console.log('track to update at action', trackToUpdate);\n    await trackService.updateTrack(trackToUpdate);\n    dispatch({\n      type: UPDATE_TRACK,\n      data: trackToUpdate,\n    });\n  } catch (error) {\n    console.log('trackActions updateTrack error: ', error);\n  }\n};\n\nexport const getOneTrack = (id: number) => async (dispatch: Dispatch) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const track = await trackService.getOneTrack(id);\n    dispatch({\n      type: GET_ONE_TRACK,\n      data: track,\n    });\n  } catch (error) {\n    console.log('trackActions getoneTrack error: ', error);\n  }\n};\n\nexport const getOneTrackHistory = (id: number) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: CLEAR_CURRENT_TRACK,\n    });\n    dispatch({\n      type: SET_LOADING,\n    });\n    const history = await trackService.getOneTrackHistory(id);\n    dispatch({\n      type: GET_ONE_TRACK_HISTORY,\n      data: history,\n    });\n  } catch (error) {\n    console.log('trackActions getOneTrackHistory error: ', error);\n  }\n};\n\nexport const removeCurrentTrack = () => async (dispatch: Dispatch) => {\n  dispatch({\n    type: REMOVE_CURRENT_TRACK,\n  });\n};\n\nexport const mergeTrackFunction = (mergeParams: MergeTrackParamsType) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const mergeAction = await searchService.merge(mergeParams);\n    console.log(mergeAction);\n    const track = await trackService.getOneTrack(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_TRACK,\n      data: track,\n    });\n    const history = await trackService.getOneTrackHistory(mergeParams.mergeTo);\n    dispatch({\n      type: GET_ONE_TRACK_HISTORY,\n      data: history,\n    });\n  } catch (error) {\n    console.log('trackActions mergeTracksFunction error:', error);\n  }\n};\n\nexport const changeAlbumId = (albumToUpdate: ChangeAlbumParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const updateAlbum = await trackService.updateAlbumId(albumToUpdate);\n    console.log(updateAlbum);\n    dispatch({\n      type: CHANGE_ALBUM,\n      data: albumToUpdate,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const changeArtistId = (artistToUpdate: ChangeArtistParams) => async (\n  dispatch: Dispatch\n) => {\n  try {\n    dispatch({\n      type: SET_LOADING,\n    });\n    const updateArtist = await trackService.updateArtistId(artistToUpdate);\n    console.log(updateArtist);\n    dispatch({\n      type: CHANGE_ARTIST,\n      data: artistToUpdate,\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const updateTrackState = (mergeParams: MergeTrackParamsType) => async (\n  dispatch: Dispatch\n) => {\n  dispatch({\n    type: MERGE_TRACKS,\n    data: mergeParams,\n  });\n};\n","export const GET_ONE_TRACK = 'GET_ONE_TRACK';\nexport const GET_ONE_TRACK_HISTORY = 'GET_ONE_TRACK_HISTORY';\nexport const CLEAR_CURRENT_TRACK = 'CLEAR_CURRENT_TRACK';\nexport const SET_LOADING = 'SET_LOADING';\nexport const CHANGE_ALBUM = 'CHANGE_ALBUM';\nexport const CHANGE_ARTIST = 'CHANGE_ARTIST';\nexport const ADD_NEW_TRACK = 'ADD_NEW_TRACK';\nexport const ADD_TRACK_TO_ALBUM = 'ADD_TRACK_TO_ALBUM';\nexport const UPDATE_TRACK = 'UPDATE_TRACK';\nexport const REMOVE_CURRENT_TRACK = 'REMOVE_CURRENT_TRACK';\nexport const MERGE_TRACKS = 'MERGE_TRACKS';\nexport const ADD_TRACK_TO_REPORT = 'ADD_TRACK_TO_REPORT';\n\nexport interface Track {\n  track_title: string;\n  artist: string;\n  album: string;\n  track_id: number;\n  album_id: number;\n  artist_id: number;\n  label: string | null;\n  cat_id: string | null;\n  length: number;\n  disc_no: number | null;\n  track_no: number | null;\n  people: string | null;\n  isrc: string | null;\n  year: string | null;\n  comment: string | null;\n  record_country: string | null;\n  country: number;\n}\n\nexport interface AddTrackToDbType {\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string;\n  cat_id: string;\n  year: string | number;\n  disc_no: number;\n  track_no: number;\n  length: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n}\n\nexport interface UpdateTrackType {\n  artist_name: string;\n  album_name: string;\n  track_title: string;\n  track_id: number;\n  length: number;\n  country: number;\n  record_country: string | null;\n  people: string | null;\n  disc_no: number | null;\n  track_no: number | null;\n  year: string | number | null | undefined;\n  label: string | null;\n  cat_id: string | null;\n  isrc: string | null;\n  comment: string | null;\n  user_id: number | null | undefined;\n  artist_id: number;\n  album_id: number;\n  sortable_rank: number | null;\n  report_track_id: number | null;\n}\n\nexport interface UpdateTrackFormValuesType {\n  track_title: string;\n  artist: string;\n  album: string;\n  track_id: number;\n  album_id: number;\n  artist_id: number;\n  label: string | null;\n  cat_id: string | null;\n  length: number;\n  minutes: number;\n  seconds: number;\n  disc_no: number | null;\n  track_no: number | null;\n  people: string | null;\n  isrc: string | null;\n  year: string | number | null | undefined;\n  comment: string | null;\n  record_country: string | null;\n  country: number;\n  user_id: number | null | undefined;\n  sortable_rank: number | null;\n  report_track_id: number | null;\n}\n\nexport interface AddTrackToDbAndReportType {\n  track_title: string;\n  artist_name: string;\n  album_name: string;\n  label: string;\n  cat_id: string;\n  year: string;\n  disc_no: number;\n  track_no: number;\n  length: number;\n  country: number;\n  record_country: string;\n  people: string | null;\n  comment: string | null;\n  isrc: string | null;\n  report_id: number;\n  sortable_rank: number;\n}\n\nexport interface ChangeAlbumParams {\n  track_id: number;\n  album_id: number;\n  album_name: string;\n}\n\nexport interface ChangeArtistParams {\n  track_id: number;\n  artist_id: number;\n  artist_name: string;\n}\n\nexport interface PlayHistoryEntry {\n  program_name: string;\n  program_id: number;\n  report_id: number;\n  program_date: string;\n  track_id: number;\n  result?: string | null | undefined;\n}\n\nexport interface ChangeArtist {\n  artist_id: number;\n  artist: string;\n}\n\nexport interface ChangeAlbum {\n  album_id: number;\n  album_name: string;\n}\n\nexport interface MergeTrackParamsType {\n  type: string;\n  merge: number;\n  mergeTo: number;\n  newName: string;\n}\n\nexport interface TrackState {\n  currentTrack: Track | null;\n  playHistory: Array<PlayHistoryEntry>;\n  loading: boolean;\n}\n\n// track action types\ninterface GetOneTrackAction {\n  type: typeof GET_ONE_TRACK;\n  data: Track;\n}\n\ninterface UpdateTrackAction {\n  type: typeof UPDATE_TRACK;\n  data: Track;\n}\n\ninterface GetOneTrackHistoryAction {\n  type: typeof GET_ONE_TRACK_HISTORY;\n  data: Array<PlayHistoryEntry>;\n}\n\ninterface ClearCurrentTrackAction {\n  type: typeof CLEAR_CURRENT_TRACK;\n}\n\ninterface SetLoadingAction {\n  type: typeof SET_LOADING;\n}\n\ninterface ChangeAlbumAction {\n  type: typeof CHANGE_ALBUM;\n  data: ChangeAlbum;\n}\n\ninterface ChangeArtistAction {\n  type: typeof CHANGE_ARTIST;\n  data: ChangeArtist;\n}\n\nexport type TrackActionTypes =\n  | GetOneTrackAction\n  | GetOneTrackHistoryAction\n  | ClearCurrentTrackAction\n  | SetLoadingAction\n  | ChangeAlbumAction\n  | ChangeArtistAction\n  | UpdateTrackAction;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\nimport {\n  TextField,\n  PasswordField,\n  SelectField,\n} from '../../layout/forms/FormFields';\n\nimport {\n  EditUserFormValues,\n  User,\n  UserLevelOptions,\n  UserLevel,\n} from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: EditUserFormValues) => void;\n  onCancel: () => void;\n  user: User;\n}\n\nconst levelOptions: UserLevelOptions[] = [\n  { value: UserLevel.DJ, label: 'DJ' },\n  { value: UserLevel.Staff, label: 'Staff' },\n  { value: UserLevel.Admin, label: 'Admin' },\n];\n\nconst statusOptions = [\n  { value: 1, label: 'Active' },\n  { value: 0, label: 'Inactive' },\n];\n\nconst EditUserForm: React.FC<Props> = ({ onSubmit, onCancel, user }) => {\n  return (\n    <Formik\n      initialValues={{\n        password: '',\n        confirm_password: '',\n        first_name: user.first_name,\n        last_name: user.last_name,\n        email: user.email,\n        level: user.level,\n        status: user.status,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Password - fill out field only if you wish to change the password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={PasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={TextField}\n              required\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={TextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={TextField}\n            />\n            <SelectField label='Level' name='level' options={levelOptions} />\n            <SelectField label='Status' name='status' options={statusOptions} />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!isValid}\n                >\n                  Update\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default EditUserForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport EditUserForm from './EditUserForm';\nimport { EditUserFormValues } from '../../../store/user/types';\nimport { User } from '../../../store/user/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EditUserFormValues) => void;\n  error?: string;\n  user: User;\n}\n\nconst EditUserModal = ({\n  modalOpen,\n  onClose,\n  onSubmit,\n  error,\n  user,\n}: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Edit info of user {user.username}</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <EditUserForm user={user} onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default EditUserModal;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Table, Icon, Confirm } from 'semantic-ui-react';\n\nimport { updateUser, deleteUser } from '../../store/user/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nimport EditUserModal from './EditUserModal';\n\nimport { EditUserFormValues } from '../../store/user/types';\nimport { User } from '../../store/user/types';\n\ninterface Props {\n  user: User;\n}\n\nconst UserListItem: React.FC<Props> = ({ user }) => {\n  const dispatch = useDispatch();\n  const [openDeleteUser, setDeleteUserOpen] = useState<boolean>(false);\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const cancelDelete = () => {\n    setDeleteUserOpen(false);\n  };\n  const confirmDelete = () => {\n    setDeleteUserOpen(false);\n    dispatch(deleteUser(user.id));\n    // setNotificationConnect(`Käyttäjä ${user.username} poistettu!`, 'success')\n  };\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitUpdatedUser = (values: EditUserFormValues) => {\n    try {\n      const userToUpdate = {\n        ...values,\n        id: user.id,\n      };\n      dispatch(updateUser(userToUpdate));\n      dispatch(\n        setNotification(\n          `${userToUpdate.first_name} ${userToUpdate.last_name} updated!`,\n          'success'\n        )\n      );\n      console.log('updating user', userToUpdate);\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  let userLevelOutPrint;\n  if (user.level === 1) {\n    userLevelOutPrint = 'DJ';\n  } else if (user.level === 2) {\n    userLevelOutPrint = 'Staff';\n  } else {\n    userLevelOutPrint = 'Admin';\n  }\n\n  let className;\n  let userStatusOutPrint;\n  if (user.status === null || user.status === 0) {\n    userStatusOutPrint = 'Inactive';\n    className = 'inactive-user';\n  } else if (user.status === 1) {\n    userStatusOutPrint = 'Active';\n    className = 'active-user';\n  }\n\n  return (\n    <Table.Row>\n      <Table.Cell>\n        <EditUserModal\n          user={user}\n          modalOpen={modalOpen}\n          onSubmit={submitUpdatedUser}\n          error={error}\n          onClose={closeModal}\n        />\n        <button\n          style={{ border: 'none', cursor: 'pointer', color: 'blue' }}\n          onClick={openModal}\n        >\n          {user.username}\n        </button>\n      </Table.Cell>\n      <Table.Cell>\n        {user.first_name} {user.last_name}\n      </Table.Cell>\n      {/* <Table.Cell>\n        <Moment format='MMMM Do YYYY, h:mm:ss a'>{user.last_seen}</Moment>\n      </Table.Cell> */}\n      <Table.Cell>{user.last_seen}</Table.Cell>\n      <Table.Cell className={className}>{userStatusOutPrint}</Table.Cell>\n      <Table.Cell>{userLevelOutPrint}</Table.Cell>\n      <Table.Cell>\n        <Icon\n          color='red'\n          onClick={() => setDeleteUserOpen(true)}\n          name='delete'\n        />\n        <Confirm\n          content={`Are you sure you wish to delete user ${user.username}?`}\n          open={openDeleteUser}\n          onCancel={cancelDelete}\n          onConfirm={confirmDelete}\n          cancelButton='Cancel delete'\n          confirmButton='Confirm delete'\n        />\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default UserListItem;\n","import React from 'react';\nimport { Container, Table } from 'semantic-ui-react';\nimport { LoginState } from '../../store/login/types';\nimport { Users, User } from '../../store/user/types';\n\nimport UserListItem from './UserListItem';\n\ninterface Props {\n  users: Users;\n}\n\nconst UserList: React.FC<Props> = ({ users }) => {\n  return (\n    <Container>\n      <div style={{ marginTop: '1rem', marginBottom: '1rem' }}>\n        <h3 style={{ display: 'inline' }}>Users</h3>\n      </div>\n      <Table striped>\n        <Table.Header>\n          <Table.Row>\n            <Table.Cell>Username</Table.Cell>\n            <Table.Cell>Name</Table.Cell>\n            <Table.Cell>Latest login</Table.Cell>\n            <Table.Cell>Status</Table.Cell>\n            <Table.Cell>Level</Table.Cell>\n          </Table.Row>\n        </Table.Header>\n\n        <Table.Body>\n          {users.map((user: User) => (\n            <UserListItem user={user} key={user.id} />\n          ))}\n        </Table.Body>\n      </Table>\n    </Container>\n  );\n};\n\nexport default UserList;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport {\n  RequiredTextField,\n  RequiredPasswordField,\n  SelectField,\n} from '../../layout/forms/FormFields';\n\nimport {\n  AddUserFormValues,\n  UserLevel,\n  UserLevelOptions,\n} from '../../../store/user/types';\n\ninterface Props {\n  onSubmit: (values: AddUserFormValues) => void;\n  onCancel: () => void;\n}\n\nconst levelOptions: UserLevelOptions[] = [\n  { value: UserLevel.DJ, label: 'DJ' },\n  { value: UserLevel.Staff, label: 'Staff' },\n  { value: UserLevel.Admin, label: 'Admin' },\n];\n\nconst AddUserForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        username: '',\n        password: '',\n        confirm_password: '',\n        first_name: '',\n        last_name: '',\n        email: '',\n        level: UserLevel.DJ,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.username) {\n          errors.username = requiredError;\n        }\n        if (!values.password) {\n          errors.password = requiredError;\n        }\n        if (!values.confirm_password) {\n          errors.confirm_password = requiredError;\n        }\n        if (values.password !== values.confirm_password) {\n          errors.password = 'Passwords do not match';\n          errors.confirm_password = 'Passwords do not match';\n        }\n        if (!values.email) {\n          errors.email = requiredError;\n        }\n        if (!values.first_name) {\n          errors.first_name = requiredError;\n        }\n        if (!values.last_name) {\n          errors.last_name = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Username'\n              placeholder='Username'\n              name='username'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Password'\n              placeholder='Password'\n              name='password'\n              type='password'\n              component={RequiredPasswordField}\n            />\n            <Field\n              label='Confirm password'\n              placeholder='Confirm password'\n              name='confirm_password'\n              type='password'\n              component={RequiredPasswordField}\n            />\n            <Field\n              label='First name'\n              placeholder='First name'\n              name='first_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Last name'\n              placeholder='Last name'\n              name='last_name'\n              component={RequiredTextField}\n            />\n            <Field\n              label='Email'\n              placeholder='Email'\n              name='email'\n              component={RequiredTextField}\n            />\n            <SelectField label='Level' name='level' options={levelOptions} />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddUserForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddUserForm from './AddUserForm';\nimport { AddUserFormValues } from '../../../store/user/types';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: AddUserFormValues) => void;\n  error?: string;\n}\n\nconst AddUserModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new user</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <AddUserForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddUserModal;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ApplicationState } from '../../store/types';\nimport { Button, Icon, Container } from 'semantic-ui-react';\nimport UserList from './UserList';\nimport AddUserModal from './AddUserModal';\nimport { AddUserFormValues } from '../../store/user/types';\nimport { createUser } from '../../store/user/actions';\nimport { setNotification } from '../../store/notification/actions';\n\nconst Users: React.FC = () => {\n  const users = useSelector((state: ApplicationState) => state.user);\n  const login = useSelector((state: ApplicationState) => state.login);\n  const dispatch = useDispatch();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewUser = (values: AddUserFormValues) => {\n    try {\n      dispatch(createUser(values));\n      dispatch(setNotification(`User ${values.username} created!`, 'success'));\n      closeModal();\n    } catch (e) {\n      dispatch(setNotification('Failed to create user!', 'fail'));\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n  if (login.currentUser?.level === 3) {\n    return (\n      <Container>\n        <Button\n          floated='right'\n          color='green'\n          style={{ marginBottom: '0.5rem' }}\n          onClick={() => openModal()}\n        >\n          <Icon name='add' />\n          Add a new user\n        </Button>\n        <AddUserModal\n          modalOpen={modalOpen}\n          onSubmit={submitNewUser}\n          error={error}\n          onClose={closeModal}\n        />\n        <UserList users={users.users} />\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default Users;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport axios from 'axios';\nimport { Container } from 'semantic-ui-react';\nimport './App.css';\n\nimport Album from './components/album';\nimport Artist from './components/artist';\nimport Footer from './components/layout/footer';\nimport Home from './components/layout/home';\nimport LoginForm from './components/login/LoginForm';\nimport Navbar from './components/layout/navbar';\nimport Notification from './components/layout/notification/Notification';\nimport Programs from './components/programs';\nimport ReportList from './components/reportList/ReportList';\nimport ReportTrackIndex from './components/report';\nimport Search from './components/search';\nimport Top100 from './components/top100';\nimport Track from './components/track';\nimport Users from './components/users';\n\nimport { initializeUser } from './store/login/actions';\nimport { initializeUsers } from './store/user/actions';\nimport { initializePrograms, getAllPrograms } from './store/program/actions';\n\nimport { ApplicationState } from './store/types';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const login = useSelector((state: ApplicationState) => state.login);\n  const notification = useSelector(\n    (state: ApplicationState) => state.notification\n  );\n\n  useEffect(() => {\n    dispatch(initializeUser());\n    dispatch(initializeUsers());\n    dispatch(initializePrograms());\n    dispatch(getAllPrograms());\n    axios.get<void>('/ping');\n    // eslint-disable-next-line\n  }, [login.currentUser?.token]);\n\n  if (login.currentUser === null) {\n    return (\n      <Container>\n        <LoginForm />\n        <Footer />\n      </Container>\n    );\n  }\n  if (login.currentUser?.status === null || login.currentUser?.status === 0) {\n    return (\n      <Container>\n        <LoginForm />\n        <div>Credentials deactivated. Please contact the administrator.</div>\n        <Footer />\n      </Container>\n    );\n  }\n  return (\n    <Router>\n      <div className='App'>\n        <Navbar />\n        <Notification notification={notification} />\n      </div>\n      <Switch>\n        {/* <Route exact path='/transfer' component={ReportTransferList} /> */}\n        <Route exact path='/' component={Home} />\n        <Route\n          path='/album/:id'\n          render={({ match }) => {\n            return <Album id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/artist/:id'\n          render={({ match }) => {\n            return <Artist id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/track/:id'\n          render={({ match }) => {\n            return <Track id={match.params.id} />;\n          }}\n        />\n        <Route\n          path='/reports/:id'\n          render={({ match }) => {\n            return <ReportTrackIndex id={match.params.id} />;\n          }}\n        />\n        <Route exact path='/reports' component={ReportList} />\n        <Route exact path='/top100' component={Top100} />\n        <Route exact path='/search' component={Search} />\n        <Route exact path='/programs' component={Programs} />\n        <Route exact path='/users' component={Users} />\n      </Switch>\n      <Footer />\n    </Router>\n  );\n};\n\nexport default App;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_ALBUM,\n  ADD_TRACK_TO_ALBUM,\n  GET_TRACKLIST_OF_ALBUM,\n  CLEAR_CURRENT_ALBUM,\n  SET_LOADING,\n  CHANGE_ARTIST_OF_ALBUM,\n  AlbumState,\n  AlbumActionTypes,\n} from './types';\n\nconst initialState: AlbumState = {\n  currentAlbum: null,\n  tracklist: [],\n  loading: false,\n};\n\nconst albumReducer: Reducer<AlbumState, Action> = (\n  state = initialState,\n  action: AlbumActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_ALBUM:\n      return {\n        ...state,\n        currentAlbum: action.data,\n        loading: false,\n      };\n    case GET_TRACKLIST_OF_ALBUM:\n      return {\n        ...state,\n        tracklist: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_ALBUM:\n      return {\n        ...state,\n        currentAlbum: null,\n        tracklist: [],\n        loading: false,\n      };\n    case ADD_TRACK_TO_ALBUM:\n      return {\n        ...state,\n        tracklist: [...state.tracklist, action.data],\n      };\n    // case CHANGE_ARTIST_OF_ALBUM:\n    //   return {\n    //     ...state,\n    //     currentAlbum: {\n    //       ...state.currentAlbum,\n    //       artist_id: action.data.artist_id,\n    //       artist_name: action.data.artist_name,\n    //     },\n    //     loading: false,\n    //   };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default albumReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_ARTIST,\n  GET_ALBUM_LIST_BY_ARTIST,\n  CLEAR_CURRENT_ARTIST,\n  SET_LOADING,\n  ArtistState,\n  ArtistActionTypes,\n} from './types';\n\nconst initialState: ArtistState = {\n  currentArtist: null,\n  albumList: [],\n  loading: false,\n};\n\nconst artistReducer: Reducer<ArtistState, Action> = (\n  state = initialState,\n  action: ArtistActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_ARTIST:\n      return {\n        ...state,\n        currentArtist: action.data,\n        loading: false,\n      };\n    case GET_ALBUM_LIST_BY_ARTIST:\n      return {\n        ...state,\n        albumList: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_ARTIST:\n      return {\n        ...state,\n        currentArtist: null,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default artistReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  LoginActionTypes,\n  LoginState,\n  INIT_USER,\n  LOGIN,\n  LOGOUT,\n  UPDATE_CURRENT_USER,\n  SET_LOADING,\n} from './types';\n\nconst initialState: LoginState = {\n  loading: false,\n  currentUser: null,\n};\n\nconst loginReducer: Reducer<LoginState, Action> = (\n  state = initialState,\n  action: LoginActionTypes\n) => {\n  switch (action.type) {\n    case INIT_USER:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGIN:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case UPDATE_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: action.data,\n        loading: false,\n      };\n    case LOGOUT:\n      return initialState;\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default loginReducer;\n","import { Action, Reducer } from 'redux';\nimport { NotificationState, NotificationActionTypes } from './types';\n\nconst initialState: NotificationState = {\n  message: null,\n  type: null,\n};\n\nconst notificationReducer: Reducer<NotificationState, Action> = (\n  state = initialState,\n  action: NotificationActionTypes\n) => {\n  switch (action.type) {\n    case 'SET_NOTIFICATION':\n      return action.data;\n\n    case 'CLEAR_NOTIFICATION':\n      return initialState;\n\n    default:\n      return state;\n  }\n};\n\nexport default notificationReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_PROGRAM,\n  GET_ALL_PROGRAMS,\n  GET_ALL_ACTIVE_PROGRAMS,\n  CREATE_NEW_PROGRAM,\n  CREATE_NEW_PROGRAM_ON_NEW_REPORT,\n  UPDATE_PROGRAM,\n  ProgramState,\n  ProgramActionTypes,\n} from './types';\n\nconst initialState: ProgramState = {\n  allPrograms: [],\n  activePrograms: [],\n  program: null,\n  loading: false,\n};\n\nconst programReducer: Reducer<ProgramState, Action> = (\n  state = initialState,\n  action: ProgramActionTypes\n) => {\n  switch (action.type) {\n    case GET_ALL_PROGRAMS:\n      return {\n        ...state,\n        allPrograms: action.data,\n        loading: false,\n      };\n    case GET_ALL_ACTIVE_PROGRAMS:\n      return {\n        ...state,\n        activePrograms: action.data,\n        loading: false,\n      };\n    case GET_ONE_PROGRAM:\n      return {\n        ...state,\n        program: action.data,\n        loading: false,\n      };\n    case CREATE_NEW_PROGRAM:\n      return {\n        ...state,\n        allPrograms: [...state.allPrograms, action.data],\n        loading: false,\n      };\n    case CREATE_NEW_PROGRAM_ON_NEW_REPORT:\n      return {\n        ...state,\n        activePrograms: [...state.activePrograms, action.data],\n        loading: false,\n      };\n    case UPDATE_PROGRAM:\n      return {\n        ...state,\n        allPrograms: state.allPrograms.map((program) =>\n          program.id === action.data.id ? action.data : program\n        ),\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\nexport default programReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_REPORT,\n  GET_PLAYLOG_TRACKS,\n  GET_REPORT_DETAILS,\n  ADD_NEW_TRACK,\n  UPDATE_TRACK,\n  SET_EDIT_TRACK_ID,\n  GET_ONE_TRACK,\n  REMOVE_CURRENT_TRACK,\n  DELETE_TRACK_FROM_REPORT,\n  CHECK_FOR_DELETE,\n  UNCHECK_FOR_DELETE,\n  CLEAR_CHECKED_FOR_DELETE,\n  CREATE_REPORT,\n  UPDATE_REPORT,\n  CLEAR_CURRENT_REPORT,\n  SET_LOADING,\n  ADD_TRACK_TO_REPORT,\n  ReportState,\n  ReportActionTypes,\n} from './types';\n\nconst initialState: ReportState = {\n  report: [],\n  playlog: [],\n  editTrackId: null,\n  reportDetails: null,\n  newReport: null,\n  loading: false,\n  checkedForDelete: [],\n  currentTrack: null,\n};\n\nconst reportReducer: Reducer<ReportState, Action> = (\n  state = initialState,\n  action: ReportActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_REPORT:\n      return {\n        ...state,\n        report: action.data,\n        loading: false,\n      };\n    case GET_PLAYLOG_TRACKS:\n      return {\n        ...state,\n        report: [...state.report, ...action.report],\n        playlog: action.playlog,\n        loading: false,\n      };\n    case GET_REPORT_DETAILS:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null,\n        loading: false,\n      };\n    case ADD_NEW_TRACK:\n      return {\n        ...state,\n        report: [...state.report, action.data],\n        loading: false,\n      };\n    case ADD_TRACK_TO_REPORT:\n      return {\n        ...state,\n        report: [...state.report, action.data],\n      };\n    // case UPDATE_TRACK:\n    //   return {\n    //     ...state,\n    //     report: state.report.map((track) =>\n    //       track.track_id === action.data.track_id ? action.data : track\n    //     ),\n    //     loading: false,\n    //   };\n    case SET_EDIT_TRACK_ID:\n      return {\n        ...state,\n        editTrackId: action.data,\n      };\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case REMOVE_CURRENT_TRACK:\n      return {\n        ...state,\n        currentTrack: null,\n      };\n    case CLEAR_CURRENT_REPORT:\n      return {\n        ...state,\n        report: [],\n      };\n    case CREATE_REPORT:\n      return {\n        ...state,\n        newReport: action.data,\n        reportDetails: action.data,\n        loading: false,\n      };\n    case UPDATE_REPORT:\n      return {\n        ...state,\n        reportDetails: action.data,\n        newReport: null,\n        loading: false,\n      };\n    case DELETE_TRACK_FROM_REPORT:\n      return {\n        ...state,\n        report: state.report.filter(\n          (track) => track.report_track_id !== action.data\n        ),\n      };\n    case CHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: [action.data, ...state.checkedForDelete],\n      };\n    case UNCHECK_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: state.checkedForDelete.filter(\n          (id) => id !== action.data\n        ),\n      };\n    case CLEAR_CHECKED_FOR_DELETE:\n      return {\n        ...state,\n        checkedForDelete: [],\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reportReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ALL_REPORTS_BY_DATE,\n  GET_ALL_IN_PROGRESS,\n  GET_ALL_REPORT_TRANSFERS,\n  GENERATE_REPORT_TRANSFER,\n  FILTER_BY_USER_ID,\n  FILTER_BY_STATUS,\n  FILTER_BY_TEXT,\n  DELETE_REPORT,\n  SET_LOADING,\n  ReportListState,\n  ReportListActionTypes,\n} from './types';\n\nconst initialState: ReportListState = {\n  reportList: [],\n  inProgress: [],\n  reportListDate: null,\n  reportTransferList: [],\n  lastTransfer: null,\n  loading: false,\n  filterStatusValue: null,\n  filterUserValue: null,\n  filterByText: '',\n  error: null,\n};\n\nconst reportListReducer: Reducer<ReportListState, Action> = (\n  state = initialState,\n  action: ReportListActionTypes\n) => {\n  switch (action.type) {\n    case GET_ALL_REPORTS_BY_DATE:\n      return {\n        ...state,\n        reportList: action.data,\n        reportListDate: action.date,\n        loading: false,\n      };\n    case GET_ALL_IN_PROGRESS:\n      return {\n        ...state,\n        inProgress: action.data,\n        loading: false,\n      };\n    case GET_ALL_REPORT_TRANSFERS:\n      return {\n        ...state,\n        reportTransferList: action.data,\n        loading: false,\n      };\n    case GENERATE_REPORT_TRANSFER:\n      return {\n        ...state,\n        lastTransfer: action.data,\n        loading: false,\n      };\n    case DELETE_REPORT:\n      return {\n        ...state,\n        reportList: state.reportList.filter(\n          (report) => report.id !== action.data\n        ),\n        loading: false,\n      };\n    case FILTER_BY_USER_ID:\n      return {\n        ...state,\n        filterUserValue: action.data,\n      };\n    case FILTER_BY_STATUS:\n      return {\n        ...state,\n        filterStatusValue: action.data,\n      };\n    case FILTER_BY_TEXT:\n      return {\n        ...state,\n        filterByText: action.data,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reportListReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  // AUTOCOMPLETE_RESULTS,\n  ADVANCED_RESULTS,\n  SORT_ADVANCED_RESULTS,\n  GET_DISCOGS_DATA,\n  CLEAR_DISCOGS_DATA,\n  TOP_100,\n  SET_SEARCH_LOADING,\n  // GET_CHANGE_ALBUM_OPTIONS,\n  // GET_CHANGE_ARTIST_OPTIONS,\n  // RESET_CHANGE_ALBUM_OPTIONS,\n  // RESET_CHANGE_ARTIST_OPTIONS,\n  // MERGE_ALBUMS,\n  MERGE_ARTISTS,\n  MERGE_TRACKS,\n  SearchState,\n  SearchActionTypes,\n} from './types';\n\nconst initialState: SearchState = {\n  // searchResults: [],\n  top100: [],\n  top100Query: null,\n  advancedResults: [],\n  sortAdvancedResults: null,\n  // changeArtistOptions: [],\n  // changeAlbumOptions: [],\n  loading: false,\n  discogsData: null,\n};\n\nconst searchReducer: Reducer<SearchState, Action> = (\n  state = initialState,\n  action: SearchActionTypes\n) => {\n  switch (action.type) {\n    case ADVANCED_RESULTS:\n      return {\n        ...state,\n        advancedResults: action.data,\n        loading: false,\n      };\n    case SORT_ADVANCED_RESULTS:\n      return {\n        ...state,\n        sortAdvancedResults: action.data,\n      };\n    case TOP_100:\n      return {\n        ...state,\n        top100: action.data,\n        top100Query: action.query,\n        loading: false,\n      };\n    case GET_DISCOGS_DATA:\n      return {\n        ...state,\n        discogsData: action.data,\n      };\n    case CLEAR_DISCOGS_DATA:\n      return {\n        ...state,\n        discogsData: null,\n      };\n    case SET_SEARCH_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    case MERGE_TRACKS:\n      return {\n        ...state,\n        advancedResults: state.advancedResults.filter(\n          (result) => result.track_id !== action.data.merge\n        ),\n      };\n    case MERGE_ARTISTS: {\n      const artistToMerge = action.data.merge;\n      const mergeArtistTo = action.data.mergeTo;\n      const newArtistName = action.data.newName;\n      // get the artists that need name and id changing\n      const filteredArtists = state.advancedResults.filter(\n        (r) => r.artist_id === artistToMerge\n      );\n      // update the names and ids of those artists\n      const renamedArtists = filteredArtists.map((result) => ({\n        ...result,\n        artist_id: mergeArtistTo,\n        artist_name: newArtistName,\n      }));\n      // remove albums with old ids from advancedResults\n      const removeMergedArtists = state.advancedResults.filter(\n        (r) => r.artist_id !== artistToMerge\n      );\n      //\n      const newArtistResults = [...renamedArtists, ...removeMergedArtists];\n      return {\n        ...state,\n        advancedResults: newArtistResults,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default searchReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  GET_ONE_TRACK,\n  GET_ONE_TRACK_HISTORY,\n  CLEAR_CURRENT_TRACK,\n  SET_LOADING,\n  UPDATE_TRACK,\n  CHANGE_ALBUM,\n  CHANGE_ARTIST,\n  TrackState,\n  TrackActionTypes,\n} from './types';\n\nconst initialState: TrackState = {\n  currentTrack: null,\n  playHistory: [],\n  loading: false,\n};\n\nconst trackReducer: Reducer<TrackState, Action> = (\n  state = initialState,\n  action: TrackActionTypes\n) => {\n  switch (action.type) {\n    case GET_ONE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case UPDATE_TRACK:\n      return {\n        ...state,\n        currentTrack: action.data,\n        loading: false,\n      };\n    case GET_ONE_TRACK_HISTORY:\n      return {\n        ...state,\n        playHistory: action.data,\n        loading: false,\n      };\n    case CLEAR_CURRENT_TRACK:\n      return {\n        ...state,\n        playhistory: null,\n        currentTrack: null,\n      };\n    // case CHANGE_ALBUM:\n    //   return {\n    //     ...state,\n    //     currentTrack: {\n    //       ...state.currentTrack,\n    //       album_id: action.data.album_id,\n    //       album: action.data.album_name,\n    //     },\n    //     loading: false,\n    //   };\n    // case CHANGE_ARTIST:\n    //   return {\n    //     ...state,\n    //     currentTrack: {\n    //       ...state.currentTrack,\n    //       artist_id: action.data.artist_id,\n    //       artist: action.data.artist,\n    //     },\n    //     loading: false,\n    //   };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\nexport default trackReducer;\n","import { Action, Reducer } from 'redux';\nimport {\n  INIT_USER_LIST,\n  SET_LOADING,\n  CREATE_USER,\n  UPDATE_USER,\n  DELETE_USER,\n  UserState,\n  UserActionTypes,\n} from './types';\n\nconst initialState: UserState = {\n  users: [],\n  loading: false,\n};\n\nconst userReducer: Reducer<UserState, Action> = (\n  state = initialState,\n  action: UserActionTypes\n) => {\n  switch (action.type) {\n    case INIT_USER_LIST:\n      return {\n        ...state,\n        users: action.data,\n        loading: false,\n      };\n    case CREATE_USER:\n      return {\n        ...state,\n        users: [...state.users, action.data],\n        loading: false,\n      };\n    case UPDATE_USER:\n      return {\n        ...state,\n        users: action.data,\n        loading: false,\n      };\n    case DELETE_USER:\n      return {\n        ...state,\n        users: state.users.filter((user) => user.id !== action.data),\n        loading: false,\n      };\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport albumReducer from './album/reducer';\nimport artistReducer from './artist/reducer';\nimport loginReducer from './login/reducer';\nimport notificationReducer from './notification/reducer';\nimport programReducer from './program/reducer';\nimport reportReducer from './report/reducer';\nimport reportListReducer from './reportList/reducer';\nimport searchReducer from './search/reducer';\nimport trackReducer from './track/reducer';\nimport userReducer from './user/reducer';\n\nconst reducer = combineReducers({\n  album: albumReducer,\n  artist: artistReducer,\n  login: loginReducer,\n  notification: notificationReducer,\n  program: programReducer,\n  report: reportReducer,\n  reportList: reportListReducer,\n  search: searchReducer,\n  track: trackReducer,\n  user: userReducer,\n});\n\nexport default createStore(\n  reducer,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/logo.ca9e42db.png\";"],"sourceRoot":""}